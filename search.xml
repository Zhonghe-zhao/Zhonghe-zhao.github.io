<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>EasyDarwin使用</title>
      <link href="/2025/05/18/%E9%A1%B9%E7%9B%AE/EasyDarwin/"/>
      <url>/2025/05/18/%E9%A1%B9%E7%9B%AE/EasyDarwin/</url>
      
        <content type="html"><![CDATA[<h1 id="Building-on-Windows"><a href="#Building-on-Windows" class="headerlink" title="Building on Windows"></a>Building on Windows</h1><h2 id="make-build-windows"><a href="#make-build-windows" class="headerlink" title="make build&#x2F;windows"></a>make build&#x2F;windows</h2><p>首先make build&#x2F;windows出现错误</p><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><p>项目中提供了一个 <code>GetBuildTime()</code> 函数，会解析 <code>buildTimeAt</code> 为时间戳，作为构建时间展示。</p><p>在这过程中，我遇到两个问题：</p><ol><li><p><strong>Git 解析失败</strong>：由于 Git 命令没有添加 <code>--</code> 分隔，出现了 <code>ambiguous argument &#39;Try&#39;</code> 的错误，后通过添加 <code>--</code> 或使用 <code>symbolic-ref</code> 修复。</p></li><li><p><strong>构建时报 undefined 错误</strong>：main 函数调用了 <code>GetBuildTime()</code>，但该函数定义未包含在同一构建包中，修复方式是将定义放入相同的 <code>main</code> 包下，并确保 Makefile 构建时包含相关源码文件。</p></li></ol><p>查找报错位置 main.go 的第52行！ 结合内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-ldflags=<span class="string">&quot;-s -w \  </span></span><br><span class="line"><span class="string">    -X main.buildVersion=$(VERSION) \  </span></span><br><span class="line"><span class="string">    -X main.gitBranch=$(BRANCH_NAME) \  </span></span><br><span class="line"><span class="string">    -X main.gitHash=$(HASH_AND_DATE) \  </span></span><br><span class="line"><span class="string">    -X main.buildTimeAt=$(shell date +%s) \  </span></span><br><span class="line"><span class="string">    -X main.release=true \  </span></span><br><span class="line"><span class="string">    &quot;</span> -o=$(dir)/EasyDarwin.exe ./cmd/server</span><br></pre></td></tr></table></figure><p>使用命令 <code>go list -f &#39;&#123;&#123;.GoFiles&#125;&#125;&#39; ./cmd/server [main.go service.go wire.go]</code>发现<code>buildtime.go</code>并没有被编译  !!!</p><p>查看 文件发现</p><p><code>import &quot;C&quot;</code></p><p>CGO 模式!  我进行了注释处理！</p><p>编译成功！</p><p>[image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><h2 id="Getting-Started-Guide"><a href="#Getting-Started-Guide" class="headerlink" title="Getting Started Guide"></a>Getting Started Guide</h2><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><p>安装 FFmpeg 打开EasyDarwin</p><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><h2 id="创建推流"><a href="#创建推流" class="headerlink" title="创建推流"></a>创建推流</h2><p>安装测试视频</p><p><code>D:\vedio&gt; curl -o oceans.mp4 http://vjs.zencdn.net/v/oceans.mp4</code></p><p>在<code> D:\vedio&gt;</code>下</p><p>使用命令</p><p>&#96;ffmpeg -re -i .&#x2F;oceans.mp4 -c copy -f flv -y rtmp:&#x2F;&#x2F;localhost:21935&#x2F;live&#x2F;stream_1?sign&#x3D;ulSFVQGoTU</p><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p><p>推流成功</p><h2 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h2><p>![image-20241107104049573](&#x2F;picture&#x2F;EasyDarwin&#x2F;Pasted image 20250518170245.png)</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>函数指针数组</title>
      <link href="/2025/04/01/go/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/"/>
      <url>/2025/04/01/go/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>引用博文；</p><p>(博客园)[<a href="https://www.cnblogs.com/tp-16b/p/7860491.html]">https://www.cnblogs.com/tp-16b/p/7860491.html]</a></p><p>对于在xv6中看到的一个映射表关系</p><p>关于： 函数指针数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="title function_">uint64</span> <span class="params">(*syscalls[])</span><span class="params">(<span class="type">void</span>)</span> = &#123;</span><br><span class="line">[SYS_fork]    sys_fork,</span><br><span class="line">[SYS_exit]    sys_exit,</span><br><span class="line">[SYS_wait]    sys_wait,</span><br><span class="line">[SYS_pipe]    sys_pipe,</span><br><span class="line">[SYS_read]    sys_read,</span><br><span class="line">[SYS_kill]    sys_kill,</span><br><span class="line">[SYS_exec]    sys_exec,</span><br><span class="line">[SYS_fstat]   sys_fstat,</span><br><span class="line">[SYS_chdir]   sys_chdir,</span><br><span class="line">[SYS_dup]     sys_dup,</span><br><span class="line">[SYS_getpid]  sys_getpid,</span><br><span class="line">[SYS_sbrk]    sys_sbrk,</span><br><span class="line">[SYS_sleep]   sys_sleep,</span><br><span class="line">[SYS_uptime]  sys_uptime,</span><br><span class="line">[SYS_open]    sys_open,</span><br><span class="line">[SYS_write]   sys_write,</span><br><span class="line">[SYS_mknod]   sys_mknod,</span><br><span class="line">[SYS_unlink]  sys_unlink,</span><br><span class="line">[SYS_link]    sys_link,</span><br><span class="line">[SYS_mkdir]   sys_mkdir,</span><br><span class="line">[SYS_close]   sys_close,</span><br><span class="line">[SYS_trace]   sys_trace,</span><br><span class="line">[SYS_sysinfo] sys_sysinfo,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>数组和指针是没关系的！</p><h4 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h4><p>int (*p)[4];     </p><p>char (*p)[4]; </p><h4 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h4><p>int *p[10]; </p><p>char *p[10];    </p><p>char **p[10] </p><p>它们都是大小为10元素的数组，里面分别存放着元素为 int<em>，char</em>, char** 类型的指针数组</p><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里定义void (*p)()。一眼可知pfun1先和*结合，说明pfun1是指针，指针指向的是一个函数，指向的函数无参数，返回值类型为void。</span><br></pre></td></tr></table></figure><p>这里定义void (<em>p)()。一眼可知pfun1先和</em>结合，说明pfun1是指针，指针指向的是一个函数，指向的函数无参数，返回值类型为void。</p><h4 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h4><p>把函数的地址存到一个数组中，那这个数组就叫函数指针数组</p><p>int (*parr1[10])();</p><p>int *parr2<a href="">10</a>;</p><p>int (*)() parr3[10]; </p><p>parr1 先和 [] 结合，说明parr1是数组，数组的内容是什么呢？ 是 int (*)() 类型的函数指针。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>总结一下最近</title>
      <link href="/2025/03/31/%E7%94%9F%E6%B4%BB/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E6%9C%80%E8%BF%91/"/>
      <url>/2025/03/31/%E7%94%9F%E6%B4%BB/%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B%E6%9C%80%E8%BF%91/</url>
      
        <content type="html"><![CDATA[<p>好久没有更新博客了，因为一些重要的笔记都移动到Obsidian上面写了，很方便 ，谈谈新的一年对于技术的追求</p><p>在大二上学期以及在大一的时候都觉得计算机基础是非常重要的，因为一些声音吧，也沉迷于如何快速做项目啊，背八股文啊，越来越觉得空虚<br>没有得到什么，在大一的时候天真的以为只要学会一门语言就可以很强哈哈哈哈，<br>到现在再看,语言真的只是一门工具，在想学习什么的时候，顺带学一下就可以研究自己更喜欢的领域，<br>在本学期，我的思想发生了重大的转变，其实本来也是，我觉得要想学习计算机，你如果不去理解计算机那么算的上什么学习计算机呢？<br>数据结构为什么重要？世界本来就是一个巨大的存储系统，如何存储数据？如何快速的存储数据是那么的重要!<br>我们用的数据库，操作系统，不全都是数据结构和算法的功劳吗？学习计算机的乐趣对于我来说<br>为什么跨越千里可以和对方聊天，每天坐在电脑前，为什么电脑可以这么工作，这就是一个黑盒，需要我们慢慢去挖掘，就是挖掘他们背后的黑盒，真的使我感到开心<br>就像文杰老哥说的一样 在这个ai的时候上层应用的逻辑显得没有那么重要。</p><p>在学习中一定要结合实际，才能深刻的理解这些知识，也就是所谓的八股文，发自内心的去理解，现在才理解什么是带着问题去读书去看，那种带入疑问去阅读，最终<br>疑问被解决的感觉是很爽的！</p><p>没有走过的路，听了别人和你说那是一条做错的路，你可能不信，只有你真正体验到了才知道那到底是一条什么路，即使最终的结果不尽人意，但是过程才是最重要的<br>对于结果呢？哈哈哈留下思考 过程与结果！可能每个人的看法也会不同吧，人都是生下来走一遭，自己的路一定要自己选自己走！那才是你的意义，别人会给你参考<br>会给你建议，最终的路都是自己走出来的！ 也感谢我遇见的所有人！</p><p>也希望自己能够坚持自己吧！ </p><ul><li>Trust but Verify</li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在这个时代，你是否过度依赖ai</title>
      <link href="/2025/02/12/%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/%E6%98%AF%E5%90%A6%E8%BF%87%E5%BA%A6%E4%BE%9D%E8%B5%96ai/"/>
      <url>/2025/02/12/%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/%E6%98%AF%E5%90%A6%E8%BF%87%E5%BA%A6%E4%BE%9D%E8%B5%96ai/</url>
      
        <content type="html"><![CDATA[<p>越来越觉得做任何事都离开不了ai，任何报错只需要复制粘贴，原本看文档可以解决的错误，让ai可能很长时间，都无法解决，那种来回粘贴的感觉<br>让我停止了思考，不想动脑，我好像成为了ai和代码之间的桥梁，ai让我在编码中也变得懒惰，那种空虚是真的！</p><p>这种急性子，渴望答案快速出来的懒惰，必须要改了！</p><ol><li>自己看懂错误出在哪里</li><li>查阅文档，试着自己解决</li><li>做事之前，自己构思</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>系统思考</title>
      <link href="/2025/01/30/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/"/>
      <url>/2025/01/30/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E7%B3%BB%E7%BB%9F%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>各个实体之间的联系构成了系统，当你在研究一个系统的时候，如果你切分了其中某一部分拿出来研究<br>必定会切断，这部分与整体的联系，也就是破坏了整个系统！</p><h1 id="必须从整体式理解一个系统"><a href="#必须从整体式理解一个系统" class="headerlink" title="必须从整体式理解一个系统"></a>必须从整体式理解一个系统</h1><p>关于组件的知识对于整体上理解一个系统，作用非常有限，在某些情况下，这些知识甚至具有相反的效果</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><ol><li><p>组件知识是局部的，而系统理解需要全局视角</p></li><li><p>组件是系统的一部分，但系统的行为不仅仅是组件的总和，还涉及它们之间的交互、架构模式、数据流、依赖关系等。<br>只关注组件，容易忽略系统级别的设计，比如如何扩展、如何容错、如何保障一致性。<br>局部最优 ≠ 全局最优</p></li><li><p>过度关注组件实现，可能会优化某个组件的性能或功能，但不一定符合整个系统的最佳实践。<br>例如，一个高效的缓存组件如果没有考虑分布式一致性，可能会导致整个系统数据不一致。<br>局部思维可能会误导系统设计</p></li><li><p>过分依赖某个组件，可能导致架构决策受限，比如：<br>认为数据库事务可以解决所有一致性问题，而忽略了分布式事务的挑战。<br>认为某个微服务框架很强大，而忽略了微服务本身的复杂性（如治理、监控等）。</p></li></ol><hr><p>关键是要有“系统思维”，知道什么时候关注细节，什么时候抬头看全局</p><p>系统展示出来的特性是做作为一个整体所拥有的特性，而不是任何一个部件所拥有的特性</p><h1 id="自组织"><a href="#自组织" class="headerlink" title="自组织"></a>自组织</h1><p>保持高度有序状态，具有能量流，</p>]]></content>
      
      
      <categories>
          
          <category> 书后心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新年新气象</title>
      <link href="/2025/01/28/%E7%94%9F%E6%B4%BB/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4/"/>
      <url>/2025/01/28/%E7%94%9F%E6%B4%BB/%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<p>辞旧迎新，改变最大的一年！</p><p>新的一年开始了，我希望我能在新的一年里，不断的审视自己，关注自己的一言一行，一举一动，如果有哪些坏习惯，要去更改！</p><p>希望自己变得越来越好吧！ 顺其自然的去做自己该去做的事，没有目的地！</p><p>Passion never fails！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>I/O多路复用中的一些疑惑</title>
      <link href="/2025/01/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
      <url>/2025/01/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h1><p>I&#x2F;O多路复用如何实现？<br>这里面用到了什么数据结构吗？<br>如果A先发起了请求在等待中然后去处理B的请求，当A的请求到达后，并处理完成后，还会继续处理B的请求吗？<br>还有在后续处理A的过程中，B处在等待的过程中，有可能其他的服务去处理B吗？<br>B在发送请求到A后，它在等待的过程中还会发送请求吗？</p><h1 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h1><p>1<strong>如果 A 请求发起了并在等待中，处理 B 的请求后，A 的请求完成后，还会继续处理 B 吗？</strong></p><p><strong>A</strong> 的请求和 <strong>B</strong> 的请求是两个独立的 I&#x2F;O 操作。当 A 的请求进入等待状态后（比如等待数据库查询或等待网络响应），服务器会继续处理 B 的请求，甚至是 C、D 等其他请求。</p><ul><li><strong>当 A 的请求到达后</strong>，服务器会接到通知，处理 <strong>A</strong> 的请求。</li><li><strong>在处理 A 请求时</strong>，如果 B 的请求仍然在等待状态，那么此时 B 并不会被继续处理，除非 B 的请求也准备好了。</li><li>处理完成 A 的请求后，服务器会继续处理下一个在等待队列中有数据准备好的请求（比如 B 的请求，如果它的数据已经准备好了）。</li></ul><p>可以理解为 <strong>事件驱动</strong>，服务器并不会直接按顺序处理 A、B 请求，而是看哪个请求的 I&#x2F;O 操作准备好了，哪个就被处理。</p><p>2<strong>在后续处理 A 的过程中，B 在等待时，是否有可能其他服务去处理 B？</strong></p><p><strong>B 的请求</strong>一般会在服务器端的同一线程中等待，除非采取了 <strong>分布式架构</strong> 或 <strong>负载均衡</strong>，否则通常不会有其他服务去处理 B。B 依然在等待队列中，直到 I&#x2F;O 多路复用机制通知服务器有数据准备好，才会继续处理。</p><p>但是，在分布式场景下，B 的请求有可能会被路由到 <strong>其他节点</strong> 或 <strong>服务实例</strong> 去处理。例如，微服务架构中，某个请求可能会被负载均衡到另一个服务实例处理。</p><p>3<strong>B 在发送请求到 A 后，它在等待的过程中是否会发送请求？</strong></p><p>是的，<strong>B</strong> 可以继续发送请求到 <strong>其他服务</strong>。I&#x2F;O 多路复用的特点是 <strong>非阻塞</strong>，也就是说，B 在等待 A 的响应时，它可以继续进行其他 I&#x2F;O 操作，甚至发送新的请求到其他服务。</p><p>例如：</p><ul><li><strong>B</strong> 在等待 A 的响应时，可能会继续向其他服务发起请求。</li><li><strong>B</strong> 可以处理自己的其他任务，或继续等待其他 I&#x2F;O 操作。</li></ul><p>这种 <strong>并发</strong> 和 <strong>非阻塞</strong> 的机制让多个请求可以并行进行，而每个请求不会阻塞其他请求的进程。</p><h1 id="如何应用多路复用到实际生活中？"><a href="#如何应用多路复用到实际生活中？" class="headerlink" title="如何应用多路复用到实际生活中？"></a>如何应用多路复用到实际生活中？</h1><p>虽然多路复用技术本身是一个操作系统层面的技术，但它的应用对于 高并发处理 和 性能优化 是至关重要的，在多个实际生活场景中都有体现：</p><ol><li>网络服务：<br>Web 服务器：当一个 Web 服务器需要同时处理多个客户端请求时，使用多路复用可以有效避免为每个请求创建一个线程的高昂开销。比如，现代 Web 服务器（如 Nginx）使用多路复用来管理大量的 HTTP 请求。<br>数据库连接池：当多个客户端请求数据库时，连接池可以通过多路复用来共享连接池中的数据库连接，避免每个请求都创建新的连接。</li><li>实时通信应用：<br>即时消息（IM）系统：例如，聊天应用的服务器需要同时处理大量用户的消息，使用多路复用技术可以提高服务器处理并发连接的效率。<br>视频流服务：如直播平台需要同时处理大量用户的请求，多路复用技术可以有效管理所有用户的连接，确保数据流的稳定性。</li><li>操作系统中的 I&#x2F;O 管理：<br>操作系统内核在管理文件系统和网络连接时，也会使用多路复用来提高磁盘和网络 I&#x2F;O 操作的效率。例如，Linux 内核的 epoll 就是在处理大规模的网络连接时非常高效的技术。<br>硬件资源管理：<br>设备管理：例如，在一些嵌入式系统中，多个硬件设备可能需要同时进行数据读写，操作系统可以通过多路复用的方式将数据的读写操作交给不同的设备驱动程序处理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go中[]byte转换io.Reader</title>
      <link href="/2025/01/21/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%5B%5Dbyte_io.Reader/"/>
      <url>/2025/01/21/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%5B%5Dbyte_io.Reader/</url>
      
        <content type="html"><![CDATA[<p>[]byte 转 io.Reader</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    data := []<span class="type">byte</span>(<span class="string">&quot;Hello AlwaysBeta&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// byte slice to bytes.Reader, which implements the io.Reader interface</span></span><br><span class="line">    reader := bytes.NewReader(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read the data from reader</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">if</span> _, err := reader.Read(buf); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(buf))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>io.Reader 转 []byte</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ioReaderData := strings.NewReader(<span class="string">&quot;Hello AlwaysBeta&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// creates a bytes.Buffer and read from io.Reader</span></span><br><span class="line">    buf := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line">    buf.ReadFrom(ioReaderData)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// retrieve a byte slice from bytes.Buffer</span></span><br><span class="line">    data := buf.Bytes()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// only read the left bytes from 6</span></span><br><span class="line">    fmt.Println(<span class="type">string</span>(data[<span class="number">6</span>:]))</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 创建 Buffer 暂存空间，并将一个字符串写入 Buffer</span></span><br><span class="line">    <span class="comment">// 使用 io.Writer 的 Write 方法写入</span></span><br><span class="line">    <span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">    buf.Write([]<span class="type">byte</span>(<span class="string">&quot;hello world , &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用 Fprintf 将一个字符串拼接到 Buffer 里</span></span><br><span class="line">    fmt.Fprintf(&amp;buf, <span class="string">&quot; welcome to golang !&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 Buffer 的内容输出到标准输出设备</span></span><br><span class="line">    buf.WriteTo(os.Stdout)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>o.Reader 接口：io.Reader 接口要求实现 Read(p []byte) (n int, err error) 方法，返回读取的字节数和错误信息。*bytes.Reader 就是通过实现这个方法来允许对 []byte 进行按块读取。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>避免在Go中使用 io.ReadAll</title>
      <link href="/2025/01/21/go/Go_ReadAll/"/>
      <url>/2025/01/21/go/Go_ReadAll/</url>
      
        <content type="html"><![CDATA[<p>io.ReadAll 主要的作用是从一个 io.Reader 中读取所有数据，直到结尾。</p><p><strong>虽然使用方便：</strong></p><p><strong>两个明显的缺点：</strong></p><p>遇到大文件时，这个函数就会暴露出</p><p>性能问题，文件越大，性能越差。</p><p>文件过大的话，可能直接撑爆内存，导致程序崩溃。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    res, err := http.Get(<span class="string">&quot;http://www.google.com/robots.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    robots, err := io.ReadAll(res.Body)</span><br><span class="line">    res.Body.Close()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%s&quot;</span>, robots)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>io.ReadAll 的源码如下：</p><p>&#x2F;&#x2F; src&#x2F;io&#x2F;io.go<br>func ReadAll(r Reader) ([]byte, error) {<br>b :&#x3D; make([]byte, 0, 512)<br>for {<br>n, err :&#x3D; r.Read(b[len(b):cap(b)])<br>b &#x3D; b[:len(b)+n]<br>if err !&#x3D; nil {<br>if err &#x3D;&#x3D; EOF {<br>err &#x3D; nil<br>}<br>return b, err<br>}<br>        if len(b) &#x3D;&#x3D; cap(b) {<br>            &#x2F;&#x2F; Add more capacity (let append pick how much).<br>            b &#x3D; append(b, 0)[:len(b)]<br>        }<br>    }<br>}</p><p>创建一个 512 字节的 buf；</p><p>不断读取内容到 buf，当 buf 满的时候，会追加一个元素，促使其重新分配内存；</p><p>直到结尾或报错，则返回；</p><h4 id="了解-Go-切片的扩容策略，如下："><a href="#了解-Go-切片的扩容策略，如下：" class="headerlink" title="了解 Go 切片的扩容策略，如下："></a>了解 Go 切片的扩容策略，如下：</h4><p>如果期望容量大于当前容量的两倍就会使用期望容量；</p><p>如果当前切片的长度小于 1024 就会将容量翻倍；</p><p>如果当前切片的长度大于 1024 就会每次增加 25% 的容量，直到新容量大于期望容量；</p><h4 id="替换方案："><a href="#替换方案：" class="headerlink" title="替换方案："></a>替换方案：</h4><p>可以使用 io.Copy 函数来代替，源码定义如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> copyBuffer(dst, src, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其功能是直接从 src 读取数据，并写入到 dst</p><p>和io.ReadAll 最大的不同就是没有把所有数据一次性都取出来，而是不断读取，不断写入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/io/io.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copyBuffer</span><span class="params">(dst Writer, src Reader, buf []<span class="type">byte</span>)</span></span> (written <span class="type">int64</span>, err <span class="type">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果源实现了 WriteTo 方法，则直接调用 WriteTo</span></span><br><span class="line">    <span class="keyword">if</span> wt, ok := src.(WriterTo); ok &#123;</span><br><span class="line">        <span class="keyword">return</span> wt.WriteTo(dst)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 同样的，如果目标实现了 ReaderFrom 方法，则直接调用 ReaderFrom</span></span><br><span class="line">    <span class="keyword">if</span> rt, ok := dst.(ReaderFrom); ok &#123;</span><br><span class="line">        <span class="keyword">return</span> rt.ReadFrom(src)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 buf 为空，则创建 32KB 的 buf</span></span><br><span class="line">    <span class="keyword">if</span> buf == <span class="literal">nil</span> &#123;</span><br><span class="line">        size := <span class="number">32</span> * <span class="number">1024</span></span><br><span class="line">        <span class="keyword">if</span> l, ok := src.(*LimitedReader); ok &amp;&amp; <span class="type">int64</span>(size) &gt; l.N &#123;</span><br><span class="line">            <span class="keyword">if</span> l.N &lt; <span class="number">1</span> &#123;</span><br><span class="line">                size = <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                size = <span class="type">int</span>(l.N)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buf = <span class="built_in">make</span>([]<span class="type">byte</span>, size)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环读取数据并写入</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        nr, er := src.Read(buf)</span><br><span class="line">        <span class="keyword">if</span> nr &gt; <span class="number">0</span> &#123;</span><br><span class="line">            nw, ew := dst.Write(buf[<span class="number">0</span>:nr])</span><br><span class="line">            <span class="keyword">if</span> nw &lt; <span class="number">0</span> || nr &lt; nw &#123;</span><br><span class="line">                nw = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> ew == <span class="literal">nil</span> &#123;</span><br><span class="line">                    ew = errInvalidWrite</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            written += <span class="type">int64</span>(nw)</span><br><span class="line">            <span class="keyword">if</span> ew != <span class="literal">nil</span> &#123;</span><br><span class="line">                err = ew</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> nr != nw &#123;</span><br><span class="line">                err = ErrShortWrite</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> er != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> er != EOF &#123;</span><br><span class="line">                err = er</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> written, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数执行步骤如下：</p><p>如果源实现了 WriteTo 方法，则直接调用 WriteTo 方法；</p><p>同样的，如果目标实现了 ReaderFrom 方法，则直接调用 ReaderFrom 方法；</p><p>如果 buf 为空，则创建 32KB 的 buf；</p><p>最后就是循环 Read 和 Write；</p><p>io.Copy 函数不会一次性读取全部数据，也不会频繁进行切片扩容，显然在数据量大时是更好的选择。</p><h4 id="最大区别："><a href="#最大区别：" class="headerlink" title="最大区别："></a>最大区别：</h4><p>逐块读取：io.Copy 是按需读取数据并写入目标流。每次读取一小块数据（通常是缓冲区大小），然后将它写入目标，处理完后立即丢弃这部分数据，不会将它们保持在内存中。</p><p>一次性读取：io.ReadAll 会从源读取数据并将整个内容一次性加载到内存中，然后返回一个 []byte 切片。这意味着它会一直读取直到数据流结束，所有数据都存储在一个大的内存区域中。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言的学习资料</title>
      <link href="/2025/01/15/go/Golang/"/>
      <url>/2025/01/15/go/Golang/</url>
      
        <content type="html"><![CDATA[<p>学习 Go 微服务开发的资料有很多，以下是一些推荐的资源，可以帮助你系统地掌握微服务相关的概念和实现方式：</p><h3 id="1-官方文档与教程"><a href="#1-官方文档与教程" class="headerlink" title="1. 官方文档与教程"></a>1. <strong>官方文档与教程</strong></h3><ul><li><p><strong>Go 官方文档</strong>：<a href="https://golang.org/doc/">Go Documentation</a><br>这是学习 Go 的基础，提供了完整的 Go 语言教程和标准库的文档。</p></li><li><p><strong>gRPC 官方文档</strong>：<a href="https://grpc.io/docs/languages/go/">gRPC Go</a><br>如果你计划在微服务中使用 gRPC 进行高效的远程过程调用，gRPC 的官方 Go 文档会非常有帮助。</p></li><li><p><strong>Go kit</strong>：<a href="https://gokit.io/">Go Kit Documentation</a><br>Go kit 是一个适合构建分布式系统的 Go 微服务框架，官方文档详细介绍了如何使用该框架构建健壮的微服务。</p></li><li><p><strong>Micro Framework</strong>：<a href="https://micro.mu/docs/">Micro Documentation</a><br>Micro 是一个现代化的微服务框架，支持服务发现、消息队列、RPC 通信等，适合快速构建微服务应用。</p></li></ul><h3 id="2-视频教程与在线课程"><a href="#2-视频教程与在线课程" class="headerlink" title="2. 视频教程与在线课程"></a>2. <strong>视频教程与在线课程</strong></h3><ul><li><strong>Pluralsight - Building Microservices with Go</strong><br><a href="https://www.pluralsight.com/courses/go-building-microservices">链接</a><br>这个课程介绍了如何使用 Go 构建可扩展和高效的微服务架构，包括通信机制、数据库、API 设计等。</li></ul><h3 id="3-书籍推荐"><a href="#3-书籍推荐" class="headerlink" title="3. 书籍推荐"></a>3. <strong>书籍推荐</strong></h3><ul><li><p><strong>《Go语言圣经》</strong>（The Go Programming Language）<br><a href="https://www.amazon.cn/dp/B085TK2XN9">链接</a><br>本书是学习 Go 语言的经典之作，虽然不专门讲解微服务，但它可以帮助你理解 Go 语言的基础和并发编程，为后续微服务开发打下坚实基础。</p></li><li><p><strong>《Go微服务开发》</strong>（Microservices with Go）<br><a href="https://www.amazon.cn/dp/B01N3NL6T2">链接</a><br>本书专注于 Go 在微服务中的应用，涵盖了服务发现、负载均衡、容器化等内容，非常适合想深入学习 Go 微服务架构的开发者。</p></li><li><p><strong>《Go Web编程》</strong>（Go Web Programming）<br><a href="https://www.amazon.cn/dp/B0849ZNB52">链接</a><br>这本书详细介绍了如何使用 Go 进行 Web 开发，包括构建 RESTful API 和与数据库交互等内容，是微服务开发的良好起点。</p></li></ul><h3 id="4-博客与社区"><a href="#4-博客与社区" class="headerlink" title="4. 博客与社区"></a>4. <strong>博客与社区</strong></h3><ul><li><p><strong>Go Micro Blog</strong>：<a href="https://www.micro.mu/blog/">Go Micro Blog</a><br>这个博客是 Micro 框架的官方网站，内容涵盖 Go 微服务框架的最佳实践、教程和案例，适合深入学习。</p></li><li><p><strong>Medium 上的 Go 微服务相关文章</strong><br><a href="https://medium.com/tag/microservices">Go Microservices</a><br>在 Medium 上有许多关于 Go 微服务的优秀文章，适合了解最新的开发趋势和实践。</p></li><li><p><strong>Go 语言中文社区</strong>：<a href="https://studygolang.com/">Go 语言中文网</a><br>这是一个专注于 Go 语言的中文社区，涵盖了大量关于 Go 语言及其应用的文章和讨论，其中也包括微服务相关的内容。</p></li></ul><h3 id="5-GitHub-项目与代码示例"><a href="#5-GitHub-项目与代码示例" class="headerlink" title="5. GitHub 项目与代码示例"></a>5. <strong>GitHub 项目与代码示例</strong></h3><ul><li><p><strong>Go 微服务项目示例</strong><br><a href="https://github.com/microservices-demo/microservices-demo">Go Microservices Example</a><br>这是一个完整的微服务示例项目，使用 Go 语言实现，涵盖了微服务中的常见功能，如服务注册、健康检查、API 网关等。</p></li><li><p><strong>Go Kit 示例项目</strong><br><a href="https://github.com/go-kit/kit">Go Kit Example</a><br>Go kit 官方 GitHub 仓库，包含多个示例，演示了如何使用 Go kit 框架构建微服务。</p></li><li><p><strong>gRPC Go 示例</strong><br><a href="https://github.com/grpc/grpc-go/tree/master/examples">gRPC Go Examples</a><br>这是 gRPC 官方的 Go 示例代码，适合需要使用 gRPC 进行微服务通信的开发者。</p></li></ul><p>通过这些资料，你可以从基础到进阶学习 Go 语言在微服务架构中的应用，不仅可以掌握微服务的基本概念和技术，还能了解如何使用 Go 构建健壮的微服务系统。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>青训营开始</title>
      <link href="/2025/01/14/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
      <url>/2025/01/14/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/%E9%9D%92%E8%AE%AD%E8%90%A5/</url>
      
        <content type="html"><![CDATA[<p>抖音商城：</p><p>简易抖音商城：</p><p>Postgres Go（Hertz Kitex Gorm GoRedis Eino）<br>（一）注册中心继承<br>注册中心集成（etcd Consull Nacos） 自动注册服务数据</p><p>（二）身份认证</p><ol><li>登录认证</li><li>权限认证（高级）</li></ol><p>(三) 可观测要求</p><ol><li>日志记录与监控</li></ol><p>(四) 可靠性要求</p><ol><li>容错机制</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go工作池</title>
      <link href="/2025/01/14/backend/%E5%B9%B6%E5%8F%91%E8%B5%84%E6%BA%90/"/>
      <url>/2025/01/14/backend/%E5%B9%B6%E5%8F%91%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>学习 Go 的工作池模式，你可以按照以下步骤系统掌握：</p><hr><h3 id="1-理解工作池模式的概念"><a href="#1-理解工作池模式的概念" class="headerlink" title="1. 理解工作池模式的概念"></a>1. <strong>理解工作池模式的概念</strong></h3><ul><li>工作池是一种常见的并发模式，通过限制并发任务的数量，提高资源利用率，避免系统过载。</li><li>核心思想：创建固定数量的工作者（Worker），从任务队列中取任务处理，直到任务完成。</li></ul><hr><h3 id="2-学习基础知识"><a href="#2-学习基础知识" class="headerlink" title="2. 学习基础知识"></a>2. <strong>学习基础知识</strong></h3><ul><li><strong>Goroutines</strong>：<br>学习如何使用 Go 的轻量级线程 <code>goroutines</code>。<ul><li><a href="https://go.dev/tour/concurrency/1">Go 官方文档 - Goroutines</a></li></ul></li><li><strong>Channels</strong>：<br>掌握 Go 的 <code>channels</code> 用于 goroutines 间通信。<ul><li><a href="https://go.dev/tour/concurrency/2">Go 官方文档 - Channels</a></li></ul></li><li><strong>WaitGroup</strong>：<br>了解如何使用 <code>sync.WaitGroup</code> 等待所有 goroutines 完成。<ul><li><a href="https://pkg.go.dev/sync#WaitGroup">WaitGroup 示例</a></li></ul></li></ul><hr><h3 id="3-实践简单工作池"><a href="#3-实践简单工作池" class="headerlink" title="3. 实践简单工作池"></a>3. <strong>实践简单工作池</strong></h3><p>先实现一个简单的工作池，熟悉基本流程。<br>   <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="type">int</span>, jobs &lt;-<span class="keyword">chan</span> <span class="type">int</span>, results <span class="keyword">chan</span>&lt;- <span class="type">int</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line">    <span class="keyword">for</span> job := <span class="keyword">range</span> jobs &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Worker %d processing job %d\n&quot;</span>, id, job)</span><br><span class="line">        time.Sleep(<span class="number">1</span> * time.Second) <span class="comment">// 模拟任务处理</span></span><br><span class="line">        results &lt;- job * <span class="number">2</span>          <span class="comment">// 返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> numJobs = <span class="number">5</span></span><br><span class="line">    <span class="keyword">const</span> numWorkers = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    jobs := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, numJobs)</span><br><span class="line">    results := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, numJobs)</span><br><span class="line">    <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= numWorkers; w++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> worker(w, jobs, results, &amp;wg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= numJobs; j++ &#123;</span><br><span class="line">        jobs &lt;- j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">close</span>(jobs)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">    <span class="built_in">close</span>(results)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> res := <span class="keyword">range</span> results &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Result:&quot;</span>, res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="4-深入理解工作池模式的应用"><a href="#4-深入理解工作池模式的应用" class="headerlink" title="4. 深入理解工作池模式的应用"></a>4. <strong>深入理解工作池模式的应用</strong></h3><ul><li>扩展任务类型：如 I&#x2F;O 密集型任务（网络请求）和 CPU 密集型任务。</li><li>实现动态调整任务队列大小。</li><li>学习如何优雅地退出工作池（使用 <code>context</code> 或带超时的 <code>channels</code>）。</li></ul><hr><h3 id="5-阅读优质资源"><a href="#5-阅读优质资源" class="headerlink" title="5. 阅读优质资源"></a>5. <strong>阅读优质资源</strong></h3><ul><li><a href="https://go.dev/blog/pipelines">Go Concurrency Patterns (官方博客)</a></li><li><a href="https://www.oreilly.com/library/view/go-programming-blueprints/9781783981324/">《Go Programming Blueprints》</a></li><li><a href="https://go.dev/doc/effective_go#concurrency">Effective Go - Concurrency</a></li></ul><hr><h3 id="6-挑战真实项目"><a href="#6-挑战真实项目" class="headerlink" title="6. 挑战真实项目"></a>6. <strong>挑战真实项目</strong></h3><p>实践是掌握模式的最佳方式，可以尝试：</p><ul><li>爬取多个网页内容并解析数据。</li><li>并发处理文件或图片。</li><li>实现一个 URL 检查器（如我们之前讨论的例子）。</li></ul><hr><p>通过从基础到实战的学习，你会对 Go 的工作池模式有深刻的理解。如果有问题，可以随时向我求助！</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go天生的并发优势</title>
      <link href="/2025/01/14/backend/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/01/14/backend/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>借鉴文章： </p><p><a href="https://www.topgoer.com/">https://www.topgoer.com/</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> hello() <span class="comment">// 启动另外一个goroutine去执行hello函数</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次的执行结果只打印了main goroutine done!，并没有打印Hello Goroutine!。为什么呢？</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>当main()函数返回的时候该goroutine就结束了，所有在main()函数中启动的goroutine会一同结束，main函数所在的goroutine就像是权利的游戏中的夜王，其他的goroutine都是异鬼，夜王一死它转化的那些异鬼也就全部GG了。</p><p>所以我们要想办法让main函数等一等hello函数，最简单粗暴的方式就是time.Sleep了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> hello() <span class="comment">// 启动另外一个goroutine去执行hello函数</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动多个goroutine"><a href="#启动多个goroutine" class="headerlink" title="启动多个goroutine"></a>启动多个goroutine</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done() <span class="comment">// goroutine结束就登记-1</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello Goroutine!&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        wg.Add(<span class="number">1</span>) <span class="comment">// 启动一个goroutine就登记+1</span></span><br><span class="line">        <span class="keyword">go</span> hello(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait() <span class="comment">// 等待所有登记的goroutine都结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 合起来写</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">&quot;new goroutine: i = %d\n&quot;</span>, i)</span><br><span class="line"><span class="comment">//time.Sleep(time.Second)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Printf(<span class="string">&quot;main goroutine: i = %d\n&quot;</span>, i)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在这段程序中 如果 注释 &#x2F;&#x2F;time.Sleep(time.Second)这个语句：</p><p>新 goroutine 中的无限循环运行非常快，因为 time.Sleep 被注释掉了。</p><p>新 goroutine 的打印操作占据了 CPU 的大部分时间，导致主 goroutine 很少或者几乎没有机会运行。</p><p>Go 的 goroutine 是由 Go 运行时管理的轻量级线程，<strong>采用抢占式调度。</strong></p><p>在你的代码中，新 goroutine 中的打印操作和循环执行非常快，没有阻塞点（比如 time.Sleep 或 I&#x2F;O 操作）。</p><p>没有阻塞点会让新 goroutine 占据大量的 CPU 时间，主 goroutine 反而无法得到足够的调度时间。</p><p>主 goroutine 需要与新 goroutine 竞争 CPU 时间。<br>因为新 goroutine 的循环过于频繁（没有阻塞），主 goroutine 可能无法及时获得 CPU 调度机会。</p><h3 id="Go中的调度函数使用"><a href="#Go中的调度函数使用" class="headerlink" title="Go中的调度函数使用"></a>Go中的调度函数使用</h3><p>runtime.Gosched 的作用：<br>暂停当前 goroutine 的执行。<br>将 CPU 的使用机会交还给调度器。<br>调度器会决定下一个应该执行的 goroutine。</p><p>GPM是Go语言运行时（runtime）层面的实现，</p><p>在你提供的程序中，主 goroutine 是 main 函数中的代码执行流。具体来说，程序一开始会执行 main() 函数内的内容。<br>然后，主 goroutine 会启动一个新的后台 goroutine，<br>通过 go 关键字启动的匿名函数来执行，这个新 goroutine 会执行打印 “world” 的任务。</p><h4 id="GPM"><a href="#GPM" class="headerlink" title="GPM"></a>GPM</h4><ol><li><p>G (Goroutine)：<br>表示一个具体的 goroutine，包含要执行的任务信息，比如函数栈、指令等。<br>G 是任务的最小单位。</p></li><li><p>P (Processor)：<br>是一个逻辑处理器，用于管理 goroutine 的运行队列。<br>P 和 CPU 核心的数量绑定（通过 GOMAXPROCS 控制），每个 P 会调度多个 G。</p></li><li><p>M (Machine)：<br>表示一个操作系统线程。<br>M 从 P 的队列中获取 G 并执行它。<br>每个 M 会从 P 上获取一个或多个 G 来执行。</p></li></ol><p>在 Go 的 GPM 调度模型中，P 和 M 之间的关系是 一对多，<br>即每个 P（处理器）可以关联多个 M（操作系统线程），但同一时刻每个 P 只有一个 M 处于 活跃 状态，<br>来执行调度的任务（即执行 G，即 goroutine）。</p><h3 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h3><p>OS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个goroutine的栈在其生命周期开始时只有很小的栈（典型情况下2KB），<br>goroutine的栈不是固定的，他可以按需增大和缩小，goroutine的栈大小限制可以达到1GB，虽然极少会用到这个大。<br>所以在Go语言中一次创建十万左右的goroutine也是可以的。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步执行的核心思想是让某些任务在后台运行，不阻塞主流程。</p><p>go a(ch) 启动 a 函数的执行，但不会阻塞主 goroutine，主 goroutine 可以继续执行后续代码。<br>a(ch) 在后台运行，它执行完后通过 channel 通知主 goroutine。<br>主 goroutine 等待 signal，通过 &lt;-ch 实现同步等待，确保 a 完成后才继续后续操作。<br>因此，go a(ch) 启动的部分是异步的，意味着 a 会在后台执行，而主 goroutine 不会因调用 a 而阻塞或等待它完成。</p><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><p>单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。</p><p>虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。<br>为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。</p><p>Go语言的并发模型是CSP（Communicating Sequential Processes），提倡通过<strong>通信共享内存</strong>而不是通过共享内存而实现通信。</p><p>channel就是它们之间的连接。channel是可以让一个goroutine发送特定值到另一个goroutine的通信机制。</p><p>Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，<br>保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型</p><p>关闭后的通道有以下特点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.对一个关闭的通道再发送值就会导致panic。</span><br><span class="line"> 2.对一个关闭的通道进行接收会一直获取值直到通道为空。</span><br><span class="line"> 3.对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。</span><br><span class="line"> 4.关闭一个已经关闭的通道会导致panic。</span><br></pre></td></tr></table></figure><h3 id="无缓冲的通道-同步通道"><a href="#无缓冲的通道-同步通道" class="headerlink" title="无缓冲的通道(同步通道)"></a>无缓冲的通道(同步通道)</h3><p>无缓冲的通道又称为阻塞的通道</p><p>启用一个goroutine去接收值</p><p>无缓冲通道上的发送操作会阻塞，直到另一个goroutine在该通道上执行接收操作，这时值才能发送成功，两个goroutine将继续执行。相反，如果接收操作先执行，接收方的goroutine将阻塞，直到另一个goroutine在该通道上发送一个值。</p><p>可以通过内置的close()函数关闭channel（如果你的管道不往里存值或者取值的时候一定记得关闭管道）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">            c &lt;- i</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(c)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> data, ok := &lt;-c; ok &#123;</span><br><span class="line">            fmt.Println(data)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>go中的context</title>
      <link href="/2025/01/02/go/%E8%B0%83%E7%94%A8/"/>
      <url>/2025/01/02/go/%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>首先理解同步调用与异步调用：</p><p><strong>同步调用</strong>和<strong>异步调用</strong>是两种常见的函数调用方式，尤其在多线程、并发编程中，这两种方式对程序的执行流程和效率有着直接影响。</p><h3 id="1-同步调用（Synchronous-Call）"><a href="#1-同步调用（Synchronous-Call）" class="headerlink" title="1. 同步调用（Synchronous Call）"></a>1. <strong>同步调用（Synchronous Call）</strong></h3><p>同步调用是指函数调用时，调用者会等待被调用的函数执行完毕并返回结果之后，才能继续执行后续操作。在同步调用过程中，函数的调用者会<strong>阻塞</strong>，直到函数执行完成。</p><p><strong>特点</strong>：</p><ul><li><strong>阻塞</strong>：调用者会等待被调用的函数执行完成，才会继续执行后续代码。</li><li><strong>执行顺序</strong>：代码按顺序执行，当前任务完成后，才能继续下一个任务。</li></ul><p><strong>举个例子</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一个同步调用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Long task finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Start task&quot;</span>)</span><br><span class="line">    longTask()  <span class="comment">// 同步调用，调用者会等待该函数执行完</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;End task&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Start task</span><br><span class="line">Long task finished</span><br><span class="line">End task</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>longTask()</code> 函数执行时，程序会等待它执行完毕，然后才继续执行后面的 <code>fmt.Println(&quot;End task&quot;)</code>。</p><h3 id="2-异步调用（Asynchronous-Call）"><a href="#2-异步调用（Asynchronous-Call）" class="headerlink" title="2. 异步调用（Asynchronous Call）"></a>2. <strong>异步调用（Asynchronous Call）</strong></h3><p>异步调用是指调用者在调用函数时，不会等待函数执行完成，而是直接继续执行后续代码。异步调用通常会通过某种机制（比如回调函数、线程、goroutine等）来处理函数执行完成后的结果。</p><p><strong>特点</strong>：</p><ul><li><strong>非阻塞</strong>：调用者不会等待被调用的函数执行完成，而是继续执行后续操作。</li><li><strong>执行顺序</strong>：调用者继续执行，而被调用的函数可能在后台执行，执行顺序不确定。</li></ul><p><strong>举个例子（使用 Go 的 goroutine）</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一个异步调用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longTask</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">    fmt.Println(<span class="string">&quot;Long task finished&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Start task&quot;</span>)</span><br><span class="line">    <span class="keyword">go</span> longTask()  <span class="comment">// 异步调用，goroutine 不会阻塞主线程</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;End task&quot;</span>)</span><br><span class="line">    time.Sleep(<span class="number">3</span> * time.Second)  <span class="comment">// 等待 goroutine 执行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Start task</span><br><span class="line">End task</span><br><span class="line">Long task finished</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>longTask()</code> 被异步调用（通过 <code>go</code> 关键字），主线程并不会等待 <code>longTask()</code> 执行完毕，而是继续执行 <code>fmt.Println(&quot;End task&quot;)</code>。由于 <code>longTask()</code> 是在一个新的 goroutine 中执行的，所以它会在主线程打印完 <code>&quot;End task&quot;</code> 后才完成。</p><h3 id="同步调用与异步调用的区别："><a href="#同步调用与异步调用的区别：" class="headerlink" title="同步调用与异步调用的区别："></a><strong>同步调用与异步调用的区别</strong>：</h3><table><thead><tr><th><strong>特性</strong></th><th><strong>同步调用</strong></th><th><strong>异步调用</strong></th></tr></thead><tbody><tr><td><strong>执行方式</strong></td><td>当前任务需要等待被调用函数执行完毕后才能继续</td><td>当前任务不会等待，被调用函数在后台执行</td></tr><tr><td><strong>阻塞与非阻塞</strong></td><td>阻塞：调用者会等待被调用函数完成</td><td>非阻塞：调用者不会等待被调用函数完成，继续执行</td></tr><tr><td><strong>执行顺序</strong></td><td>按顺序执行，当前任务完成后，继续下一个任务</td><td>执行顺序不确定，被调用函数可能稍后执行</td></tr><tr><td><strong>适用场景</strong></td><td>适用于需要等待函数执行完成后才能继续的情况</td><td>适用于可以并行处理，调用者不需要等待结果的情况</td></tr><tr><td><strong>效率</strong></td><td>效率较低，尤其在调用高延时操作时，调用者会被阻塞</td><td>效率较高，可以并行执行多个任务，不阻塞调用者</td></tr></tbody></table><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a><strong>优缺点</strong>：</h3><ul><li><p><strong>同步调用</strong>：</p><ul><li><strong>优点</strong>：简单，易于理解和调试，程序的执行顺序清晰。</li><li><strong>缺点</strong>：当操作耗时较长时，调用者需要等待，造成性能瓶颈。例如，I&#x2F;O 密集型操作（如数据库查询、网络请求等）可能导致程序停滞。</li></ul></li><li><p><strong>异步调用</strong>：</p><ul><li><strong>优点</strong>：提高并发性能，特别适合处理 I&#x2F;O 密集型操作。调用者不需要等待操作完成，可以同时执行多个任务。</li><li><strong>缺点</strong>：需要更多的设计和管理，比如回调函数、并发控制等；调试和错误处理可能比较复杂。</li></ul></li></ul><h3 id="何时选择同步和异步？"><a href="#何时选择同步和异步？" class="headerlink" title="何时选择同步和异步？"></a><strong>何时选择同步和异步？</strong></h3><ul><li><strong>同步调用</strong>：适用于需要按顺序执行任务且任务之间有依赖关系的场景。例如，计算任务需要按顺序完成，或者需要等待数据库查询结果再执行下一步操作。</li><li><strong>异步调用</strong>：适用于任务之间没有直接依赖关系，可以并行执行的场景。例如，网络请求、文件处理、并发计算等。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h3><ul><li><strong>同步调用</strong>是阻塞的，调用者需要等待被调用函数执行完成后才能继续执行后续代码。</li><li><strong>异步调用</strong>是非阻塞的，调用者不会等待被调用函数执行完成，而是继续执行后续操作，通常通过回调或并发机制处理结果。</li></ul><h2 id="并发相关能力："><a href="#并发相关能力：" class="headerlink" title="并发相关能力："></a>并发相关能力：</h2><p>创建了一个异步的协程或者线程，如果你不知道它什么时候终止，最好不要创建它！ 做到心中有数，理解并发！什么时候该用</p><p>线程： 是cpu需要执行的任务</p><p>并发执行，看似在一起做实行，如果是一个cpu核心那么：实则是一个人在两个任务之间快速的切换！（本质还是一个人做两件事，只不过两件事都分别分配一点时间）</p><p>两个核心执行两个线程 就相当于并行执行两个任务，时间将会被大大缩短</p><p>但是实际情况还是会非常复杂：</p><p>锁机制：</p><p>即使有两个cpu可以工作，但是他们需要持有锁的那个才可以工作！这也就导致了实际的工作还是并发执行！</p><p>高性能程序尽量避免使用锁</p><p>context之间形成多叉树的结构！</p><p>父ctx派生 多个子ctx</p><p>感知生命周期  </p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软技能</title>
      <link href="/2025/01/02/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
      <url>/2025/01/02/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E8%BD%AF%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>书中的前言： 引用的几句名言！</p><p>“现在的困难可能会成为未来的趋势”</p><p>“站在对方的角度，在说服对方的时候，为他准备好解决问题的方案”</p><p>“不浪费任何一次危机，任何危机都是组织结构重新组合的重大契机”</p><p>“作为听者，你能理解表达能力较弱的一方的言说，作为言说者，你能让理解力较弱的一方明白你的意思”</p><hr><p>组合型思维： 我这里强，需要你那里强，互相配合，达到双赢，</p><p>多想：</p><p>你能为别人做什么，你能为圈子带来什么。为什么小的时候看什么都新奇，到那时长大后变得更加麻木了呢？对周围事物，没有了其他想法<br>是不是思维被固定住了呢？ 保持孩童般的惊奇！</p><p>主动创造不平凡：</p><p>有些人就是不甘于平凡！才会造就出一些令世人震惊的事物。</p><p>做事情的两种方法：</p><ol><li>做减法：<br>拿出一段时间，排除各种琐事的干扰，降低认知负荷，集中能量，完全自主就干这一件事</li><li>做加法<br>主动给事情增加难度，你觉得没意思，可以去悬崖边看书哈哈哈，真的可以，但是要注意安全呢</li></ol><p>但是，世界上有很多事情根本不需要去做，还有些事情是不能去做的！，被别人认可的事情就是一定是好的吗？可能你在你只是在一些无意义的事做了循环<br>无用功</p><p>所以，如何判断哪些事需要做，哪些是不能做！这也是一个人的能力</p><p>有效的反馈系统： 一件事该不该做，通常是需要总结之前做事的结果，做一件事后产生的预期结果之后<br>分析做成的原因， 运气？or 实力？自己心里要清楚<br>没有达到预期的事情，花时间想问题出在了哪里？调整自己的行为</p><p>培养同理心：培养理解他人的能力，站在对方的角度思考问题，</p><p>”辛辛苦苦发明一样东西，却发现世界并不需要他“：  创新和实际需求之间的鸿沟</p><p>保持敬畏心：</p><p>（愿意去学习、去探索，而不是自以为是或过于自信。承认自然界的复杂性和不确定性，推动自己不断探索。）愿意通过反思和努力去改进</p><p>技能是无限的，我们的时间和精力是有限的，造成结果就是，我们对一切事物只能做到一知半解，很多技能也掌握的二把刀水平，对于自己力所不能及的事情，不要去做<br>力所能及的事情，做起来也要留三分（可以在完成的基础上保持精力和资源的余地，为未来的工作或挑战做好准备。）</p><p>剥离情感（但不等同于没有同理心）：</p><p>很多事，自己的情感卷进去就不好了，同理心要求我们摒弃以自我为中心的想法，剥离情感是让我们不要被情感牵着鼻子走，保持客观公正的判断力！</p><p>改变模式而不是放弃机遇：</p>]]></content>
      
      
      <categories>
          
          <category> 书后心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你的灯还亮着吗</title>
      <link href="/2024/12/28/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E7%9C%8B%E4%BA%86%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
      <url>/2024/12/28/%E4%B9%A6%E5%90%8E%E5%BF%83%E5%BE%97/%E7%9C%8B%E4%BA%86%E4%B8%80%E6%9C%AC%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>今天一下午的时间看了这本书，对我的感触很大，很有助于思考，对于一个问题的思考，一种问题不同的问法，产生不同的问题</p><p>文字游戏：一句话不同的停顿产生不同的问题</p><p>有些事情是不是简单的问题复杂化（这应该是普遍现象） 复杂的问题简单化（很少）</p><p>你是不是真的想要解决这问题？</p><p>追溯本源，从一个婴儿视角重新审视这个问题！</p><p>一生二，二生三，三生万物： 你对一个问题的解决（是否是真的解决？）一个问题的解决必然产生另一个问题的产生！</p><p>看看你是否能从一个问题的解决，来想到它产生了3个其他的问题？</p>]]></content>
      
      
      <categories>
          
          <category> 书后心得 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一位老哥的分享给了我一些启发</title>
      <link href="/2024/12/18/%E7%94%9F%E6%B4%BB/live3/"/>
      <url>/2024/12/18/%E7%94%9F%E6%B4%BB/live3/</url>
      
        <content type="html"><![CDATA[<p>学习方法：老哥的思维方式也给了我一些启发</p><p>以下是老哥的分享：</p><p>当知识点量大起来时, 我觉得”写作”的意义应该在于辅助思考</p><p>因为短时间内可能我们能记得很好, 但是对于长时间的庞大知识体系的学习, 就容易忘记一些分支内容 </p><p>所以第一步我做的是把长长的博客尽量拆解为小的讨论主题</p><p>作为”词条”存在</p><p>比如我写了个k8s主题的词条 写道”容器”这个词会自动链接到我之前写过的容器相关的内容  里面的内容是否符合当下我需要的定义  如果是, 那么可以知识复用  如果不是, 那么我需不需要创建新的词条来讨论这个主题<br>然后关联知识形成网络</p><p>比如一个使用mysql + reids搭建的系统, 即用到了mysql, 又用到了redis, 同时它本身还是个系统设计就会难以归类 </p><p>但是 一个文章可以同时带有mysql, redis, 系统设计三种tag  让知识形成网络！</p><p>先把书的标题提取出来 建立一个词条  然后去网上查, 这个东西包含哪些东西 然后去网上查, 这个东西包含哪些东西 等熟悉了基于零散信息的网络后  再去快速浏览权威书籍 迭代网络  </p><hr><p>听了老哥的分享！ 我觉得自己再生活中真的缺乏太多的思考了！什么事知道他困难，不想办法，应该去思考一些东西才能让东西变得更活！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习数据库</title>
      <link href="/2024/12/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/Database/"/>
      <url>/2024/12/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/Database/</url>
      
        <content type="html"><![CDATA[<hr><p>参考书籍： 数据库设计</p><hr><p>我先从事务入手：</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>概念</strong> ： 与单个用户或者程序执行，完成读取或者更新数据库内容的一个或一串操作</p><p>应用程序的一次执行就是一个事务或者多个事务</p><p>示例：</p><p>简单事务： 更新x员工的工资（涉及：数据库的读和写，和非数据库操作）</p><p>复杂事务：删除x的员工记录，并把x员工的事务交付给其他人去做。 （过程中若并非所有的操作都被执行，那么数据库的引用完整性将遭到破坏）（数据库也处于不一致状态）</p><p>尽管一致性暂时遭到破坏，但是数据库总是可以从一种一致状态转换到另一种一致的状态</p><h3 id="数据库最终的结果"><a href="#数据库最终的结果" class="headerlink" title="数据库最终的结果"></a>数据库最终的结果</h3><ol><li>COMMIT：执行成功，事务最终被提交 （数据库也达到了一种新的状态）</li><li>ABORTED：事务没有执行成功 （事务被撤销）则数据库必须要还原事务开始之前的一致状态</li><li>已经提交的事务不能被撤销，只能通过（补偿事务）进行覆盖 消除事务产生的影响</li><li>DBMS将在程序正确结束后自动执行COMMIT操作，若不能成功执行则 ROBACK</li><li>PARTIALLY COMITTED：若在最后一条语句被执行时产生了 破坏了可串行化或违反了完整约束 因此事务必须被撤销 或者系统出现故障，事务更新的事务没有被安全的写到二级存储设备上（部分提交） 以上两种情况最终都会进入</li><li>FAILED（失败状态） 事务无法被提交，或者事务处于ACTIVE状态就被撤销 则 处于FAILED状态</li></ol><h3 id="事务性质"><a href="#事务性质" class="headerlink" title="事务性质"></a>事务性质</h3><p>ACID</p><ol><li>原子性：</li><li>一致性：</li><li>隔离性：</li><li>持久性：</li></ol><p>事务的隔离级别<br>事务隔离级别控制了事务之间的可见性和并发行为。常见的隔离级别包括：</p><ul><li>读未提交（Read Uncommitted）：在这个隔离级别下，一个事务可以读取其他事务尚未提交的数据。这可能导致脏读（读取了未提交的数据）、不可重复读（同一查询在事务执行期间返回不同结果）和幻读（事务在同一查询中看到不同的数据行）等问题。读未提交的隔离级别最不严格，可能会引发数据不一致问题</li><li>读已提交（Read Committed）：在这个隔离级别下，一个事务只能读取已经提交的数据，避免了脏读问题。但是，不可重复读和幻读问题仍然可能出现。因为其他事务可能在事务进行期间提交新的数据，导致不同时间点的查询结果不一致。</li><li>可重复读（Repeatable Read）：可重复读隔离级别确保在同一事务内，同一个查询的结果保持一致。这意味着一个事务中的查询不会受到其他事务的修改影响。这可以防止脏读和不可重复读问题，但幻读问题仍然可能出现，因为其他事务可能插入新数据，导致新数据行的出现。</li><li>串行化（Serializable）：串行化是最严格的隔离级别，它确保每个事务都在独立的时间段内执行，防止了并发问题。事务按照顺序一个接一个地执行，这可以解决脏读、不可重复读和幻读问题。然而，串行化可能会对性能产生较大的影响，因为事务需要依次执行。</li></ul><p>事务的隔离级别可以解决脏读、幻读、不可重复读的问题。</p><ol><li>脏读： 脏读指的是在一个事务中读取了另一个事务未提交的数据。假设事务 A 修改了某一行数据，但还没有提交。同时，事务 B 尝试读取了事务 A 修改的数据。如果事务 A 最终回滚了，那么事务 B 读取的数据就是不存在的，这就是脏读。脏读会导致不准确的数据展示，因为<strong>读取的数据可能是临时的未经验证的。</strong>、</li><li>不可重复读：不可重复读是指在同一个事务内，多次读取同一数据时，得到不同的结果。这可能是因为在事务执行期间，其他事务修改了数据。例如，事务 A 在读取某一行数据后，事务 B 修改了这行数据，并提交了。现在事务 A 再次读取相同的数据，注重数据：<strong>发现数据已经不同了</strong>，造成了不一致的现象。</li><li>幻读： 幻读是指在同一个事务内，多次查询同一范围的数据时，得到不同的结果。这与不可重复读类似，但幻读关注的是数据的数量变化。例如，事务 A 在查询某个范围内的所有数据时，事务 B 插入了新数据，并提交了。现在事务 A 再次查询同一范围的数据，注重：<strong>发现数据行的数量增加了</strong>，这就是幻读。</li></ol><hr><p>22.2 并发控制 </p><p>讲解了数据库中的一些问题 幻读等</p><p>[点击这里查看PDF文件] (<a href="https://github.com/Whuichenggong/Knowledge-network/blob/main/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%BB%9C.pdf">https://github.com/Whuichenggong/Knowledge-network/blob/main/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%BB%9C.pdf</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于我学习的一些资源和方法</title>
      <link href="/2024/12/15/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/resource/"/>
      <url>/2024/12/15/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/resource/</url>
      
        <content type="html"><![CDATA[<p>兄弟，我理解你的心态，觉得实践的收获更直观，看书反而有点慢。但实际上，看书和实践结合，效果会倍增。下面我不仅推荐优质资源，还会分享高效阅读的方法，帮你更好地平衡学习时间。</p><hr><h3 id="学习资料推荐"><a href="#学习资料推荐" class="headerlink" title="学习资料推荐"></a><strong>学习资料推荐</strong></h3><h4 id="1-数据库相关"><a href="#1-数据库相关" class="headerlink" title="1. 数据库相关"></a><strong>1. 数据库相关</strong></h4><ul><li><strong>书籍</strong>：《高性能 MySQL》<ul><li>重点阅读：索引优化、事务机制、查询优化。</li><li><strong>免费在线教程</strong>：<ul><li><a href="https://www.w3schools.com/sql/">SQL 教程（w3schools）</a></li><li><a href="https://dev.mysql.com/doc/">MySQL 官方文档</a></li></ul></li></ul></li></ul><h4 id="2-计算机网络"><a href="#2-计算机网络" class="headerlink" title="2. 计算机网络"></a><strong>2. 计算机网络</strong></h4><ul><li><strong>书籍</strong>：《计算机网络：自顶向下方法》或《图解HTTP》<ul><li>重点章节：HTTP、TCP&#x2F;IP、DNS、HTTPS。</li><li><strong>免费资源</strong>：<ul><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1030595307488672">HTTP 协议详解</a></li><li><a href="https://www.wireshark.org/">Wireshark 网络分析教程</a></li></ul></li></ul></li></ul><h4 id="3-操作系统"><a href="#3-操作系统" class="headerlink" title="3. 操作系统"></a><strong>3. 操作系统</strong></h4><ul><li><strong>书籍</strong>：《现代操作系统》<ul><li>重点章节：进程、线程、同步、内存管理。</li><li><strong>免费资源</strong>：<ul><li><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">Operating Systems: Three Easy Pieces</a></li><li><a href="https://www.linuxfoundation.org/">Linux 操作系统入门</a></li></ul></li></ul></li></ul><h4 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4. 系统设计"></a><strong>4. 系统设计</strong></h4><ul><li><strong>书籍</strong>：《系统设计入门》（Grokking the System Design Interview）<ul><li>重点学习：缓存、负载均衡、限流。</li><li><strong>博客</strong>：<ul><li><a href="https://www.educative.io/courses/grokking-the-system-design-interview">系统设计基础</a></li></ul></li></ul></li></ul><h4 id="5-Redis"><a href="#5-Redis" class="headerlink" title="5. Redis"></a><strong>5. Redis</strong></h4><ul><li><strong>书籍</strong>：《Redis 实战》<ul><li>重点章节：缓存机制、分布式锁。</li><li><strong>免费资源</strong>：<ul><li><a href="https://redis.io/docs/">Redis 官方文档</a></li></ul></li></ul></li></ul><h4 id="6-算法与数据结构"><a href="#6-算法与数据结构" class="headerlink" title="6. 算法与数据结构"></a><strong>6. 算法与数据结构</strong></h4><ul><li><strong>书籍</strong>：《算法（第4版）》或《编程珠玑》<ul><li>重点章节：常用数据结构（栈、队列、二叉树）、动态规划。</li><li><strong>网站</strong>：<ul><li><a href="https://leetcode.com/">LeetCode 官方</a></li><li><a href="https://visualgo.net/">VisuAlgo（算法可视化）</a></li></ul></li></ul></li></ul><hr><h3 id="高效看书方法"><a href="#高效看书方法" class="headerlink" title="高效看书方法"></a><strong>高效看书方法</strong></h3><h4 id="1-目的导向阅读"><a href="#1-目的导向阅读" class="headerlink" title="1. 目的导向阅读"></a><strong>1. 目的导向阅读</strong></h4><ul><li><strong>明确目标</strong>：每次看书前，明确你要解决的问题。比如：<ul><li>“我需要理解事务是怎么实现的” → 阅读事务相关章节，跳过其他部分。</li><li>“我需要掌握 TCP 的连接过程” → 只看 TCP 的工作原理。</li></ul></li></ul><h4 id="2-略读和精读结合"><a href="#2-略读和精读结合" class="headerlink" title="2. 略读和精读结合"></a><strong>2. 略读和精读结合</strong></h4><ul><li><strong>略读</strong>：先快速翻阅目录和每章的开头，总结书的主要内容。</li><li><strong>精读</strong>：挑选与项目或刷题直接相关的部分深入看，配合做笔记和练习。</li></ul><h4 id="3-配合实践"><a href="#3-配合实践" class="headerlink" title="3. 配合实践"></a><strong>3. 配合实践</strong></h4><ul><li><strong>边学边做</strong>：看完书中某个知识点，立即在项目或代码中实现。<ul><li>例子：学完 Redis 的分布式锁，马上在银行项目中添加。</li></ul></li><li><strong>用书作为工具</strong>：书可以成为你的“随手参考”，遇到不懂的概念再翻阅相关章节，而不必一次性啃完。</li></ul><h4 id="4-输出内容"><a href="#4-输出内容" class="headerlink" title="4. 输出内容"></a><strong>4. 输出内容</strong></h4><ul><li><strong>写笔记</strong>：总结书中学到的知识，用自己的语言重新描述。</li><li><strong>录制分享</strong>：试着用 3 分钟向别人讲解你刚学的内容，加深记忆。</li></ul><h4 id="5-番茄工作法"><a href="#5-番茄工作法" class="headerlink" title="5. 番茄工作法"></a><strong>5. 番茄工作法</strong></h4><ul><li>每次阅读 25 分钟后，花 5 分钟总结这段时间的收获，然后休息片刻。效率会提升很多。</li></ul><hr><h3 id="实践与看书的时间分配"><a href="#实践与看书的时间分配" class="headerlink" title="实践与看书的时间分配"></a><strong>实践与看书的时间分配</strong></h3><ol><li><strong>每天早上&#x2F;晚上固定 1 小时阅读</strong>。<ul><li>比如：早上看《高性能 MySQL》，晚上看《计算机网络》。</li></ul></li><li><strong>实践时遇到问题，马上查书解决</strong>。<ul><li>例子：如果 Redis 配置缓存遇到问题，就查《Redis 实战》。</li></ul></li><li><strong>每周末专门安排 2 小时总结书中知识点，结合项目整理成笔记</strong>。</li></ol><hr><p>这样安排既能保持实践的节奏，又能让你从书中挖掘深层的原理。如果还有具体内容不理解，可以随时问我，我也可以帮你分解章节内容！</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊最近</title>
      <link href="/2024/12/12/%E7%94%9F%E6%B4%BB/current/"/>
      <url>/2024/12/12/%E7%94%9F%E6%B4%BB/current/</url>
      
        <content type="html"><![CDATA[<p>最近的日子在想着达到就业的水平，不断地提升额，嗯然后今天手机掉水里了，烘干24小时，看看能不能复活吧，突然觉得之前手机不是那么重要，回想起它占用<br>我的时间，好像都不是什么重要的事情，近期来，感觉是为了让自己舒服一点，白天学完，晚上回去就刷手机而且就是 12点 1点，恶性循环，本想着晚上回去看会<br>书，自己却暗示自己，学一天了，玩吧哈哈哈。好像都没做，但是确实没有那么重要，吃饭可以让同学帮我付，哈哈，还是得学习呢，反省一下，是不是你想要的太多了<br>而导致你很累，那种精神上的压迫自己，反思~</p><p>今天12.12日试着实现将单片机的数据传输到数据库中交互<br>先简单的使用按钮的高低电平0 1 实现交互试试看</p><p>后端服务代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ButtonPress <span class="keyword">struct</span> &#123;</span><br><span class="line">DeviceID  <span class="type">string</span> <span class="string">`json:&quot;device_id&quot;`</span></span><br><span class="line">Button    <span class="type">int</span>    <span class="string">`json:&quot;button&quot;`</span></span><br><span class="line">Timestamp <span class="type">string</span> <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dbHost     = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">dbPort     = <span class="number">5432</span></span><br><span class="line">dbUser     = <span class="string">&quot;root&quot;</span></span><br><span class="line">dbPassword = <span class="string">&quot;secret&quot;</span></span><br><span class="line">dbName     = <span class="string">&quot;data&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Set up the database connection</span></span><br><span class="line">connStr := fmt.Sprintf(<span class="string">&quot;postgresql://%s:%s@%s:%d/%s&quot;</span>, dbUser, dbPassword, dbHost, dbPort, dbName)</span><br><span class="line">conn, err := pgx.Connect(context.Background(), connStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to connect to the database: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(context.Background())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up the HTTP server</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/receive&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Only POST requests are supported&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data ButtonPress</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;data); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid JSON format&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Received data: %+v&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data.Button == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// Store the data in the database</span></span><br><span class="line">query := <span class="string">&quot;INSERT INTO button_presses (device_id, button, timestamp) VALUES ($1, $2, $3)&quot;</span></span><br><span class="line">_, err := conn.Exec(context.Background(), query, data.DeviceID, data.Button, data.Timestamp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Failed to store data in the database&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Data successfully stored in the database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;Data received and processed&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;Starting server on 192.168.111.1:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;192.168.111.1:8080&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Server failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是简单的实现</p><p>单片机端代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266HTTPClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;Your_SSID&quot;</span>;          <span class="comment">// Wi-Fi 名称</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;Your_PASSWORD&quot;</span>;  <span class="comment">// Wi-Fi 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* serverUrl = <span class="string">&quot;http://8.222.186.212:8080/send&quot;</span>;  <span class="comment">// 后端服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>); <span class="comment">// 初始化串口</span></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接到 Wi-Fi</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to Wi-Fi&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;\nConnected to Wi-Fi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (WiFi.status() == WL_CONNECTED) &#123;</span><br><span class="line">    HTTPClient http;</span><br><span class="line">    http.begin(serverUrl);   <span class="comment">// 设置服务器 URL</span></span><br><span class="line">    http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>); <span class="comment">// 设置请求头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例 JSON 数据</span></span><br><span class="line">    String jsonData = <span class="string">&quot;&#123;\&quot;sensor\&quot;: \&quot;temperature\&quot;, \&quot;value\&quot;: 25.5&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST 请求</span></span><br><span class="line">    <span class="type">int</span> httpResponseCode = http.POST(jsonData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查响应状态</span></span><br><span class="line">    <span class="keyword">if</span> (httpResponseCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      String response = http.getString();</span><br><span class="line">      Serial.println(<span class="string">&quot;Response: &quot;</span> + response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;Error on sending POST: &quot;</span> + String(httpResponseCode));</span><br><span class="line">    &#125;</span><br><span class="line">    http.end(); <span class="comment">// 关闭连接</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Wi-Fi not connected&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">5000</span>); <span class="comment">// 每 5 秒发送一次数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HTTP就是那么的神奇</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统学习</title>
      <link href="/2024/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/Distributed/"/>
      <url>/2024/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/Distributed/</url>
      
        <content type="html"><![CDATA[<p><code>go build -buildmode=plugin ../mrapps/wc.go</code><br>这个指令是什么意思 :</p><p>这个命令的作用是编译 ..&#x2F;mrapps&#x2F;wc.go 文件，并将其生成一个 Go 插件文件。生成的插件文件通常是一个 .so（共享库文件）文件，它可以在运行时被其他 Go 程序通过 plugin 包加载和调用。</p><p>例如：</p><p>你可以在主程序中使用 plugin 包动态加载 wc.so 插件，并调用插件中的函数。</p><p><code>go run mrsequential.go wc.so pg*.txt：</code></p><p>go run：用于编译并运行 Go 程序。它会在内存中临时编译指定的 Go 文件，并立即执行。</p><p>mrsequential.go：这是要执行的 Go 源文件，Go 编译器会先编译这个文件并运行它。这个文件应该包含 main 函数，通常是程序的入口点。</p><p>wc.so：这是一个 Go 插件文件（共享库）。它通常是通过 go build -buildmode&#x3D;plugin 命令生成的。该文件包含 Go 代码，可能定义了一个插件接口，在运行时可以被主程序（mrsequential.go）动态加载和调用。wc.so 可能提供某些功能，mrsequential.go 将加载并使用这些功能。</p><p>pg*.txt：这是一个通配符表达式，表示所有以 pg 开头，后面跟任意字符，且以 .txt 结尾的文件。例如，pg1.txt, pg42.txt, pgfile.txt 都会被匹配并作为参数传递给程序。</p><p><code>more mr-out-0</code> 将会输出很多文本 这是因为：</p><p>mrsequential.go 将其输出保留在文件 mr-out-0 中。输入来自名为 pg-xxx.txt 的文本文件</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么别人写项目知道用什么？</title>
      <link href="/2024/12/07/%E6%88%91%E7%9A%84%E5%9B%B0%E6%83%91/confusion/"/>
      <url>/2024/12/07/%E6%88%91%E7%9A%84%E5%9B%B0%E6%83%91/confusion/</url>
      
        <content type="html"><![CDATA[<p>同样来自GPT的回答：</p><p>你的疑惑非常好！许多人在学习编程时都会有类似的感受，尤其是在学习阶段，看到博主轻松选择某些包或者工具来解决问题时，会觉得他们似乎“无所不知”。事实上，这背后是<strong>经验</strong>和<strong>积累</strong>的结果。以下几点可以帮助你理解和逐步建立这种能力：</p><hr><h3 id="1-经验的积累"><a href="#1-经验的积累" class="headerlink" title="1. 经验的积累"></a><strong>1. 经验的积累</strong></h3><ul><li><strong>博主的背景</strong>：他们可能已经解决过类似问题，因此知道哪些包是高效的选择。这是经验的体现。</li><li><strong>类比</strong>：就像一位厨师在做菜时，很容易知道用什么调料，而新手可能需要查配方。</li></ul><h4 id="你可以这样做："><a href="#你可以这样做：" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li><strong>多看、多学</strong>：通过模仿优秀项目和学习文档，积累对常用库和框架的了解。</li><li><strong>练习总结</strong>：每次解决问题后，记录用到的包和方法，慢慢形成自己的“工具箱”。</li></ul><hr><h3 id="2-文档与生态"><a href="#2-文档与生态" class="headerlink" title="2. 文档与生态"></a><strong>2. 文档与生态</strong></h3><ul><li><p><strong>语言和框架的生态</strong>：每种语言或框架都有一些社区公认的、<strong>常用的库</strong>。</p><ul><li>比如，Go 语言处理配置时，大家常用 <code>viper</code> 或 <code>yaml</code>。</li><li>HTTP 请求：<code>net/http</code>（原生）或社区的 <code>gin</code>（框架）。</li></ul></li><li><p><strong>社区推荐</strong>：很多库被推荐使用，是因为它们：</p><ol><li><strong>功能齐全</strong>。</li><li><strong>易于使用</strong>。</li><li><strong>社区活跃</strong>，有长期维护。</li></ol></li></ul><h4 id="你可以这样做：-1"><a href="#你可以这样做：-1" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li><strong>了解生态</strong>：多逛 GitHub、Go 的标准库文档以及社区资源（比如 Go 的官方博客）。</li><li><strong>参考优秀代码</strong>：通过学习开源项目，你可以快速了解哪些包解决了哪些问题。</li></ul><hr><h3 id="3-搜索能力"><a href="#3-搜索能力" class="headerlink" title="3. 搜索能力"></a><strong>3. 搜索能力</strong></h3><ul><li><p>很多开发者的知识并不是“记住的”，而是“查到的”。他们遇到问题时，会：</p><ol><li><strong>搜索问题</strong>：查找类似场景的解决方案。</li><li><strong>评估方案</strong>：根据实际需求选择合适的库或框架。</li></ol></li><li><p>搜索时的技巧：</p><ul><li>用精准关键词，比如“Go JWT authentication package”。</li><li>看社区推荐，比如 Stack Overflow、Reddit、GitHub 等。</li></ul></li></ul><h4 id="你可以这样做：-2"><a href="#你可以这样做：-2" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li>当不知道用哪个包时，搜索类似场景的关键词，看看其他开发者用了什么库。</li><li>慢慢熟悉常用的社区推荐来源，比如：<ul><li><a href="https://awesome-go.com/">Awesome Go</a>：列出了 Go 的优秀库。</li><li><a href="https://pkg.go.dev/">Go Packages</a>：Go 的官方包文档和搜索平台。</li></ul></li></ul><hr><h3 id="4-理解需求，选择工具"><a href="#4-理解需求，选择工具" class="headerlink" title="4. 理解需求，选择工具"></a><strong>4. 理解需求，选择工具</strong></h3><ul><li>博主并不是“盲选”包，而是基于需求选工具。<ul><li>例如：需要读取配置文件，就会选择支持多种格式的 <code>viper</code>。</li><li>需要快速搭建 Web 服务框架，就会用 <code>gin</code> 或 <code>echo</code>。</li></ul></li></ul><h4 id="你可以这样做：-3"><a href="#你可以这样做：-3" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li>学会分析问题：问自己——“这个问题需要解决什么？”“有没有原生支持？”</li><li>学会看库文档：<ul><li>比如，在 GitHub 项目中，看 ReadMe 和示例代码，理解库的功能。</li></ul></li></ul><hr><h3 id="5-你的问题如何转换为实践"><a href="#5-你的问题如何转换为实践" class="headerlink" title="5. 你的问题如何转换为实践"></a><strong>5. 你的问题如何转换为实践</strong></h3><ol><li><strong>明确目标</strong>：先理解你要解决的问题，比如“实现一个 JWT 登录功能”。</li><li><strong>学习思路</strong>：看看博主怎么解决的，模仿过程并分析他们选择的工具是否合理。</li><li><strong>尝试自己实现</strong>：不要依赖博主的方案，尝试用其他库或者原生代码实现。</li></ol><hr><h3 id="总结：知识的形成是一个积累过程"><a href="#总结：知识的形成是一个积累过程" class="headerlink" title="总结：知识的形成是一个积累过程"></a><strong>总结：知识的形成是一个积累过程</strong></h3><p>博主看似“知道一切”，实际上是基于：</p><ol><li><strong>经验积累</strong>：长期的项目经验让他们知道常用包。</li><li><strong>良好工具链</strong>：对语言生态了解，知道优秀的社区推荐。</li><li><strong>高效搜索</strong>：遇到新问题时，他们可以快速找到解决方案。</li></ol><p><strong>行动建议</strong>：</p><ul><li>多积累项目经验，模仿优秀代码，逐渐形成自己的“工具箱”。</li><li>学会分解问题和尝试不同工具，在实践中找到更适合的解决方案。<br>坚持下去，你也会越来越“有经验”！ 😊</li></ul>]]></content>
      
      
      <categories>
          
          <category> 困惑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>理解鉴权，权限等名词的区别</title>
      <link href="/2024/12/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/authority/"/>
      <url>/2024/12/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/authority/</url>
      
        <content type="html"><![CDATA[<h2 id="GPT很好的给出了答案"><a href="#GPT很好的给出了答案" class="headerlink" title="GPT很好的给出了答案"></a>GPT很好的给出了答案</h2><p>问：</p><p>用户通过了身份验证，但是不具有访问资源所需的权限。 这句话我应该怎么理解，我还有的疑惑是Cookie，Token，鉴权，权限等这几个名词都是什么意思，我现在对他们的理解有点模糊</p><p>答：</p><p>这些概念是 Web 安全和权限管理的核心部分。让我们分两步：<strong>先理解句子的含义</strong>，再深入解析相关概念（Cookie、Token、鉴权、权限等）。</p><hr><h3 id="1-句子的含义"><a href="#1-句子的含义" class="headerlink" title="1. 句子的含义"></a><strong>1. 句子的含义</strong></h3><blockquote><p><strong>“用户通过了身份验证，但是不具有访问资源所需的权限。”</strong></p></blockquote><p>这句话分为两个阶段：</p><ol><li><p><strong>身份验证</strong>（Authentication）：系统确认了用户的身份（比如你用正确的用户名和密码登录）。</p><ul><li><strong>说明</strong>：你确实是你声称的那个人。</li><li><strong>类比</strong>：这就像进入公司时，你刷卡证明你是公司的员工。</li></ul></li><li><p><strong>权限检查</strong>（Authorization）：系统检查用户是否有权访问某些特定资源。</p><ul><li><strong>说明</strong>：通过身份验证并不代表你可以访问所有东西。例如：<ul><li>普通用户可能无法访问管理员界面。</li><li>销售部门员工可能无法查看财务报表。</li></ul></li><li><strong>类比</strong>：在公司内部，即使你刷卡进门，也可能需要额外权限才能进入某些区域（比如机房）。</li></ul></li></ol><p><strong>总结</strong>：身份验证是“你是谁”，权限检查是“你是否被允许做某件事”。通过身份验证 ≠ 获得所有权限。</p><hr><h3 id="2-概念解析"><a href="#2-概念解析" class="headerlink" title="2. 概念解析"></a><strong>2. 概念解析</strong></h3><h4 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="(1) Cookie"></a><strong>(1) Cookie</strong></h4><ul><li><strong>定义</strong>：一种小型数据，存储在用户浏览器中，由服务器生成，用来记录用户的会话状态或其他信息。</li><li><strong>用途</strong>：<ol><li><strong>会话管理</strong>：比如记录你是否已登录。</li><li><strong>个性化</strong>：比如保存语言设置。</li><li><strong>追踪</strong>：用于广告和分析。</li></ol></li></ul><p><strong>类比</strong>：Cookie 就像一个身份证明牌，浏览器每次请求时带上它，服务器根据这个证明牌识别你的身份。</p><hr><h4 id="2-Token"><a href="#2-Token" class="headerlink" title="(2) Token"></a><strong>(2) Token</strong></h4><ul><li><strong>定义</strong>：类似于数字化的通行证，通常由服务器生成并发放给用户，用户每次请求时带上 Token，证明自己已通过身份验证。</li><li><strong>常见类型</strong>：<ul><li>**JWT (JSON Web Token)**：一种格式化的 Token，常用于现代 Web 应用。</li></ul></li></ul><p><strong>区别于 Cookie</strong>：</p><ul><li>Cookie 是浏览器特有的存储机制，而 Token 是一个通用的凭证。</li><li>Cookie 通常自动附加在请求中，Token 需要开发者手动附加（如放在请求头中）。</li></ul><p><strong>类比</strong>：Token 就像一个“通行证”，你需要用它向服务器证明你有访问权限。</p><hr><h4 id="3-鉴权"><a href="#3-鉴权" class="headerlink" title="(3) 鉴权"></a><strong>(3) 鉴权</strong></h4><ul><li><strong>定义</strong>：确定用户是否具有访问资源或执行操作的权限。</li><li><strong>过程</strong>：<ul><li>用户发起请求时，系统会验证用户提供的凭证（比如 Token 或 Cookie）。</li><li>系统根据用户的角色、组或策略，判断是否允许操作。</li></ul></li></ul><p><strong>类比</strong>：鉴权就像安保检查，你拿着门卡，安保会检查你的权限，决定你是否可以进入某些区域。</p><hr><h4 id="4-权限"><a href="#4-权限" class="headerlink" title="(4) 权限"></a><strong>(4) 权限</strong></h4><ul><li><strong>定义</strong>：指用户被允许执行的操作范围或访问的资源类型。</li><li><strong>示例</strong>：<ul><li>读权限：允许查看文件内容。</li><li>写权限：允许修改文件内容。</li><li>管理权限：允许管理其他用户。</li></ul></li></ul><p><strong>类比</strong>：权限就像不同的钥匙，钥匙决定了你能打开哪些门。</p><hr><h3 id="3-总结关系和区别"><a href="#3-总结关系和区别" class="headerlink" title="3. 总结关系和区别"></a><strong>3. 总结关系和区别</strong></h3><ul><li><strong>Cookie</strong>：存储用户会话信息，让服务器识别用户是谁。</li><li><strong>Token</strong>：携带用户身份信息，用于证明用户已通过身份验证。</li><li><strong>鉴权</strong>：判断用户是否有权访问特定资源。</li><li><strong>权限</strong>：用户可以做的事情或访问的资源范围。</li></ul><hr><h3 id="4-一个完整的例子"><a href="#4-一个完整的例子" class="headerlink" title="4. 一个完整的例子"></a><strong>4. 一个完整的例子</strong></h3><ol><li><p>用户访问网站，输入用户名和密码（<strong>身份验证</strong>）。</p><ul><li>服务器验证用户名和密码正确，生成一个 Token 返回给用户。</li><li>Token 或者对应的 Session ID 会存储在用户的 Cookie 中。</li></ul></li><li><p>用户请求资源时，浏览器自动带上 Cookie（或你自己带上 Token）。</p><ul><li>服务器接收到请求后，验证 Token 或 Cookie 的合法性。</li></ul></li><li><p>服务器检查权限（<strong>鉴权</strong>）。</p><ul><li>如果你有权限，资源返回给你。</li><li>如果你没有权限，服务器返回 “403 Forbidden”。</li></ul></li></ol><p>你可以将这些过程看成一道流水线：<strong>身份验证 -&gt; 带凭证发请求 -&gt; 权限检查 -&gt; 返回结果</strong>。</p><p>就是我是 赵忠鹤 检查 赵忠鹤是不是有权限访问这个内容，大体就是这个意思</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>json的序列化与反序列化</title>
      <link href="/2024/12/06/go/serialize/"/>
      <url>/2024/12/06/go/serialize/</url>
      
        <content type="html"><![CDATA[<p>序列化：将 Go 中的结构体、切片、map 等数据结构转换为 JSON 格式的字符串。</p><p>作用：方便数据在网络传输、文件保存等情境中使用。</p><p>反序列化：将 JSON 格式的字符串转换为 Go 的数据结构。</p><p>作用：方便从 JSON 中提取数据并在程序中使用。</p><p>JSON<br>{<br>“”： “”，<br>“”： “”，<br>“”： “”<br>}</p><p>Go中 使用 Marshal Unmarshal 进行序列化和反序列化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化为 JSON</span></span><br><span class="line">    jsonData, err := json.Marshal(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData)) <span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jsonData := <span class="string">`&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25&#125;`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化为结构体</span></span><br><span class="line">    err := json.Unmarshal([]<span class="type">byte</span>(jsonData), &amp;p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(p.Name, p.Age) <span class="comment">// 输出: Alice 25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类比一下进程间管道通信：<br>在父子进程使用管道进行通信时，数据通常以字节流的形式传输。<br>要传递复杂数据结构，需要将数据转换为字节流（序列化），并在另一端解析回来（反序列化）。</p><p>GO中实现 字符进程通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    Content <span class="type">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r, w, err := os.Pipe() <span class="comment">// 创建管道</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error creating pipe:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.Getenv(<span class="string">&quot;IS_CHILD&quot;</span>) == <span class="string">&quot;1&quot;</span> &#123;</span><br><span class="line">        <span class="comment">// 子进程逻辑</span></span><br><span class="line">        r.Close() <span class="comment">// 关闭写端</span></span><br><span class="line">        <span class="keyword">var</span> msg Message</span><br><span class="line">        decoder := json.NewDecoder(r)</span><br><span class="line">        <span class="keyword">if</span> err := decoder.Decode(&amp;msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Error decoding:&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Child received:&quot;</span>, msg.Content)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 父进程逻辑</span></span><br><span class="line">        w.Close() <span class="comment">// 关闭读端</span></span><br><span class="line">        cmd := os.Exec(os.Args[<span class="number">0</span>], os.Args, os.Environ())</span><br><span class="line">        cmd.Env = <span class="built_in">append</span>(os.Environ(), <span class="string">&quot;IS_CHILD=1&quot;</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            encoder := json.NewEncoder(w)</span><br><span class="line">            encoder.Encode(Message&#123;Content: <span class="string">&quot;Hello, Child!&quot;</span>&#125;)</span><br><span class="line">        &#125;()</span><br><span class="line">        cmd.Wait()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语法学习</title>
      <link href="/2024/12/02/go/Go_Program/"/>
      <url>/2024/12/02/go/Go_Program/</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">whatAmI := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;I&#x27;m a bool&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;I&#x27;m an int&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Don&#x27;t know type %T\n&quot;</span>, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">whatAmI(<span class="literal">true</span>)</span><br><span class="line">whatAmI(<span class="number">1</span>)</span><br><span class="line">whatAmI(<span class="string">&quot;hey&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是一个函数whatAmI，它接受一个interface{}类型的参数。interface{}是 Go 语言中的一种空接口，可以存储任何类型的值。<br>这个switch语句实际上是一个类型switch，它检查接口变量i的具体类型，而不是它的值。根据i的类型，switch将执行不同的case分支。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If you specify the index with `:`, the elements in</span></span><br><span class="line"><span class="comment">// between will be zeroed.</span></span><br><span class="line">b = [...]<span class="type">int</span>&#123;<span class="number">100</span>, <span class="number">3</span>: <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;idx:&quot;</span>, b)</span><br></pre></td></tr></table></figure><p>3: 400 指定了下标为 3 的位置的值是 400。<br>这意味着索引 1 和 2 的值将被初始化为 0（因为:操作符指定了一个新的下标，并初始化之前未指定的下标对应的元素为 0）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">string</span></span><br><span class="line">fmt.Println(<span class="string">&quot;uninit:&quot;</span>, s, s == <span class="literal">nil</span>, <span class="built_in">len</span>(s) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>uninit: [] true true</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">twoD := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">innerLen := i + <span class="number">1</span></span><br><span class="line">twoD[i] = <span class="built_in">make</span>([]<span class="type">int</span>, innerLen)</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; innerLen; j++ &#123;</span><br><span class="line">twoD[i][j] = i + j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;2d: &quot;</span>, twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2d:  [[0] [1 2] [2 3 4]]</p><p>12.3日</p><p>map操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   m[<span class="string">&quot;k1&quot;</span>] = <span class="number">7</span></span><br><span class="line">m[<span class="string">&quot;k2&quot;</span>] = <span class="number">13</span></span><br><span class="line">fmt.Println(<span class="string">&quot;map:&quot;</span>, m)</span><br><span class="line">fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="comment">//clear(m)</span></span><br><span class="line">val, prs := m[<span class="string">&quot;k2&quot;</span>] <span class="comment">//k2的值， 一个是判断k2是否存在于m中的bool值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;val：&quot;</span>, val, <span class="string">&quot;prs:&quot;</span>, prs)</span><br><span class="line">n := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;foo&quot;</span>: <span class="number">1</span>, <span class="string">&quot;bar&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;&quot;</span>, n)</span><br><span class="line"><span class="keyword">if</span> maps.Equal(n, n2) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;n == n2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用变长参数函数（variadic function），即可以接收任意数量参数的函数。<br>这里的 … 标记表示 nums 参数是可变长的，可以接收零个或多个 int 类型的参数</p><p>nums 被当作切片使用，可以进行切片相关的操作，例如使用 len(nums) 获取长度，或者用 range 遍历切片元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Print(nums, <span class="string">&quot; &quot;</span>)</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"><span class="comment">// Within the function, the type of `nums` is</span></span><br><span class="line"><span class="comment">// equivalent to `[]int`. We can call `len(nums)`,</span></span><br><span class="line"><span class="comment">// iterate over it with `range`, etc.</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">total += num</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Variadic functions can be called in the usual way</span></span><br><span class="line"><span class="comment">// with individual arguments.</span></span><br><span class="line">sum(<span class="number">1</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you already have multiple args in a slice,</span></span><br><span class="line"><span class="comment">// apply them to a variadic function using</span></span><br><span class="line"><span class="comment">// `func(slice...)` like this.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种调用nums的方法使用 nums 切片，通过 sum(nums...) 的方式将切片中的每个元素作为单独的参数传递给 sum 函数。</span></span><br><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">sum(nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误示范</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">allArticles</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">articles := Articles&#123;</span><br><span class="line">Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">Desc:    <span class="string">&quot;Test Descrption&quot;</span>,</span><br><span class="line">Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;endpoint hit: allArticles&quot;</span>)</span><br><span class="line">json.NewEncoder(w).Encode(articles)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的问题是 Articles 类型实际上是一个切片（[]Article），而你试图将一个单独的 Article 结构体实例赋值给 articles 变量。根据 Go 语言的语法，Articles 类型需要的是一个 Article 类型的切片。</p><p>要解决这个问题，你需要将 Article 实例放入一个切片中。可以将你的代码修改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">articles := Articles&#123;</span><br><span class="line">&#123;</span><br><span class="line">Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">Desc:    <span class="string">&quot;Test Descrption&quot;</span>,</span><br><span class="line">Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">CopyInsert</span><br><span class="line">这里的修改是把 Article 结构体实例用 &#123;&#125; 包围起来，表示这是一个切片中的一个元素。</span><br><span class="line"></span><br><span class="line">最终的 allArticles 函数应如下所示：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Article的实例</span></span><br><span class="line">    newArticle := Article&#123;</span><br><span class="line">        Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">        Desc:    <span class="string">&quot;Test Description&quot;</span>,</span><br><span class="line">        Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Articles切片并添加上面的实例</span></span><br><span class="line">    articles := Articles&#123;newArticle&#125;</span><br></pre></td></tr></table></figure><hr><p>go fmt </p><p>包的导入者将使用名称来引用其内容，因此包中的导出名称可以使用该事实来避免重复。 （不要使用 import . 表示法，它可以简化必须在正在测试的包外部运行的测试，但应该避免。）<br>例如，bufio 包中的缓冲读取器类型称为 Reader，而不是 BufReader，因为用户将其视为 bufio.Reader，这是一个清晰、简洁的名称。此外，由于导入的实体始终使用其包名称进行寻址，<br>因此 bufio.Reader 不会与 io.Reader 冲突。类似地，<br>创建ring.Ring新实例的函数（Go中构造函数的定义）通常被称为NewRing，但由于Ring是包导出的唯一类型，并且由于包被称为ring，所以它是称为“New”，包的客户端将其视为“ring.New”。使用包结构来帮助您选择好的名称。</p><p>另一个简短的例子是once.Do; Once.Do(setup) 读起来很好，<br>并且不会通过编写 Once.DoOrWaitUntilDone(setup) 来改进。长名称不会自动使内容更具可读性。有用的文档注释通常比超长的名称更有价值。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSeq</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span> <span class="comment">// i 是一个局部变量，用于 intSeq 函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="comment">// 返回一个匿名函数，这个函数可以访问 intSeq 函数的局部变量 i。</span></span><br><span class="line">        i++    <span class="comment">// 每次调用这个匿名函数时，i 的值都会增加。</span></span><br><span class="line">        <span class="keyword">return</span> i <span class="comment">// 返回增加后的 i 的值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果 ：<br>1<br>2<br>3<br>1</p><p>这是因为闭包允许匿名函数捕获并记住 i 变量的状态。<br>这就是闭包的 “魔力” 所在，即使外部函数已经返回，内部函数仍然能够访问和修改外部函数的变量。</p><p>stack :&#x3D; []rune{} 与 make :&#x3D; []string{} 的区别：<br>stack :&#x3D; []rune{}：这段代码创建了一个 rune 类型的切片（空切片）。rune 是 Go 中专门用来表示单个字符的类型，适用于你处理字符（尤其是 Unicode 字符）时，能够确保每个元素是一个完整的 Unicode 字符。</p><p>make :&#x3D; []string{}：这段代码创建了一个 string 类型的切片。每个元素是一个字符串，字符串通常用于表示一系列字符构成的文本数据。</p><hr><p>在 Go 程序中，通过 <code>os.Args</code> 可以访问命令行参数，而 <code>go run main.go file1.txt file2.txt</code> 的执行过程如下：</p><hr><p>为什么·go语言 &gt; go run main.go file1.txt file2.txt 在这里执行之后可以读取到文件1 2</p><h3 id="1-命令行参数的解析"><a href="#1-命令行参数的解析" class="headerlink" title="1. 命令行参数的解析"></a><strong>1. 命令行参数的解析</strong></h3><ul><li><p><strong>命令：</strong> <code>go run main.go file1.txt file2.txt</code></p><ul><li><code>go run</code> 会编译并执行 <code>main.go</code>。</li><li>命令行中，<code>main.go</code> 后面的 <code>file1.txt</code> 和 <code>file2.txt</code> 被传递给程序作为命令行参数。</li></ul></li><li><p>在程序中，<code>os.Args</code> 是一个字符串切片（<code>[]string</code>），包含了命令行中的参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.Args[<span class="number">0</span>] <span class="comment">// 包含程序的名字，如 &quot;main.go&quot;</span></span><br><span class="line">os.Args[<span class="number">1</span>] <span class="comment">// 第一个参数 &quot;file1.txt&quot;</span></span><br><span class="line">os.Args[<span class="number">2</span>] <span class="comment">// 第二个参数 &quot;file2.txt&quot;</span></span><br></pre></td></tr></table></figure><p><strong>例子：</strong><br>假如命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(os.Args) </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[main file1.txt file2.txt]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-打开文件进行读取"><a href="#2-打开文件进行读取" class="headerlink" title="2. 打开文件进行读取"></a><strong>2. 打开文件进行读取</strong></h3><p>你的代码解析命令行参数后，会尝试打开这些文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files := os.Args[<span class="number">1</span>:] <span class="comment">// 获取命令行参数列表（除程序本身外的部分）</span></span><br></pre></td></tr></table></figure><ul><li><code>files</code> 现在是一个切片：<code>[&quot;file1.txt&quot;, &quot;file2.txt&quot;]</code>。</li></ul><p>然后通过循环处理每个文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> files &#123;</span><br><span class="line">    f, err := os.Open(arg) <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">&quot;dup2: %v\n&quot;</span>, err) <span class="comment">// 错误处理</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close() <span class="comment">// 确保文件被正确关闭</span></span><br><span class="line">    countLines(f, counts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中：</p><ol><li><p>**<code>os.Open(arg)</code>**：</p><ul><li>打开文件（如 <code>file1.txt</code>），返回一个文件指针 <code>*os.File</code>。</li><li>如果文件打开失败（文件不存在或权限问题），返回错误并跳过。</li></ul></li><li><p>**<code>countLines(f, counts)</code>**：</p><ul><li>将文件指针传递给 <code>countLines</code>，扫描文件的内容并统计每行的出现次数。</li></ul></li></ol><hr><h3 id="3-执行结果的输出"><a href="#3-执行结果的输出" class="headerlink" title="3. 执行结果的输出"></a><strong>3. 执行结果的输出</strong></h3><p>统计完成后，程序会输出所有出现次数大于 1 的行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line, n := <span class="keyword">range</span> counts &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d\t%s\n&quot;</span>, n, line)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这会将文件中所有重复的行及其出现次数打印到控制台。</p><hr><h3 id="4-为什么能够读取多个文件"><a href="#4-为什么能够读取多个文件" class="headerlink" title="4. 为什么能够读取多个文件"></a><strong>4. 为什么能够读取多个文件</strong></h3><p>这是因为你的代码通过 <code>for _, arg := files</code> 遍历了 <code>os.Args[1:]</code> 中的所有文件，并依次处理它们。程序对每个文件重复以下流程：</p><ol><li>打开文件。</li><li>按行扫描内容，统计出现次数。</li><li>将结果合并到 <code>counts</code> 映射中。</li></ol><p>这样，即使你提供多个文件，程序依然可以逐个读取并处理它们。</p><hr><h3 id="运行流程示例"><a href="#运行流程示例" class="headerlink" title="运行流程示例"></a><strong>运行流程示例</strong></h3><p>假设有以下文件内容：</p><h4 id="file1-txt"><a href="#file1-txt" class="headerlink" title="file1.txt:"></a><code>file1.txt</code>:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="file2-txt"><a href="#file2-txt" class="headerlink" title="file2.txt:"></a><code>file2.txt</code>:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">world</span><br><span class="line">hello</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>程序会：</p><ol><li>读取 <code>file1.txt</code>：<ul><li>统计结果：<code>&#123;&quot;hello&quot;: 2, &quot;world&quot;: 1&#125;</code>。</li></ul></li><li>读取 <code>file2.txt</code>，继续更新 <code>counts</code>：<ul><li>最终统计结果：<code>&#123;&quot;hello&quot;: 3, &quot;world&quot;: 2, &quot;go&quot;: 1&#125;</code>。</li></ul></li><li>打印重复行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3   hello</span><br><span class="line">2   world</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>你可以读取多个文件是因为程序通过 <code>os.Args</code> 获取了命令行中的文件名列表，并通过循环逐个打开和读取文件的内容。这种设计使得你的程序能够动态处理任意数量的文件，而无需修改代码。</p><hr><h3 id="12-14-日-更考完4级"><a href="#12-14-日-更考完4级" class="headerlink" title="12.14 日 更考完4级"></a>12.14 日 更考完4级</h3><h4 id="一-Errors"><a href="#一-Errors" class="headerlink" title="一.Errors"></a>一.Errors</h4><ol><li>“errors” 包  使用给定的错误消息构造一个基本错误值。</li></ol><p>errors.New(“can’t work with 42”)</p><p>nil 表示没有错误</p><ol start="2"><li>哨兵错误是一个预先声明的变量，用于表示特定的错误情况。</li></ol><p>var ErrOutOfTea &#x3D; fmt.Errorf(“no more tea available”)<br>var ErrPower &#x3D; fmt.Errorf(“can’t boil water”)</p><ol start="3"><li>更高级别的错误来包装错误以添加上下文</li></ol><p>最简单的方法是使用 fmt.Errorf 中的 %w 动词。包装错误创建一个逻辑链（A 包装 B，B 包装 C 等），可以使用 error.Is 和 error.As 等函数进行查询。</p><p>return fmt.Errorf(“making tea: %w”, ErrPower)</p><ol start="4"><li>if 行中使用内联错误检查</li></ol><p>if r, e :&#x3D; f(i); e !&#x3D; nil {<br>fmt.Println(“f failed:”, e)<br>} else {<br>fmt.Println(“f worked:”, r)<br>}</p><ol start="5"><li>error.Is 检查给定错误（或其链中的任何错误）是否与特定错误值匹配。</li></ol><p>if errors.Is(err, ErrOutOfTea) {<br>fmt.Println(“We should buy new tea!”)<br>} else if errors.Is(err, ErrPower) {<br>fmt.Println(“Now it is dark.”)<br>} else {<br>fmt.Printf(“unknown error: %s\n”, err)<br>}</p><p>将err和我们自定义的哨兵错误或者特定错误做对比</p><p>二.自定义错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> argError <span class="keyword">struct</span> &#123;</span><br><span class="line">    arg     <span class="type">int</span></span><br><span class="line">    message <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *argError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d - %s&quot;</span>, e.arg, e.message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Error 方法并没有直接调用，但 &amp;argError{arg, “can’t work with it”} 被返回为 error 类型时，Error 方法已经在幕后实现了对错误消息的封装。</p><p>error.As 是errors.Is 的更高级版本。它检查给定错误（或其链中的任何错误）是否与特定错误类型匹配，并转换为该类型的值，返回 true。如果没有匹配，则返回 false。</p><h4 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h4><p>轻量级的执行线程</p><p>go f(s)。这个新的 goroutine 将与调用的 goroutine 同时执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(from <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Println(from, <span class="string">&quot;:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> f(<span class="string">&quot;goroutine&quot;</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>启动一个 goroutine 来进行匿名函数调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(msg)</span><br><span class="line">    &#125;(<span class="string">&quot;going&quot;</span>)</span><br></pre></td></tr></table></figure><p>goroutine 是由 Go 运行时同时运行的。</p><h4 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h4><p>通道是连接并发 goroutine 的管道。您可以将值从一个 Goroutine 发送到通道，并将这些值接收到另一个 Goroutine。</p><p>messages :&#x3D; make(chan string)</p><p>通道 &lt;- 语法将值发送到通道</p><p>go func() { messages &lt;- “ping” }()</p><p>msg :&#x3D; &lt;-messages</p><p>&lt;-channel 语法从通道接收值。在这里，我们将收到上面发送的“ping”消息并将其打印出来。</p><p>发送和接收会阻塞，直到发送者和接收者都准备好为止。此属性允许我们在程序结束时等待“ping”消息，而无需使用任何其他同步。</p><p>通道缓冲：</p><p>messages :&#x3D; make(chan string, 2) 字符串通道，最多缓冲 2 个值 因此我们可以将这些值发送到通道中，而无需相应的并发接收。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">messages &lt;- <span class="string">&quot;buffered&quot;</span></span><br><span class="line">messages &lt;- <span class="string">&quot;channel&quot;</span></span><br><span class="line"></span><br><span class="line"> fmt.Println(&lt;-messages)</span><br><span class="line"> fmt.Println(&lt;-messages)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="断言和switch用法"><a href="#断言和switch用法" class="headerlink" title="断言和switch用法:"></a>断言和switch用法:</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">t = functionOfSomeType()</span><br><span class="line"><span class="keyword">switch</span> t := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;unexpected type %T\n&quot;</span>, t)     <span class="comment">// %T prints whatever type t has</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;boolean %t\n&quot;</span>, t)             <span class="comment">// t has type bool</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;integer %d\n&quot;</span>, t)             <span class="comment">// t has type int</span></span><br><span class="line"><span class="keyword">case</span> *<span class="type">bool</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;pointer to boolean %t\n&quot;</span>, *t) <span class="comment">// t has type *bool</span></span><br><span class="line"><span class="keyword">case</span> *<span class="type">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;pointer to integer %d\n&quot;</span>, *t) <span class="comment">// t has type *int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型断言用于从接口类型值中提取其底层的具体类型。如果断言成功，程序可以安全地将该接口值转换为目标类型并使用。</p><p>value, ok :&#x3D; x.(T)</p><p>x 是一个接口类型的变量。<br>T 是目标类型（可以是具体类型或其他接口类型）。<br>如果 x 的动态类型是 T：<br>value 是 x 转换为 T 后的值。<br>ok 为 true。<br>如果 x 的动态类型不是 T：<br>value 是 T 的零值。<br>ok 为 false，表示断言失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; = <span class="number">42</span> <span class="comment">// 空接口存储了一个 int 值</span></span><br><span class="line"></span><br><span class="line">value, ok := x.(<span class="type">int</span>) <span class="comment">// 断言 x 是 int 类型</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x is an int, value: %d\n&quot;</span>, value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;x is not an int&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空interface<br>空interface(interface{})不包含任何的method，正因为如此，所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method），但是空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。它有点类似于C语言的void*类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义a为空接口</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">5</span></span><br><span class="line">s := <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment">// a可以存储任意类型的数值</span></span><br><span class="line">a = i</span><br><span class="line">a = s</span><br></pre></td></tr></table></figure><p>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值。是不是很有用啊！</p><p>Go并发</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小计划</title>
      <link href="/2024/12/02/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/study_plan/"/>
      <url>/2024/12/02/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/study_plan/</url>
      
        <content type="html"><![CDATA[<p>兄弟，你的想法很清晰，我非常理解你想深入学习、夯实基础，而不是走捷径的决心。我们可以针对你的目标和现状制定一个更加实践导向的计划，同时保持学习过程有趣且充实。以下是我的建议和方案：</p><hr><h3 id="总体目标"><a href="#总体目标" class="headerlink" title="总体目标"></a><strong>总体目标</strong></h3><ol><li><strong>短期（2025年3月前）</strong>：增强银行项目的实用性和技术深度，掌握后端开发的核心技能，为实习做好准备。</li><li><strong>中长期（未来两年）</strong>：夯实计算机基础，深入理解系统设计、分布式系统及核心算法，逐步具备独立设计和开发复杂项目的能力。</li></ol><hr><h3 id="学习模块规划"><a href="#学习模块规划" class="headerlink" title="学习模块规划"></a><strong>学习模块规划</strong></h3><h4 id="1-项目深度增强（每周一个主题，贯穿整个学习计划）"><a href="#1-项目深度增强（每周一个主题，贯穿整个学习计划）" class="headerlink" title="1. 项目深度增强（每周一个主题，贯穿整个学习计划）"></a><strong>1. 项目深度增强（每周一个主题，贯穿整个学习计划）</strong></h4><p>目标：将现有银行项目提升到更贴近实际业务需求的水平，增加亮点功能。</p><ul><li><p><strong>Week 1: 数据一致性与事务</strong></p><ul><li>学习事务隔离级别（ACID），在项目中实现更加复杂的转账操作（如跨账户冻结和解冻）。</li><li>使用 SQLC 或 GORM，优化数据库操作。</li></ul></li><li><p><strong>Week 2: 引入 Redis</strong></p><ul><li>学习 Redis 基础知识，理解其在缓存和分布式锁中的应用。</li><li>在项目中实现：<ul><li>用户信息缓存，优化频繁查询。</li><li>基于 Redis 的幂等性控制（防止转账操作重复）。</li></ul></li></ul></li><li><p><strong>Week 3: RESTful API 和 JWT 身份验证</strong></p><ul><li>深化对 RESTful API 的理解，优化项目 API 设计。</li><li>引入 JWT 实现用户登录认证和权限管理。</li></ul></li><li><p><strong>Week 4: 日志和监控</strong></p><ul><li>集成日志框架（如 Logrus&#x2F;Zap），记录系统操作。</li><li>学习 Prometheus 基础知识，为项目添加简单监控。</li></ul></li><li><p><strong>Week 5: Docker 和部署优化</strong></p><ul><li>使用 Docker Compose 部署完整项目，模拟生产环境。</li><li>学习 Nginx 基础知识，优化项目访问流程。</li></ul></li><li><p><strong>Week 6: 微服务化</strong></p><ul><li>学习 Go 微服务框架（如 Gin、gRPC）。</li><li>将项目拆分成两个服务（如用户服务和交易服务），理解微服务架构基础。</li></ul></li></ul><hr><h4 id="2-算法与数据结构（每天一题，逐渐深入）"><a href="#2-算法与数据结构（每天一题，逐渐深入）" class="headerlink" title="2. 算法与数据结构（每天一题，逐渐深入）"></a><strong>2. 算法与数据结构（每天一题，逐渐深入）</strong></h4><p>目标：构建扎实的算法基础，为今后面试和实际开发做准备。</p><ul><li><strong>题目选择顺序</strong>：简单 -&gt; 中等 -&gt; 困难，优先 BFS&#x2F;DFS、二分查找、动态规划等重要领域。</li><li><strong>周主题</strong>：<ul><li>Week 1-2: 栈、队列、链表</li><li>Week 3-4: 二叉树与递归</li><li>Week 5-6: 动态规划与分治算法</li><li>Week 7+: 高频面试题复盘（重点记录和总结常见套路）。</li></ul></li></ul><hr><h4 id="3-计算机基础与原理（每周一本书-主题）"><a href="#3-计算机基础与原理（每周一本书-主题）" class="headerlink" title="3. 计算机基础与原理（每周一本书&#x2F;主题）"></a><strong>3. 计算机基础与原理（每周一本书&#x2F;主题）</strong></h4><p>目标：夯实后端开发的计算机科学基础。</p><ul><li><p><strong>Week 1: 计算机网络</strong></p><ul><li>阅读《计算机网络：自顶向下方法》或《图解HTTP》。</li><li>重点学习 HTTP、HTTPS、TCP&#x2F;IP 的工作原理，并理解抓包工具（如 Wireshark）的使用。</li></ul></li><li><p><strong>Week 2: 操作系统</strong></p><ul><li>阅读《现代操作系统》。</li><li>理解线程、进程、同步机制，以及如何在 Go 中实现简单的并发处理。</li></ul></li><li><p><strong>Week 3-4: 数据库系统</strong></p><ul><li>阅读《数据库系统概念》。</li><li>理解索引、事务原理、查询优化等内容。</li></ul></li><li><p><strong>Week 5: 系统设计</strong></p><ul><li>阅读《系统设计入门》或相关博客。</li><li>学习常见系统设计模式（如限流、负载均衡）和架构决策。</li></ul></li></ul><hr><h3 id="具体每日安排（样例）"><a href="#具体每日安排（样例）" class="headerlink" title="具体每日安排（样例）"></a><strong>具体每日安排（样例）</strong></h3><ul><li><p><strong>上午</strong>：</p><ul><li>刷一道 LeetCode 算法题，阅读相关解析，整理题解。</li><li>学习书籍相关章节，完成1-2页的读书笔记。</li></ul></li><li><p><strong>下午</strong>：</p><ul><li>按周主题在银行项目中完成对应功能开发。</li><li>查看官方文档、博客或视频教程，记录学习中的关键点。</li></ul></li><li><p><strong>晚上</strong>：</p><ul><li>复习当天内容，整理代码和笔记。</li><li>自测项目功能，尝试优化代码。</li></ul></li></ul><hr><h3 id="可实践性建议"><a href="#可实践性建议" class="headerlink" title="可实践性建议"></a><strong>可实践性建议</strong></h3><ol><li><strong>建立个人技术博客</strong>：把每天的学习记录写成博客或日志，比如讲解项目中 Redis 的用法或总结某道算法题的思路。</li><li><strong>参与开源项目</strong>：找一个简单的 Go 开源项目，阅读代码，尝试修复 bug 或贡献文档。</li><li><strong>模拟面试</strong>：每两周自测一次，将银行项目作为核心，讲解架构设计和亮点功能。</li></ol><hr><h3 id="最终成果展示"><a href="#最终成果展示" class="headerlink" title="最终成果展示"></a><strong>最终成果展示</strong></h3><ul><li>一个高度完善的银行项目：<ul><li>支持分布式事务、JWT 身份验证、Redis 缓存与微服务架构。</li><li>提供完善的 Docker 部署文档。</li></ul></li><li>一个 LeetCode 高质量题解库（至少 50 道题）。</li><li>一份扎实的基础知识笔记，涵盖网络、操作系统和数据库。</li></ul><p>引入项目技术栈（2周）：在新项目中加入 SQLC 工具、中间件，理解每个技术的接入过程。</p><p>实现进阶功能（3周）：根据银行项目的转账逻辑，尝试自己独立实现一次。</p><p>重点学习 HTTP 和 RESTful API。 深入理解数据库  深入理解数据库 熟悉中间件的实现逻辑</p><p>Web开发</p><ol><li>Go by example</li><li>三本书</li><li>两个项目 Memos Apache Answer</li><li>算法</li><li>gin-gonic.com</li></ol><p>微服务进阶</p><p>  gRPC</p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11.26日字节直播总结</title>
      <link href="/2024/11/26/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Dance_live2/"/>
      <url>/2024/11/26/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Dance_live2/</url>
      
        <content type="html"><![CDATA[<h1 id="字节结营直播答疑"><a href="#字节结营直播答疑" class="headerlink" title="字节结营直播答疑"></a>字节结营直播答疑</h1><p>revue 项目</p><p><img src="/about_Dance/1.png" alt="image-20241126190953519"></p><p><img src="/about_Dance/2.png" alt="image-20241126191031196"></p><p>性能优化     ci&#x2F;cd流程 （ star法则来描述一件事情)</p><p>准备找实习 写好简历</p><p><img src="/about_Dance/3.png" alt="image-20241126191500892"></p><p>zt：</p><p>服务端： 计算机基础知识（字节：计算机网络 tcp&#x2F;ip  腾讯：操作系统 阿里： 组成原理）</p><p>技术： （数据结构 高阶算法 链表 堆栈 树（面试重点））</p><p>leetcode 100 150 200</p><p>项目： 烂大街的（入门） 改进一些项目（做优化 项目存在的意义 解决了什么问题？ 带来了什么？ 项目亮点在哪里）</p><p>实习经历：（做了什么需求 需求是（谁给的 自己还是别人？）通过实现了什么？ 解决了什么？ 团队收益还是小组收益？）</p><p>专业能力： 小厂一门语言 ＋数据库存储 会就ok  大数据 架构数据 微服务层面</p><p><img src="/about_Dance/4.png" alt="image-20241126192005590"></p><p>八股扎实稳固 算法 中等难度题很快弄出来</p><p>项目亮点：能让面试官和你聊下去 如何提升亮点和竞争力  开源社区！</p><p>抄项目 然后手写 尝试自己理解      前端（vue）（react）</p><p><img src="/about_Dance/5.png" alt="image-20241126192541252"></p><p>数据结构 计算机基础知识  面试官想看你的亮点（你牛逼在哪里？）</p><p>做过什么会什么？</p><p>服务端是一些思维 而不是纠结你是用什么语言</p><p>从0-1 有没有调研 各行各业的优秀作业</p><p>合作项目</p><p>责任意识</p><p>技术探索：遇到什么问题 怎么解决的？</p><p>业务理解能力 项目受众是谁 项目模块 最重要是哪个模块 怎么优化这个模块</p><p><img src="/about_Dance/6.png" alt="image-20241126193100190"></p><p><img src="/about_Dance/7.png" alt="image-20241126193341747"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“开源社区新手入门该参与什么内容，有哪些社区比较活跃”</span><br><span class="line">可以看看类似于开源之夏这类的活动往年都是做什么的</span><br></pre></td></tr></table></figure><p>多逛github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“在github中新手怎么找项目”</span><br><span class="line">，你用vue就去看VUE文档仓库，看看有没有错别字，有的话修一下</span><br></pre></td></tr></table></figure><p>项目的含金量 和自己从0-1实现</p><p>组件多 中间件多 新奇的做法等 可以被称为含金量（）</p><p>核心能力 技术深度 在广度的前提下 一定要有一个深度</p><p>项目一样 面试官能问什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">老哥们 大二第一次找实习的话一般要什么程度我正在跟着别人做一个项目 但是不知道什么时候才够格去投简历”</span><br><span class="line">看看面经别人被问了什么你能不能回答</span><br></pre></td></tr></table></figure><p><img src="/about_Dance/8.png" alt="image-20241126193803102"></p><p>平地起项目 是有条件的： 大厂实习 项目经历&gt;&#x3D;3 等经历 否则不要平地起</p><p>对于项目的理解一定是从头到尾的 对项目改造 新增功能 优化 才能体现你的亮点</p><p>思考 ： 多人协作是否有沟通 是否涉及复杂逻辑</p><p>新颖的想法！ 创造力！</p><p>投简历的方式</p><p>如何面对八股 算法</p><p>找开源项目：熟悉流程 寻找错别字熟悉流程哈哈哈 看issue bug（解决issue）</p><p>知乎 蔚来 比亚迪 从小厂到大厂 循序渐进</p><p><img src="/about_Dance/9.png" alt="image-20241126195807918"></p><p>字节  99%go</p><p>语言是基础无所谓</p><p>培养独立解决问题的能力 做出一个合格的项目 （不断回顾自己的项目 查找不足）</p><p>后端开发实习生（简历）</p><p>数据库的课（掘金的）</p><p>《Redis深度历险：核心原理和应用实践》</p><p>服务端开源： 不建议新手就去找开源 学习成本很大 2~3段实习之后尝试开源</p><p><img src="/about_Dance/10.png" alt="image-20241126200922693"></p><p>知名项目源码： 前提一定要熟悉使用这个项目的源码 项目的使用环境 如何启动它</p><p>例如：熟练使用docker ， kubernets istio了，再去看源码 i   <strong>写出一个对源码理解的文章</strong></p><p>对于源码：一步一步慢慢来 该学的东西就学 不要纠结没用的例如学历 没法改变就不去改变</p><p>.md .sh 依赖那些中间件 中间件是否具备？ 如何去不使用中间件如何启动这个项目 分析目录结构（单体 还是微服务）包的作用 模块之间的耦合关系  利用isue 项目常见报错解决方式</p><p>组队开发的群聊看看能不能找到</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UDP socket的ack机制和丢包重传</title>
      <link href="/2024/11/23/backend/UDP_socket/"/>
      <url>/2024/11/23/backend/UDP_socket/</url>
      
        <content type="html"><![CDATA[<p>参考连接： <a href="https://juejin.cn/post/7263378772040122429">https://juejin.cn/post/7263378772040122429</a></p><h1 id="Go语言实现UDP-socket的ack机制和丢包重传"><a href="#Go语言实现UDP-socket的ack机制和丢包重传" class="headerlink" title="Go语言实现UDP socket的ack机制和丢包重传"></a>Go语言实现UDP socket的ack机制和丢包重传</h1><p>UDP 在通讯之前不需要建立连接 可以直接发送数据包 是一种无连接协议（常用于音视频传输）</p><p>但是在有些场景 即需要UDP传输也需要向TCP一样（TCP的可靠传输）</p><p>解决丢包问题：</p><p>1.添加 seq&#x2F;ack机制 确保数据发送到对端</p><p>什么是 seq&#x2F;ack机制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在TCP（传输控制协议）中，序号（Sequence Number，简称seq）和确认应答号（Acknowledgment Number，简称ack）是协议头部非常关键的字段，它们共同确保了TCP的可靠性和数据按顺序传输的特性。</span><br><span class="line"></span><br><span class="line">** Sequence Number **</span><br><span class="line">含义：序号是指一个TCP报文段中第一个字节的数据序列标识。它表示在一个TCP连接中，该报文段所携带的数据的开始位置。序号是用来保证数据传输的顺序性和完整性的。</span><br><span class="line"></span><br><span class="line">作用：在TCP连接建立时，双方各自随机选择一个初始序列号（ISN）。随后传输的每个报文段的序号将基于这个初始值递增，其增量为该报文段所携带的数据量（字节数）。通过这种方式，接收方可以根据序号重组乱序到达的数据片段，确保数据的正确顺序和完整性。如果接收到的报文段不连续，接收方可以通过TCP的重传机制请求发送方重新发送缺失的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Acknowledgment Number**</span><br><span class="line">含义：确认应答号是接收方期望从发送方接收到的下一个报文段的序号。它实质上是接收方告诉发送方：“我已经成功接收到了哪个序号之前的所有数据，请从这个序号开始发送后续的数据。”</span><br><span class="line"></span><br><span class="line">作用：确认应答号用于实现可靠性传输。当一个报文段被接收方正确接收时，接收方会发送一个ACK报文，其中包含的确认应答号是接收到的数据加上1（即接收方期望接收的下一个数据的序号）。通过检查这个确认应答号，发送方能够知道其发送的数据是否已被接收方正确接收，并据此决定是否需要重传某些数据段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ack和seq 保证了：</p><ul><li>确保数据的顺序性：即使数据片段在网络中的传输过程中顺序被打乱，接收方也能根据序号正确地重组这些数据。</li><li>检测丢包：如果发送方发送的数据长时间未被确认（即没有收到对应的ACK报文），它会判断这些数据可能已丢失，并将其重新发送。</li><li>实现流量控制和拥塞控制：通过调整发送未被确认数据的量（即控制窗口大小），TCP可以根据网络条件动态调整数据发送的速率，避免网络拥塞。</li></ul><h4 id="Golang的socket编程："><a href="#Golang的socket编程：" class="headerlink" title="Golang的socket编程："></a>Golang的socket编程：</h4><p>Go语言通过标准库中的<code>net</code>包来实现UDP和TCP的socket编程。<code>net</code>包提供了用于创建和管理网络连接的函数，以及用于进行数据传输的相关类型和方法，不同于C++需要手动设置和管理socket API，不论实现UDP还是TCP都可以直接使用封装好的方法进行操作，大大简化了socket编程：</p><h5 id="使用net包实现UDP通信"><a href="#使用net包实现UDP通信" class="headerlink" title="使用net包实现UDP通信"></a>使用net包实现UDP通信</h5><h6 id="1-client-go"><a href="#1-client-go" class="headerlink" title="1.client.go"></a>1.client.go</h6><p>1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建UDP连接到服务器的地址和端口号</span><br><span class="line">c, err := net.DialUDP(&quot;udp&quot;, nil, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(127, 0, 0, 1),</span><br><span class="line">Port: 8282,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;dial err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer c.Close() // 将 defer 放在 if 语句外面</span><br><span class="line"></span><br><span class="line">// 从标准输入读取用户输入的数据</span><br><span class="line">input := bufio.NewReader(os.Stdin)</span><br><span class="line">for &#123;</span><br><span class="line">// 读取用户输入知道遇见换行符</span><br><span class="line">s, err := input.ReadString(&#x27;\n&#x27;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;read from stdin failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将用户输入的数据转换为字节数组并通过UDP连接发送给服务器</span><br><span class="line">_, err = c.Write([]byte(s))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;send to server failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接收来自服务器的数据</span><br><span class="line">var buf [1024]byte</span><br><span class="line">n, addr, err := c.ReadFromUDP(buf[:])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;recv from udp failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印来自服务器的数据</span><br><span class="line">fmt.Printf(&quot;服务器 %v, 响应数据: %v\n&quot;, addr, string(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-server-go"><a href="#2-server-go" class="headerlink" title="2.server.go"></a>2.server.go</h6><p>首先创建UDP监听器监听指定IP和端口，等待连接客户端，连接后会读取客户端发来的数据并打印收到的数据，并将接收的响应信息返回发送给客户端，使用死循环使其能够持续获取客户端数据，同样实现了UDP的数据接收和发送，实现了简单的UDP服务器；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// udp server</span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建一个UDP监听器，监听本地IP地址的端口</span><br><span class="line">listen, err := net.ListenUDP(&quot;udp&quot;, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(127, 0, 0, 1),</span><br><span class="line">Port: 8282,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;listen failed,err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer listen.Close()</span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">var buf [1024]byte</span><br><span class="line">// 从UDP连接中读取数据到buf中，n为读取到的字节数，addr为数据发送者的地址</span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;read from udp failed,err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印接收到的数据</span><br><span class="line">fmt.Println(&quot;接收到的数据：&quot;, string(buf[:n]))</span><br><span class="line"></span><br><span class="line">// 将接收到的数据原样发送回给数据发送者</span><br><span class="line">_, err = listen.WriteToUDP(buf[:n], addr)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;write to %v failed,err:%v\n&quot;, addr, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：（好有趣）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; go run client.go</span><br><span class="line">hello</span><br><span class="line">服务器 127.0.0.1:8282, 响应数据: hello</span><br><span class="line"></span><br><span class="line">world</span><br><span class="line">服务器 127.0.0.1:8282, 响应数据: world</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> go run server.go</span><br><span class="line">接收到的数据： hello</span><br><span class="line"></span><br><span class="line">接收到的数据： world</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="基于seq-apk"><a href="#基于seq-apk" class="headerlink" title="基于seq&#x2F;apk"></a>基于seq&#x2F;apk</h5><p>client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dail err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">input := []<span class="type">string</span>&#123;<span class="string">&quot;Message1&quot;</span>, <span class="string">&quot;Message2&quot;</span>, <span class="string">&quot;Message3&quot;</span>, <span class="string">&quot;Message4&quot;</span>, <span class="string">&quot;Message5&quot;</span>&#125;</span><br><span class="line">seq := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, msg := <span class="keyword">range</span> input &#123;</span><br><span class="line">seq++</span><br><span class="line">message := Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Sending seq=%d: %s\n&quot;</span>, message.Seq, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送带有序列号的数据包</span></span><br><span class="line">_, err = c.Write(encodeMessage(message))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;send to server failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待ACK，设置超时时间</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">c.SetReadDeadline(time.Now().Add(<span class="number">5</span> * time.Second))</span><br><span class="line">n, _, err := c.ReadFromUDP(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ACK not received. Timeout or Error.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ack := decodeMessage(buf[:n])</span><br><span class="line"><span class="keyword">if</span> ack.Seq == seq+<span class="number">1</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ACK = %d\n&quot;</span>, ack.Seq)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid ACK received. Retry.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message2 <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;listen failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read from udp failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理接收到的数据，提取序列号和消息文本</span></span><br><span class="line">message := decodeMessage1(buf[:n])</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received seq=%d from %v: %s\n&quot;</span>, message.Seq, addr, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ACK回复给客户端，ACK=Seq+1</span></span><br><span class="line">ack := Message2&#123;Seq: message.Seq + <span class="number">1</span>, Msg: <span class="string">&quot;ACK&quot;</span>&#125;</span><br><span class="line">_, err = listen.WriteToUDP(encodeMessage1(ack), addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write to %v failed,err:%v\n&quot;</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage1</span><span class="params">(msg Message2)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage1</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message2 &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message2&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题核心：在同一文件夹内，Go 默认将所有文件视为同一包的一部分，可能导致重复定义或未定义的错误。<br>推荐解决方法：<br>分文件夹运行。<br>提取共享逻辑到单独的文件。<br>运行时显式指定所有 .go 文件。<br>额外改进：通过参数区分服务端和客户端运行模式，进一步优化程序结构。</p><p>，服务器监听的端口可能是某个固定端口（例如 12345），而客户端的UDP数据包来自 127.0.0.1:59653。这意味着：<br>UDP允许客户端选择任意可用的端口号作为源端口，并将数据包发送到服务器的监听端口。这也是为什么你看到不同的端口号。</p><hr><h5 id="4-实现超时重传"><a href="#4-实现超时重传" class="headerlink" title="4.实现超时重传"></a>4.实现超时重传</h5><p>最简单的方法就是当超时没有收到ack回复或者ack回复错误乱序时，阻塞后续发包，先进行重传，<br>把丢失的包重传后再继续发包，因此主要是在客户端更改一些发包的逻辑，服务端则没有变化；</p><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dial,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例数据</span></span><br><span class="line">input := []<span class="type">string</span>&#123;<span class="string">&quot;Message 1&quot;</span>, <span class="string">&quot;Message 2&quot;</span>, <span class="string">&quot;Message 3&quot;</span>, <span class="string">&quot;Message 4&quot;</span>, <span class="string">&quot;Message 5&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, msg := <span class="keyword">range</span> input &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">message := Message&#123;Seq: seq + <span class="number">1</span>, Msg: msg&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Sending seq=%d: %s\n&quot;</span>, message.Seq, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送带有序列号的数据包</span></span><br><span class="line">_, err := c.Write(encodeMessage(message))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;send to server failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始等待ACK，设置超时时间</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">c.SetReadDeadline(time.Now().Add(<span class="number">5</span> * time.Second))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环等待ACK，直到收到正确的ACK或超时</span></span><br><span class="line">n, _, err := c.ReadFromUDP(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 超时或发生错误，需要重传</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ACK not received. Timeout or Error. Retrying...&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//解码从服务器传来的ack</span></span><br><span class="line">ack := decodeMessage(buf[:n])</span><br><span class="line"><span class="keyword">if</span> ack.Seq == seq+<span class="number">2</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ACK = %d\n&quot;</span>, ack.Seq)</span><br><span class="line"><span class="comment">// 收到正确的ACK，跳出内部循环，继续发送下一个消息</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 收到错误的ACK，继续等待，内部循环会重发相同的消息</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid ACK received. Waiting for correct ACK...&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;listen failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read from udp failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以20%的概率模拟丢包</span></span><br><span class="line"><span class="keyword">if</span> rand.Float32() &lt; <span class="number">0.2</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;From %v lost package\n&quot;</span>, addr)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理接收到的数据，解码字节流 提取序列号和消息文本</span></span><br><span class="line">message := decodeMessage(buf[:n])</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received seq=%d from %v: %s\n&quot;</span>, message.Seq, addr, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ACK回复给客户端，ACK=Seq+1</span></span><br><span class="line">ack := Message&#123;Seq: message.Seq + <span class="number">1</span>, Msg: <span class="string">&quot;ACK&quot;</span>&#125;</span><br><span class="line"><span class="comment">//写入ack向UDP连接中</span></span><br><span class="line">_, err = listen.WriteToUDP(encodeMessage(ack), addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write to %v failed,err:%v\n&quot;</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述方法实现的丢包重传虽然能够正常工作，但是发送端使用双层循环嵌套，并且每次丢包都阻塞了后续发包，这样会导致重传的效率很低，只适用于小宽带低延时的情况，而且超时重传容易产生误判，主要有以下两种情况：</p><p>对方收到了数据包，但是ack发送途中丢失，其实就是我服务器模拟丢包的情况，服务器可能收到了数据，但是因为某种原因ack没能正确发送；<br>ack在回传的途中，但是时间已经超过了发送端的ack等待时间即超过了一次RTO，这样也会导致接收端收到数据却仍然重传的问题。</p><p>学习 滑动窗口 拥塞控制 优化一些东西 深入理解seq&#x2F;ack的原理和超时重传的逻辑 Go语言进行socket编程的方法 UDP和TCP的一些知识</p><p>借鉴文章：<a href="https://blog.csdn.net/weixin_41500064/article/details/135119715">https://blog.csdn.net/weixin_41500064/article/details/135119715</a></p><h5 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h5><p>作用：为了解决发送方和接收方速度不同而导致的数据丢失问题,当发送方发送的太快,接收方来不及接受就会导致数据丢失；</p><p>方式：由接收端采用滑动窗口的形式，告知发送方允许&#x2F;停止发包解决TCP丢包问题。</p><h5 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h5><p>作用：为了解决过多的数据注入到网络导致网络崩溃和超负荷问题；</p><p>方式：由发送方采用拥塞窗口的形式去判断网络状态，从而采取不同算法执行TCP动态发包解决网络整体质量问题。</p><p>典型的场景如以太网场景中10G设备向1G设备发TCP包：<br>10G网卡 10Gbps 持续发送TCP包 交换机 以 1Gbps每秒接收TCP包<br>TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流控制。<br>接收端主机向发送端主机通知自已可以接收数据的大小；<br>是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。窗口大小的值由接收端主机决定，而在TCP 首部中，专门有一个字段用来通知窗口大小：<br>接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高。<br>发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也就形成了一个完整的TCP流控制(流量控制)。<br>当Window&#x3D;0时，即告知发送方停止发送数据。</p><h5 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h5><p>发送方先探测网络拥塞程度，并不是一开始就发送大量的数据，发送方会根据拥塞程度增大拥塞窗口cwnd。<br>拥塞窗口cwnd值是几就能发送几个数据段</p><h5 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h5><p>继上图达到cwnd≥ssthresh后采用该算法用来控制拥塞窗口的增长速率。</p><p>计算方法：每经过一个传输轮次cwnd值加1，让cwnd值呈线性缓慢增大</p><h5 id="拥塞发生"><a href="#拥塞发生" class="headerlink" title="拥塞发生"></a>拥塞发生</h5><p>当网络发生拥塞丢包时（如图假定cwnd&#x3D;24），会有两种情况：</p><p>超时重传（1988年TCP Tahoe版本，已废弃不用）</p><p>更新后的 ssthresh 值变为 12(即为出现超时时的窗口数值 24 的一半)，拥窗口再重新设置为1<br>并执行慢开始算法。当cwnd &#x3D; ssthresh &#x3D; 12 时改为执行拥塞避免算法拥塞窗口按线性规律增长，<br>每经过一个往返时间增加一个MSS的大小。在TCP拥塞控制的文献中经常可看见“乘法减小”(Multiplicative Decrease)和“加法增大”(Additive Increase)这样的提法。<br>“乘法减小”是指不论在开始阶段还是拥塞避免阶段，只要出现超时(即很可能出现了网络拥塞)，就把慢开始门限值 ssthresh 减半，即设置为当前的拥塞窗口的一半(与此同时，执行慢开始算法)。<br>而“加法增大”是指执行拥塞避免算法后，使拥塞窗口缓慢增大，以防止网络过早出现拥塞。上面两种算法合起来常称为 AIMD算法(加法增大乘法减小)。</p><h5 id="快重传与快恢复"><a href="#快重传与快恢复" class="headerlink" title="快重传与快恢复"></a>快重传与快恢复</h5><p>超时重传算法直接把cwnd减小到1太过强烈，若还能收到连续3个ACK说明网络质量没那么差。同时采用快重传和快恢复算法，过程如下：</p><p>（1）当发送方连续收到3个重复确认时即执行“乘法减小”算法，把慢开始门限ssthresh 减半；</p><p>（2）由于发送方现在认为网络不那么差，于是把cwnd值设置为开始门限ssthresh 减半后的数值；</p><p>（3）开始执行拥塞避免算法 (“加法增大”)使拥塞窗口缓慢地线性增大。</p><hr><h4 id="12-25-日"><a href="#12-25-日" class="headerlink" title="12.25 日"></a>12.25 日</h4><p>根据计算机网络这本书，深入了解UDP套接字编程：</p><p>整体的一个过程： 进程间彼此通过向套接字发送报文来进行通信</p><p>一个主机-》多个进程 1个进程-》多个套接字</p><p>帮助记忆： 进程是一间房子 而 套接字是房子门 还需要一个 端口 来识别我具体要将信息发送到哪间房子，也就是具体的房间号（端口）</p><ol><li>客户从键盘键入数据，并向服务器发送数据（将数据编码成字节流），</li><li>服务器接收数据（接收字节流）-》并将其解码为原始客户端输入的数据 （并把小写转换为大写）</li><li>服务器将修改的数据（编码为字节流）发送回客户端</li><li>客户端接收数据后解码 并显示在屏幕上</li></ol><p>接收源地址（ip+端口号）和分组</p>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习</title>
      <link href="/2024/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/computer_operate/"/>
      <url>/2024/11/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/computer_operate/</url>
      
        <content type="html"><![CDATA[<hr><p>6.cs081os学习</p><p>感谢：</p><p>参考资料：</p><p><a href="https://www.geeksforgeeks.org/pipe-system-call/">https://www.geeksforgeeks.org/pipe-system-call/</a></p><p>很好的文章：</p><p><a href="https://swtch.com/~rsc/thread/">https://swtch.com/~rsc/thread/</a></p><p>同步机制：<a href="https://zybtree.github.io/2020/08/12/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/">https://zybtree.github.io/2020/08/12/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</a></p><p>参考答案： <a href="https://github.com/relaxcn/xv6-labs-2022-solutions/blob/main/doc/utils.md">https://github.com/relaxcn/xv6-labs-2022-solutions/blob/main/doc/utils.md</a></p><p>学习链接： <a href="https://pdos.csail.mit.edu/6.828/2021/schedule.html">https://pdos.csail.mit.edu/6.828/2021/schedule.html</a></p><hr><p>直接从进程与线程入手</p><h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><p>单独的CPU变换成多个虚拟的CPU</p><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><p>当网页请求进入的时候 先查看 网页是否在缓存中 如果不是<br>启动一个磁盘请求用来获取网页  磁盘请求会花费很多时间 等待的过程中会有更多的请求进入<br>每个进程有它自己的虚拟的CPU 真正的CPU在进程之间来回切换<br>需要一些方法例如多个磁盘 模拟控制并发 进程就能发挥作用<br>来回切换称： 多道程序设计</p><p>支持多进程的多道程序系统<br>一个核一次也只能运行一个进程</p><p><img src="/study_photo2/operater1.jpg" alt="internet.jpg"></p><hr><h4 id="12-1日"><a href="#12-1日" class="headerlink" title="12.1日"></a>12.1日</h4><h5 id="一-进程的并发执行"><a href="#一-进程的并发执行" class="headerlink" title="一.进程的并发执行"></a>一.进程的并发执行</h5><ol><li>并发</li></ol><ul><li>进程的执行是间断的</li></ul><p>每个进程的生命周期期间CPU执行 由于某种原因暂停 每个进程执行是间断性的</p><ul><li>进程的执行速度是不可预测的</li></ul><p>进程调度，有其他事件的发生，每个进程上cpu执行坑你一点时间听着再接着运行</p><ol start="2"><li>共享</li></ol><ul><li>进程线程之间的制约性<br>在一个并发环境下多个进程或者线程之间会共享某些资源，在这些资源的使用过程中会产生进程之间的一种制约性。<br>比如当一个进程享用打印机这个资源，另外一个进程在第一个进程没有释放这个资源的前提之下就得不到这个资源，那就得等待。</li></ul><ol start="3"><li>不确定性</li></ol><ul><li>进程执行的结果与其执行的相对速度有关</li></ul><p>进程执行的结果和它的相对执行速度是有关系的，因此在不同的执行顺序的情况下，进程的执行结果也是不确定的。</p><h5 id="二-进程互斥"><a href="#二-进程互斥" class="headerlink" title="二.进程互斥"></a>二.进程互斥</h5><p>由于各进程要求使用共享资源(变量、文件等)， 而这些资源需要排他性使用，<br>各进程之间竞争使用这些资源，这一关系称为进程互斥。</p><ul><li>临界资源<br>系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源或共享变量。<br>这些程序片段，分散在不同的进程里，它们的共同的特点是对同一个共享变量进行一些操作<br>这一段代码，和另外一个进程的这一段代码互为临界区，互为互斥区</li></ul><p><img src="/study_photo2/operater2.jpg" alt="internet.jpg"></p><h4 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h4><p>计算机基本结构：运算器 控制器 存储器 输入设备 输出设备</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>程序和数据都是存储在内存，存储区域是线性的</p><p>存储数据的基本单位是 字节 每一个字节对应一个内存地址</p><p>最后一个地址为内存总字节数 -1 结构就像数序中的数据</p><h5 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h5><p>也就是cpu：<br>32位cpu一次可以计算4个字节<br>64位cpu一次可以计算8个字节 位数也就是cpu的位宽 代表cpu一次可以计算的数据量</p><p>8 位的 CPU，那么一次只能计算 1 个字节也就是0~255 范围内的数值 那么 32位也就是一次可以计算出 2的32次方这么大的数值<br>cpu内部组件：寄存器，控制单元和逻辑运算单元</p><p>为什么有了内存还需要寄存器？</p><p>寄存器种类（通用寄存器）（程序计数器）（指令寄存器）</p><p>因为： 内存离 CPU 太远了，而寄存器就在 CPU 里，紧挨着控制单元和逻辑运算单元，自然计算时速度会很快。</p><h6 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h6><p>总线用于cpu和内存以及其他设备之前的通信</p><p>（地址总线）：指定CPU将要操作的内存地址</p><p>（数据总线）：用于读写内存的数据</p><p>（控制总线）： 发送和接收信号，比如中断，设备复位等信号</p><p>CPU 要读写内存数据的时候：</p><ul><li>首先要通过「地址总线」来指定内存的地址；</li><li>然后通过「控制总线」控制是读或写命令；</li><li>最后通过「数据总线」来传输数据；</li></ul><h5 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h5><p>输入设备向计算机输入数据，计算机经过计算后，把数据输出给输出设备。<br>如果输入设备是键盘，按下按键时是需要和 CPU 进行交互的，这时就需要用到控制总线了。</p><h5 id="线路位宽与CPU位宽"><a href="#线路位宽与CPU位宽" class="headerlink" title="线路位宽与CPU位宽"></a>线路位宽与CPU位宽</h5><p>数据是如何通过线路传输的呢<br>操作电压，低电压表示 0，高压电压则表示 1</p><p>101 二进制数据，十进制则表示 5，如果只有一条线路，就意味着每次只能传递 1 bit 的数据， 那么传输 101 这个数据，就需要 3 次才能传输完成，这样的效率非常低。</p><p>增加线路，数据并行传输</p><p>CPU 想要操作「内存地址」就需要「地址总线」：</p><p>地址总线只有 1 条，那每次只能表示 「0 或 1」这两种地址  最大数量为 2（2^1）个</p><p>如果地址总线有 2 条，那么能表示 00、01、10、11 这四种地址  最大数量为 4（2^2）个</p><p>CPU 操作 4G 大的内存，那么就需要 32 条地址总线，因为 2 ^ 32 &#x3D; 4G</p><p>CPU位宽最好不要小于线路位宽</p><h5 id="a-little-operater-systerm"><a href="#a-little-operater-systerm" class="headerlink" title="a little operater systerm"></a>a little operater systerm</h5><p>链接 ： <a href="https://lwn.net/Articles/250967/">https://lwn.net/Articles/250967/</a></p><p><img src="/study_photo2/cpumemory.4.png" alt="internet.jpg"></p><p>所有 CPU（前面的示例中为两个，但可以有更多）都通过公共总线（前端总线，FSB）连接到北桥。除其他外，北桥还包含内存控制器，<br>其实现决定了计算机使用的 RAM 芯片的类型。不同类型的 RAM，例如 DRAM、Rambus 和 SDRAM，需要不同的内存控制器。</p><p>要访问所有其他系统设备，北桥必须与南桥进行通信。南桥通常称为 I&#x2F;O 桥，通过各种不同的总线处理与设备的通信。如今，PCI、PCI Express、SATA 和 USB 总线最为重要，但南桥也支持 PATA、IEEE 1394、串行和并行端口。<br>较旧的系统具有连接到北桥的 AGP 插槽。这样做是出于与北桥和南桥之间的连接速度不够快相关的性能原因。然而，如今 PCI-E 插槽全部连接到南桥。</p><hr><h2 id="让终端显示出自己说的话"><a href="#让终端显示出自己说的话" class="headerlink" title="让终端显示出自己说的话"></a>让终端显示出自己说的话<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">root@xiaoxinxiaohao:~# vim .bashrc</span><br><span class="line">root@xiaoxinxiaohao:~# source ~/.bashrc</span><br><span class="line">赵忠鹤闪亮登场</span><br><span class="line">Today is: Fri Dec  6 05:12:09 PM CST 2024</span><br><span class="line">今天也要充满活力哇咔咔</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><p>听从了一些学习的建议，带着问题去读书，想学什么，去书中学，带着问题去读书</p><hr><p>12.16日</p><h4 id="看到了b站的一个关于Go并发设计"><a href="#看到了b站的一个关于Go并发设计" class="headerlink" title="看到了b站的一个关于Go并发设计"></a>看到了b站的一个关于Go并发设计</h4><p>了解协程： 协程是一种用户级的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈</p><p>主流语言基本上都选择了多线程作为并发设施</p><p>线程相关的概念就是抢占式多任务（Preemptive multitasking），而与协程相关的是协作式多任务</p><p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断 协程默认会做好全方位保护， 以防止中断</p><h5 id="协程相比于多线程的优点"><a href="#协程相比于多线程的优点" class="headerlink" title="协程相比于多线程的优点"></a>协程相比于多线程的优点</h5><p>无需系统内核的上下文切换，减小开销； 因为：协程它不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由开发人员决定的</p><p>无需原子操作锁定及同步的开销，不用担心资源共享的问题</p><p>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>无法使用 CPU 的多核 因为： 协程的本质是个单线程</li><li>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp</li><li><strong>协程的概念最核心的点其实就是函数或者一段程序能够被挂起（说暂停其实也没啥问题），待会儿再恢复</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20岁生日</title>
      <link href="/2024/11/16/%E7%94%9F%E6%B4%BB/live/"/>
      <url>/2024/11/16/%E7%94%9F%E6%B4%BB/live/</url>
      
        <content type="html"><![CDATA[<h2 id="生活的意义就是在于享受每一天，有开心，有难过，有惊喜！-享受它，生活就是这样！"><a href="#生活的意义就是在于享受每一天，有开心，有难过，有惊喜！-享受它，生活就是这样！" class="headerlink" title="生活的意义就是在于享受每一天，有开心，有难过，有惊喜！ 享受它，生活就是这样！"></a>生活的意义就是在于享受每一天，有开心，有难过，有惊喜！ 享受它，生活就是这样！</h2><p>有了博客可以让时间更具象化，留住每一刻，想看的时候翻一翻 感受真的不一样！</p><p>本来不想过生日的，但还是被寝室的兄弟们发现了哈哈哈哈好开心呢上大学的两年都收到了寝室5个兄弟给我送的蛋糕<br>感谢你们啦，尽管离开了家还是有人陪你过生日，非常开心，还是你们陪我走完大学四年<br>上高中的时候也没怎么正经过过生日，到了大学是你们让我的今天变得过呢更有意义，尽管在生活中有磕碰，但那是难以避免的！希望你们每个人以后路越来越好</p><p>也是收到家里人的好多红包啊哈哈啊哈好开心！ 感谢家人时刻牵挂着我！</p><h3 id="2023年的今天"><a href="#2023年的今天" class="headerlink" title="2023年的今天"></a>2023年的今天</h3><p><img src="/live/birsday.jpg" alt="生日"></p><h3 id="2024年的今天"><a href="#2024年的今天" class="headerlink" title="2024年的今天"></a>2024年的今天</h3><p><img src="/live/cake.jpg" alt="蛋糕"></p><hr><p>每年的生日许愿都是很广泛的 我姐说那是没有意义的哈哈哈一定要为自己许个愿望在新的一年实现它！</p><h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="/live/birsday.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><pre><code>11.16日</code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>7_days_golang学习</title>
      <link href="/2024/11/16/go/Goalng_Framework/"/>
      <url>/2024/11/16/go/Goalng_Framework/</url>
      
        <content type="html"><![CDATA[<h2 id="通过学习项目-7-days-golang搭建各种自己的框架了解一些网络工作原理和知识"><a href="#通过学习项目-7-days-golang搭建各种自己的框架了解一些网络工作原理和知识" class="headerlink" title="通过学习项目 7_days_golang搭建各种自己的框架了解一些网络工作原理和知识"></a>通过学习项目 7_days_golang搭建各种自己的框架了解一些网络工作原理和知识</h2><p>学习geektutu源代码：<a href="https://github.com/geektutu/7days-golang">https://github.com/geektutu/7days-golang</a></p><p>跟着学习的项目代码已经放在: <a href="https://github.com/Whuichenggong/Study_Go">https://github.com/Whuichenggong/Study_Go</a></p><h3 id="1-gee-go"><a href="#1-gee-go" class="headerlink" title="1.gee.go"></a>1.gee.go</h3><p>关键代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义了类型HandlerFunc，这是提供给框架用户的，用来定义路由映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Engine中，添加了一张路由映射表router</span></span><br><span class="line"><span class="comment">// key 由请求方法和静态路由地址构成，例如GET-/、GET-/hello、POST-/hello</span></span><br><span class="line"><span class="comment">// 如果请求方法不同,可以映射不同的处理方法(Handler)，value 是用户映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">key := method + pattern</span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户调用(*Engine).GET()方法时，会将路由和处理方法注册到映射表 router 中，(*Engine).Run()方法，是 ListenAndServe 的包装。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine实现的 ServeHTTP 方法的作用就是，解析请求的路径，查找路由映射表，如果查到，就执行注册的处理方法。如果查不到，就返回 404 NOT FOUND 。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;404 Not Found: %s\n&quot;</span>, req.URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-go-mod代码"><a href="#2-go-mod代码" class="headerlink" title="2.go.mod代码"></a>2.go.mod代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module github.com/Whuichenggong</span><br><span class="line"></span><br><span class="line">go 1.22.1</span><br><span class="line"></span><br><span class="line">require gee v0.0.0</span><br><span class="line"></span><br><span class="line">replace gee =&gt; ./gee</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>replace gee &#x3D;&gt; .&#x2F;gee</p><p>这是一个替换指令，它告诉 Go 工具链用本地相对路径 .&#x2F;gee 中的 gee 包替换远程需要的 gee 包。<br>这意味着，尽管 require 指令可能指向一个特定的远程版本或分支，<br>这个 replace 指令实际上将使用当前目录下的 gee 文件夹中的代码。</p><h4 id="2-1初始化-Go-模块："><a href="#2-1初始化-Go-模块：" class="headerlink" title="2.1初始化 Go 模块："></a>2.1初始化 Go 模块：</h4><p>如果你的项目还没有被初始化为 Go 模块，你需要先在项目的根目录下运行以下命令来初始化它：</p><p><code>go mod init &lt;module-name&gt;</code></p><p>替换 <module-name> 为你的模块名称。例如，如果你的项目名称是 example，你会运行：</p><p><code>go mod init example</code></p><h3 id="3-main-go"><a href="#3-main-go" class="headerlink" title="3.main.go"></a>3.main.go</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;gee&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r := gee.New()</span><br><span class="line">r.GET(&quot;/&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;URL.Path = %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(&quot;/hello&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v := range req.Header &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;Header[%q] = %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(&quot;:9999&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h5><p>测试 POST 请求<br>启动服务器后，测试 POST 请求可以使用以下工具：</p><p>方法 1: 使用 curl<br>执行以下命令发送 POST 请求：</p><p>curl -X POST <a href="http://localhost:8080/submit">http://localhost:8080/submit</a></p><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">key := method + pattern</span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.Method + req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">http.NotFound(w, req)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func main() {<br>engine :&#x3D; New()</p><pre><code>// 注册一个 POST 路由engine.POST(&quot;/submit&quot;, func(w http.ResponseWriter, req *http.Request) &#123;    // 读取请求体数据    body, err := ioutil.ReadAll(req.Body)    if err != nil &#123;        http.Error(w, &quot;Failed to read request body&quot;, http.StatusInternalServerError)        return    &#125;    // 响应请求体内容    fmt.Fprintf(w, &quot;Received: %s&quot;, string(body))&#125;)// 启动服务器engine.Run(&quot;:8080&quot;)</code></pre><p>}<br>测试：<br>启动程序后，用 curl 发送 POST 请求并附带数据：</p><p>b<br>curl -X POST -d “data&#x3D;HelloWorld” <a href="http://localhost:8080/submit">http://localhost:8080/submit</a><br>服务器返回：</p><p>kotlin</p><p>Received: data&#x3D;HelloWorld</p><h4 id="ServeHTTP好像有点问题"><a href="#ServeHTTP好像有点问题" class="headerlink" title="ServeHTTP好像有点问题"></a>ServeHTTP好像有点问题</h4><p>main.go<br>附带了对代码的理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义了类型HandlerFunc，这是提供给框架用户的，用来定义路由映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Engine中，添加了一张路由映射表router</span></span><br><span class="line"><span class="comment">// key 由请求方法和静态路由地址构成，例如GET-/、GET-/hello、POST-/hello</span></span><br><span class="line"><span class="comment">// 如果请求方法不同,可以映射不同的处理方法(Handler)，value 是用户映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码的作用将HTTP请求的路由和对应的处理函数注册到路由表中的核心方法</span></span><br><span class="line"><span class="comment">// pattern路由路径</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line"><span class="comment">//将HTTp方法和路径拼接成唯一一个键 作为路由表的router的键</span></span><br><span class="line">key := method + pattern</span><br><span class="line"><span class="comment">//将处理函数 handler 存入路由表中，关联到对应的路由键。</span></span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户调用 addRoute(&quot;GET&quot;, &quot;/home&quot;, someHandlerFunc) 在 engine.router 映射表中，会存储一个键值对：</span></span><br><span class="line"><span class="comment">// 调用engine.GET(&quot;/home&quot;, someHandlerFunc)： 实际是 等价 engine.addRoute(&quot;GET&quot;, &quot;/home&quot;, someHandlerFunc)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码隐藏了调用ServeHTTP</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine实现的 ServeHTTP 方法的作用就是，解析请求的路径，查找路由映射表，如果查到，就执行注册的处理方法。如果查不到，就返回 404 NOT FOUND 。</span></span><br><span class="line"><span class="comment">// 不需要显式调用 ServeHTTP</span></span><br><span class="line"><span class="comment">// 在 Go 的 HTTP 框架中，ServeHTTP 是 http.Handler 接口的约定方法。当你把 Engine 作为服务器的处理器传递时，它会被 ListenAndServe 自动调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;404 Not Found: %s\n&quot;</span>, req.URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>在 ServeHTTP 中，当前只从 req.URL.Path 获取路径，<br>而没有结合 req.Method，会导致不同的 HTTP 方法（如 GET 和 POST）冲突或无法正确匹配。<br>addRoute 方法仅使用了路径（pattern）和方法（method）拼接为路由键，例如：GET&#x2F;home。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">    key := method + <span class="string">&quot;-&quot;</span> + pattern <span class="comment">// 区分 HTTP 方法和路径</span></span><br><span class="line">    engine.router[key] = handler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改的这段代码<br>原来只使用了路径（req.URL.Path）作为路由键。例如：</p><p>请求路径 &#x2F;hello 的键为 &#x2F;hello。<br>不区分 GET &#x2F;hello 和 POST &#x2F;hello，它们会共用同一个路由键 &#x2F;hello。<br>建议的代码<br>使用 HTTP 方法和路径 拼接成路由键。例如：</p><p>GET &#x2F;hello 的键为 GET-&#x2F;hello。<br>POST &#x2F;hello 的键为 POST-&#x2F;hello。<br>这样可以区分不同方法对应的路由处理函数。</p><p>与gin框架启动很相似</p><hr><p>对Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter。<br>但是这两个对象提供的接口粒度太细，比如我们要构造一个完整的响应，需要考虑消息头(Header)和消息体(Body)，而 Header 包含了状态码(StatusCode)，<br>消息类型(ContentType)等几乎每次请求都需要设置的信息。因此，如果不进行有效的封装， 那么框架的用户将需要写大量重复，繁杂的代码<br>且容易出错。针对常用场景，能够高效地构造出 HTTP 响应是一个好的框架必须考虑的点。</p><p>代码要学会封装 否则代码整洁度看起来还是会差很多的 对于别人理解一会更方便</p><p>为什么要添加context  对于框架来说，还需要支撑额外的功能。例如，将来解析动态路由&#x2F;hello&#x2F;:name，参数:name的值放在哪呢？<br>再比如，框架需要支持中间件，那中间件产生的信息放在哪呢？</p><p>contxet保留了你想寻找的一些东西<br>拓展性和复杂性留在内部<br>对外简化了接口。</p><p>Context 的作用是为每个 HTTP 请求提供一个上下文对象，<br>方便操作请求和响应，并提供了一些简化开发的工具方法。<br>通过 Context 统一管理 HTTP 请求和响应的逻辑。</p><p>可以把 Context 看作是：</p><p>一个请求的容器： 它封装了与 HTTP 请求相关的所有信息，并提供了一些方法让你更轻松地操作这些信息。</p><p>开发者和 HTTP 请求的桥梁： 开发者通过 Context 与客户端通信，包括读取请求信息和发送响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(c *Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取查询参数</span></span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 JSON 响应</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        c.JSON(http.StatusOK, H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.String(http.StatusBadRequest, <span class="string">&quot;Name is required&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>深入框架原理：<br>阅读 Gin、Echo 等框架的源码，了解它们如何设计和扩展 Context。</li></ol><p>尝试扩展功能：<br>在 Context 上添加自定义方法，比如记录日志、追踪请求 ID 等。</p><ol start="2"><li>http.ResponseWriter 和 *http.Request 的实际意义<br>http.ResponseWriter</li></ol><p>作用：<br>代表服务端用来写入 HTTP 响应的接口。开发者通过它向客户端返回数据（如响应头、响应状态码、响应体等）。<br>实际应用：<br>在服务端，http.ResponseWriter 将生成的 HTTP 响应数据写入 TCP 连接的输出流，客户端会接收到这些数据并解析呈现。<br>*http.Request</p><p>作用：<br>表示客户端发来的 HTTP 请求，包含了所有请求相关的信息（如 URL、方法、头部、表单数据、Cookie、Body 等）。<br>实际应用：<br>服务端根据 *http.Request 的内容（路径、方法等），判断客户端的需求并生成相应的响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置状态码</span></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入响应体</span></span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, %s!\n&quot;</span>, req.URL.Query().Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端请求示例：</p><p>浏览器访问 <a href="http://localhost:8080/?name=zhaozhonghe">http://localhost:8080/?name=zhaozhonghe</a></p><p>服务端响应：</p><p>HTTP&#x2F;1.1 200 OK &#x2F;&#x2F;设置的状态码 200<br>Content-Type: text&#x2F;plain &#x2F;&#x2F;设置的请求头 响应过来了 并且返回到了 客户端页面<br>Content-Length: 12</p><p>Hello, zhaozhonghe! &#x2F;&#x2F; 读取 HTTP 请求 将数据写入响应体，通过 w 发送给客户端。</p><hr><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="1-添加context"><a href="#1-添加context" class="headerlink" title="1.添加context"></a>1.添加context</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给map[string]interface&#123;&#125;起了一个别名gee.H，构建JSON数据时，显得更简洁。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context目前只包含了http.ResponseWriter和*http.Request，另外提供了对 Method 和 Path 这两个常用属性的直接访问。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">Writer http.ResponseWriter</span><br><span class="line">Req    *http.Request</span><br><span class="line"></span><br><span class="line">Path   <span class="type">string</span></span><br><span class="line">Method <span class="type">string</span></span><br><span class="line"></span><br><span class="line">StatusCode <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> *Context &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">Writer: w,</span><br><span class="line">Req:    req,</span><br><span class="line">Path:   req.URL.Path,</span><br><span class="line">Method: req.Method,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供了访问Query和PostForm参数的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Status(code <span class="type">int</span>) &#123;</span><br><span class="line">c.StatusCode = code</span><br><span class="line">c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> SetHeader(key <span class="type">string</span>, value <span class="type">string</span>) &#123;</span><br><span class="line">c.Writer.Header().Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供了快速构造String/Data/JSON/HTML响应的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> String(code <span class="type">int</span>, format <span class="type">string</span>, values ...<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write([]<span class="type">byte</span>(fmt.Sprintf(format, values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">encoder := json.NewEncoder(c.Writer)</span><br><span class="line"><span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Data(code <span class="type">int</span>, data []<span class="type">byte</span>) &#123;</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> HTML(code <span class="type">int</span>, html <span class="type">string</span>) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write([]<span class="type">byte</span>(html))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-添加router"><a href="#2-添加router" class="headerlink" title="2.添加router"></a>2.添加router</h4><p>想 路由需要的参数 路径 方法 处理函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">handlers <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;router&#123;handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Route %4s - %s&quot;</span>, method, pattern)</span><br><span class="line">key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> handle(c *Context) &#123;</span><br><span class="line">key := c.Method + <span class="string">&quot;-&quot;</span> + c.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := r.handlers[key]; ok &#123;</span><br><span class="line">handler(c)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>r.handlers[key] &#x3D; handler 这段代码将key也就是路径 和 处理函数关连到了一起</p><p>post用终端请求<br>1.<br>Invoke-WebRequest -Uri “<a href="http://localhost:9999/login">http://localhost:9999/login</a>“ -Method POST -Body “username&#x3D;zhaozhonghe&amp;password&#x3D;zzh123456”</p><ol start="2"><li>curl.exe -X POST -d “username&#x3D;zhaozhonghe&amp;password&#x3D;zzh123456” <a href="http://localhost:9999/login">http://localhost:9999/login</a><br>返回结果<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>测试第二天的gee<br>第一种返回结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">StatusCode        : 200</span><br><span class="line">StatusDescription : OK</span><br><span class="line">Content           : &#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br><span class="line"></span><br><span class="line">RawContent        : HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 50</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 26 Nov 2024 13:43:37 GMT</span><br><span class="line"></span><br><span class="line">                    &#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br><span class="line"></span><br><span class="line">Forms             : &#123;&#125;</span><br><span class="line">Headers           : &#123;[Content-Length, 50], [Content-Type, application/json], [Date, Tue, 26 Nov 2024 13:43:37 GMT]&#125;</span><br><span class="line">Images            : &#123;&#125;</span><br><span class="line">InputFields       : &#123;&#125;</span><br><span class="line">Links             : &#123;&#125;</span><br><span class="line">ParsedHtml        : mshtml.HTMLDocumentClass</span><br><span class="line">RawContentLength  : 50</span><br></pre></td></tr></table></figure><h4 id="gee-go"><a href="#gee-go" class="headerlink" title="gee.go"></a>gee.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc defines the request handler used by gee</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine implement the interface of ServeHTTP</span></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router *router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: newRouter()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.router.addRoute(method, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET defines the method to add GET request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST defines the method to add POST request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run defines the method to start a http server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">c := newContext(w, req)</span><br><span class="line">engine.router.handle(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>我们用了一个非常简单的map结构存储了路由表，使用map存储键值对，索引非常高效，但是有一个弊端，键值对的存储的方式，只能用来索引静态路由。<br>那如果我们想支持类似于&#x2F;hello&#x2F;:name这样的动态路由怎么办呢？<br>所谓动态路由，即一条路由规则可以匹配某一类型而非某一条固定的路由。<br>例如&#x2F;hello&#x2F;:name，可以匹配&#x2F;hello&#x2F;geektutu、hello&#x2F;jack等。<br>请等待~~~</p><p>11.21日看到了字节的课 是关于动态路由的设计 前缀匹配树</p><h4 id="router-go"><a href="#router-go" class="headerlink" title="router.go"></a>router.go</h4><p>前缀树路由： 重点学习这个数据结构</p><p>bilibili: <a href="https://www.bilibili.com/video/BV1wT4y1x7xm?t=45.6">https://www.bilibili.com/video/BV1wT4y1x7xm?t=45.6</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">roots    <span class="keyword">map</span>[<span class="type">string</span>]*node <span class="comment">//增加的</span></span><br><span class="line">handlers <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;router&#123;</span><br><span class="line">roots:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*node),</span><br><span class="line">handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only one * is allowed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parsePattern</span><span class="params">(pattern <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">vs := strings.Split(pattern, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">parts := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> vs &#123;</span><br><span class="line"><span class="keyword">if</span> item != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">parts = <span class="built_in">append</span>(parts, item)</span><br><span class="line"><span class="keyword">if</span> item[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">parts := parsePattern(pattern)</span><br><span class="line"></span><br><span class="line">key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">_, ok := r.roots[method]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">r.roots[method] = &amp;node&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.roots[method].insert(pattern, parts, <span class="number">0</span>)</span><br><span class="line">r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> getRoute(method <span class="type">string</span>, path <span class="type">string</span>) (*node, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) &#123;</span><br><span class="line">searchParts := parsePattern(path)</span><br><span class="line">params := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">root, ok := r.roots[method]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := root.search(searchParts, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">parts := parsePattern(n.pattern)</span><br><span class="line"><span class="keyword">for</span> index, part := <span class="keyword">range</span> parts &#123;</span><br><span class="line"><span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &#123;</span><br><span class="line">params[part[<span class="number">1</span>:]] = searchParts[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; <span class="built_in">len</span>(part) &gt; <span class="number">1</span> &#123;</span><br><span class="line">params[part[<span class="number">1</span>:]] = strings.Join(searchParts[index:], <span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> getRoutes(method <span class="type">string</span>) []*node &#123;</span><br><span class="line">root, ok := r.roots[method]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">nodes := <span class="built_in">make</span>([]*node, <span class="number">0</span>)</span><br><span class="line">root.travel(&amp;nodes)</span><br><span class="line"><span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> handle(c *Context) &#123;</span><br><span class="line">n, params := r.getRoute(c.Method, c.Path)</span><br><span class="line"><span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">c.Params = params</span><br><span class="line">key := c.Method + <span class="string">&quot;-&quot;</span> + n.pattern</span><br><span class="line">r.handlers[key](c)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>parsePattern 函数的作用是解析路由路径，将路径按 &#x2F; 分隔成各个部分。比如 &#x2F;user&#x2F;:id 会被分解成 [“user”, “:id”]。<br>如果路径中出现了 *（通常用于匹配任意多的路径部分），解析会在遇到 * 时停止。比如 &#x2F;files&#x2F;*filepath 会解析成 [“files”, “*filepath”]。<br>parts 数组存储了路由路径的各个部分（如静态部分、动态部分、通配符部分）</p><h5 id="tire-go"><a href="#tire-go" class="headerlink" title="tire.go"></a>tire.go</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">pattern  <span class="type">string</span></span><br><span class="line">part     <span class="type">string</span></span><br><span class="line">children []*node</span><br><span class="line">isWild   <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;node&#123;pattern=%s, part=%s, isWild=%t&#125;&quot;</span>, n.pattern, n.part, n.isWild)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> insert(pattern <span class="type">string</span>, parts []<span class="type">string</span>, height <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(parts) == height &#123;</span><br><span class="line">n.pattern = pattern</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">part := parts[height]</span><br><span class="line">children := n.matchChildren(part)</span><br><span class="line"><span class="keyword">var</span> child *node</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">0</span> &#123;</span><br><span class="line">child = &amp;node&#123;part: part, isWild: part[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> || part[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>&#125;</span><br><span class="line">n.children = <span class="built_in">append</span>(n.children, child)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">child = children[<span class="number">0</span>] <span class="comment">// 假设我们总是取第一个匹配的子节点</span></span><br><span class="line">&#125;</span><br><span class="line">child.insert(pattern, parts, height+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> search(parts []<span class="type">string</span>, height <span class="type">int</span>) *node &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(parts) == height || strings.HasPrefix(n.part, <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> n.pattern == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">part := parts[height]</span><br><span class="line">children := n.matchChildren(part)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> children &#123;</span><br><span class="line">result := child.search(parts, height+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> travel(list *([]*node)) &#123;</span><br><span class="line"><span class="keyword">if</span> n.pattern != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">*list = <span class="built_in">append</span>(*list, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line">child.travel(list)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> matchChild(part <span class="type">string</span>) *node &#123;</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line"><span class="keyword">if</span> child.part == part || child.isWild &#123;</span><br><span class="line"><span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> matchChildren(part <span class="type">string</span>) []*node &#123;</span><br><span class="line">nodes := <span class="built_in">make</span>([]*node, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line"><span class="keyword">if</span> child.part == part || child.isWild &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, child)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先学习一下前缀树</p><h5 id="定义树结点结构体"><a href="#定义树结点结构体" class="headerlink" title="定义树结点结构体"></a>定义树结点结构体</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> trieNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    nexts [<span class="number">26</span>]*trieNode</span><br><span class="line">    PassCnt <span class="type">int</span> <span class="comment">//用来记录中途是否有途径某个节点的个数</span></span><br><span class="line">    end <span class="type">bool</span> <span class="comment">//匹配某个单词是否是结尾 比如seat的结尾是t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">    root *trieNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Newtrie</span> *<span class="title">Trie</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Trie&#123;</span><br><span class="line">    root: &amp;trieNode&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Search(word <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">//查找目标节点，使根节点开始抵达目标节点沿路跟字符串恰好等于word</span></span><br><span class="line">    node := t.search(word)</span><br><span class="line">    <span class="keyword">return</span> node != <span class="literal">nil</span> &amp;&amp; node.end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Tire-search-方法源码"><a href="#Tire-search-方法源码" class="headerlink" title="Tire.search 方法源码"></a>Tire.search 方法源码</h5><p>字符➖a<br>如果返回的单词是 前缀树中的别的单词的前缀判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span>search(target <span class="type">string</span>)*trieNode&#123;</span><br><span class="line"><span class="comment">//移动指针从根节点出发</span></span><br><span class="line">move :t.root</span><br><span class="line">/依次追历target中的每个字符</span><br><span class="line">for_, ch:<span class="keyword">range</span> target&#123;</span><br><span class="line"><span class="comment">//倘若nexts中不存在对应于这个字符的节点，说明该单词没插入过，返回ni1</span></span><br><span class="line"><span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">nil</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针向着子节点移动</span></span><br><span class="line">movemove.nexts [ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//来到末尾，说明已经完全匹配好单词，直接返回这个节点</span></span><br><span class="line"><span class="comment">//需要注意，找到目标节点不一定代表单词存在，因为该节点的end标识未必为true</span></span><br><span class="line"><span class="comment">//比如我们之前往trie中插入了apple这个单词，但是查找app这个单词时，预期的返回</span></span><br><span class="line"><span class="keyword">return</span> move</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="前缀匹配"><a href="#前缀匹配" class="headerlink" title="前缀匹配"></a>前缀匹配</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀树做前缀匹配很简单</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> StartWith(prefix(<span class="type">string</span>)) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.search(prefix) != <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀统计"><a href="#前缀统计" class="headerlink" title="前缀统计"></a>前缀统计</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> PassCnt(prefix <span class="type">string</span>) <span class="type">int</span>&#123;</span><br><span class="line">    node := t.search(prefix)</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> node.PassCnt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="插入单词"><a href="#插入单词" class="headerlink" title="插入单词"></a>插入单词</h5><p>例子： 要插入apple 树中app可以复用<br>    则插入 l e</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Insert(word <span class="type">string</span>) &#123;</span><br><span class="line"><span class="comment">//如果单词存在直接返回</span></span><br><span class="line">    <span class="keyword">if</span> t.Search(word)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        move := t.root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,ch := <span class="keyword">range</span> word &#123;</span><br><span class="line"><span class="comment">//如果不存在创建出来</span></span><br><span class="line">    <span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] = &amp;trieNode&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt++</span><br><span class="line">    move = move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line">move.end =<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除流程"><a href="#删除流程" class="headerlink" title="删除流程"></a>删除流程</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Erase(word <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !t.Search(word)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  move := t.root</span><br><span class="line">    <span class="keyword">for</span> _, ch := <span class="keyword">range</span> word &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt --</span><br><span class="line"><span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt == <span class="number">0</span> &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">    move = move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    move.end = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整段代码下来还是有点看不懂啊呜呜</p><p>11.25日<br>拖了几天<br>感谢tutu</p><h4 id="分组控制"><a href="#分组控制" class="headerlink" title="分组控制"></a>分组控制</h4><p>分组控制是Web框架的基础功能之一，路由的分组，往往某一组路由需要相似的处理</p><p>以&#x2F;post开头的路由匿名可访问。<br>以&#x2F;admin开头的路由需要鉴权。<br>以&#x2F;api开头的路由是 RESTful 接口，可以对接第三方平台，需要三方平台鉴权。</p><p>&#x2F;post是一个分组<br>&#x2F;post&#x2F;a和&#x2F;post&#x2F;b可以是该分组下的子分组<br>作用在&#x2F;post分组上的中间件(middleware)，也都会作用在子分组，子分组还可以应用自己特有的中间件。</p><p>中间件可以给框架提供无限的扩展能力<br>用在分组上的效果也更明显<br>&#x2F;admin的分组，可以应用鉴权中间件；&#x2F;分组应用日志中间件，<br>&#x2F;是默认的最顶层的分组，也就意味着给所有的路由，即整个框架增加了记录日志的能力。</p><p>一个 Group 对象需要具备哪些属性呢？首先是前缀(prefix)，<br>比如&#x2F;，或者&#x2F;api；要支持分组嵌套，那么需要知道当前分组的父亲(parent)是谁；<br>中间件是应用在分组上的，那还需要存储应用在该分组上的中间件(middlewares)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r := gee.New()</span><br><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">v1.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;&lt;h1&gt;Hello Gee&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好好看看仓库中的代码 梳理思路 感觉好有意思但是看不懂哈哈哈哈</p><p>11.26日 回看前三天的代码 增加一些自己的理解和修改 再继续向下学习！ </p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络持续学习中~</title>
      <link href="/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/computer_network/"/>
      <url>/2024/11/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/computer_network/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一下自己在黑皮书中的学习记录下有用的部分"><a href="#记录一下自己在黑皮书中的学习记录下有用的部分" class="headerlink" title="记录一下自己在黑皮书中的学习记录下有用的部分"></a>记录一下自己在黑皮书中的学习记录下有用的部分</h2><hr><p>非常好的学习HTTP RESTFUL API 链接<br>链接1： <a href="https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p><p>链接2： <a href="https://www.ruanyifeng.com/blog/2016/08/http.html">https://www.ruanyifeng.com/blog/2016/08/http.html</a></p><h2 id="链接3：-https-florimond-dev-en-posts-2018-08-restful-api-design-13-best-practices-to-make-your-users-happy"><a href="#链接3：-https-florimond-dev-en-posts-2018-08-restful-api-design-13-best-practices-to-make-your-users-happy" class="headerlink" title="链接3： https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy"></a>链接3： <a href="https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy">https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy</a></h2><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="2-1应用层协议原理："><a href="#2-1应用层协议原理：" class="headerlink" title="2.1应用层协议原理："></a>2.1应用层协议原理：</h3><p>Web应用程序中两个互相通讯的不同程序：</p><ol><li>运行在用户主机上浏览器程序</li><li>运行在Web服务器主机上</li></ol><p>网络上的核心设备并不在应用层起作用， 这将应用软件限制在了端系统，这促进了大量网络应用程序的迅速研发与部署</p><h4 id="2-1-1网络应用程序体系结构"><a href="#2-1-1网络应用程序体系结构" class="headerlink" title="2.1.1网络应用程序体系结构"></a>2.1.1网络应用程序体系结构</h4><p>应用层的体系结构 明显 不同于网络的体系结构（网络的体系结构是固定的，提供了特定的服务集合）</p><p>应用层体系结构（大体两个）：</p><ol><li>客户-服务器体系结构</li><li>p2p体系结构</li></ol><h5 id="1-客户-服务器体系结构："><a href="#1-客户-服务器体系结构：" class="headerlink" title="1.客户-服务器体系结构："></a>1.客户-服务器体系结构：</h5><p>有一个总打开的主机被称为：服务器（它服务于许多其他称为客户的主机请求）</p><p>例子：</p><p>Web应用服务器：（Web服务器服务于浏览器（运行在客户机）的请求）</p><p>在这个体系结构中 客户之间并不直接通信 而是 客户通过向该服务器的ip地址发送分组 用来取得联系</p><p>著名的Web应用：</p><p>Web FTP Telent 电子邮箱</p><p>在这个体系中 如果只有一台服务器 在某些情况（大量的所有请i去）会导致服务器变得不堪重负，因此-配备大量主机的 <strong>数据中心</strong></p><p>流行的因特网服务：</p><p>搜索引擎（Google，bing，百度）等 应用了一个或多个数据中心（1个数据中心 可以有数十万台服务器）</p><h5 id="2-p2p体系结构"><a href="#2-p2p体系结构" class="headerlink" title="2. p2p体系结构"></a>2. p2p体系结构</h5><p>主机对之间使用直接通信（对等方），引人入胜的特性（自扩展性），</p><p>面临挑战： 高度非集中式，面临安全性，性能和可靠性等挑战</p><p>应用：</p><p>文件共享，对等方协助下载器（迅雷）因特网电话和视频会议 </p><p>有的应用具有两种的混合体系： 服务器被用来跟踪用户的ip地址 但 用户到用户的报文在用户到主机之间 直接发送</p><h4 id="2-1-2进程通信"><a href="#2-1-2进程通信" class="headerlink" title="2.1.2进程通信"></a>2.1.2进程通信</h4><p>运行在多个端系统上的程序如何互相通信，进行通信实际上是<strong>进程</strong>而不是程序<br><strong>进程</strong>可以被认为是运行在端系统的一个程序。 多个进程运行在相同的端系统时<strong>使用进程间通信机制互相通信（通信规则由  _端系统上的操作系统制定_）</strong></p><h2 id="关注的是-运行在不同端系统上的进程间的通信"><a href="#关注的是-运行在不同端系统上的进程间的通信" class="headerlink" title="关注的是 运行在不同端系统上的进程间的通信"></a>关注的是 运行在不同端系统上的进程间的通信</h2><p>在不同的端系统上的进程 通过 跨越进程通过网络互相发送<strong>报文</strong></p><p>发送进程 生成并 向网络中 发送报文 -》接收进程接收报文并通过回送报文响应</p><h5 id="1-客户和服务器进程"><a href="#1-客户和服务器进程" class="headerlink" title="1.客户和服务器进程"></a>1.客户和服务器进程</h5><p>网络应用程序由 成对的进程组成 进程之间 通过网路互相发送报文 </p><p>例子：</p><p>客户浏览器进程 与 Web服务器进程交换报文 在p2p中： 文件从一个对等方中的进程 传输到 另一个对等放进程 其中一个进程被表示为<strong>客户</strong> 另一个进程被标记为<strong>服务器</strong></p><h5 id="2-进程与计算机网络之间的接口（api）"><a href="#2-进程与计算机网络之间的接口（api）" class="headerlink" title="2.进程与计算机网络之间的接口（api）"></a>2.进程与计算机网络之间的接口（api）</h5><p>进程 通过一个称为<strong>套接字（socket）</strong> 的软件接口 向网络发送报文和从网络接收报文</p><p><strong>套接字</strong>： 是同一台主机被<strong>应用层与传输层之间</strong>的接口 套接字被称为 应用进程 和 网络之间的（api）</p><p>我们可以控制套接字在应用端的一切 但是 对运输层几乎没有控制权 仅限于：选择运输层协议 也能设定几个运输层协议（最大缓存，最大报文长度）</p><h5 id="3-进程寻址"><a href="#3-进程寻址" class="headerlink" title="3.进程寻址"></a>3.进程寻址</h5><p>主机由<strong>ip地址</strong>标识， ip地址： 是32比特的量它能够标识该主机 </p><p><strong>端口号</strong>： 众所周知的端口号列表： <a href="http://www.iana.org/">http://www.iana.org</a></p><p><img src="/study_photo/internet2.jpg" alt="image-20241107112953295"></p><h4 id="2-1-3-可供应用程序使用的运输服务"><a href="#2-1-3-可供应用程序使用的运输服务" class="headerlink" title="2.1.3 可供应用程序使用的运输服务"></a>2.1.3 可供应用程序使用的运输服务</h4><p>运输层协议负责从接收进程的套接字得到该报文 开发应用时还要选择根基情况 选择合适的协议 选择服务</p><p>服务： 可靠数据传输 吞吐量 定时 安全性</p><h5 id="1-可靠数据传输"><a href="#1-可靠数据传输" class="headerlink" title="1.可靠数据传输"></a>1.可靠数据传输</h5><p>因为 分组可能在计算机网络中丢失，</p><p>例子：</p><p>分组能够使路由器中的缓存溢出， 分组中的某些比特损坏后可能被丢弃 在某些特定情况下： 电子邮件，文件传输，远程主机访问<br>如果数据丢失可能会造成灾难性的损失，</p><p>因此 当运输层协议提供一种可靠传输， 发送进程只需要将数据传递到套接字中 就可以完全相信数据无差别的到达接收进程<br>但是也有一些东西可以容忍数据的丢失（不适用可靠数据传输时） 音频&#x2F;视频</p><h5 id="2-吞吐量"><a href="#2-吞吐量" class="headerlink" title="2.吞吐量"></a>2.吞吐量</h5><p>吞吐量就是发送进程能够向接收进程交付比特的速率 会话 将共享沿着网络路径的带宽 运输层协议能够确保可用吞吐量为至少r&#x2F;bit&#x2F;s当（应用程序请求r&#x2F;bit&#x2F;s）</p><p>示例：<br>电话需要固定的bit进行编码 如果不能提供这中吞吐量或者较小 造成放弃发送（因为接收一半可能是没用的）<br>弹性应用：可以根据 可用的宽带或多或少来利用可供使用的吞吐量<br>当然 吞吐量越高越好哈哈哈</p><h5 id="3-定时"><a href="#3-定时" class="headerlink" title="3.定时"></a>3.定时</h5><p>运输层协议也能提供定时保证 因为在特定情况下 电话，虚拟环境 多方游戏（对时间有严格的限制） 否则会造成停顿， 较长的时延<br>但 端到端的时延没有严格的约束</p><h5 id="4，安全性"><a href="#4，安全性" class="headerlink" title="4，安全性"></a>4，安全性</h5><p>运输协议为应用提供 一种或多种安全性服务 能加密发送进程传输的所有数据 防止数据以某种方式 在两个进程之间被观察</p><h4 id="2-1-4-因特网提供的运输服务"><a href="#2-1-4-因特网提供的运输服务" class="headerlink" title="2.1.4 因特网提供的运输服务"></a>2.1.4 因特网提供的运输服务</h4><p>因特网（TCp&#x2F;IP网络）为应用程序提供两个运输层协议（TCP&#x2F;UDP）</p><h5 id="1-TCP服务"><a href="#1-TCP服务" class="headerlink" title="1.TCP服务"></a>1.TCP服务</h5><p>特点： <strong>面向连接服务</strong>和<strong>可靠数据传输服务</strong></p><p><img src="/study_photo/internet.jpg" alt="image-20241107112953295"></p><p><strong>面向连接：</strong> 在应用层数据报文开始流动之前， TCP使 客户 和 服务器 之前相互交换 运输层控制信息（握手过程） 让它们提前做好准备<br>握手之后 <strong>TCP连接就建立了</strong>  连接时双工的： 双方可以连接上 同时进行报文的收发  当收发结束后 必须拆除连接</p><p><strong>可靠的数据传送服务：</strong> 通信进程依靠TCP 无差错的按照顺序交付所有的发送数据 当一方将字节流传入套接字时 依靠TCP将相同的<br>字节流交付给接收方的套接字 没有字节的丢失和冗余 </p><p>TCP具有拥塞控制机制  当发送方和接收方之间网络出现问题堵塞 TCP的机制可以抑制发送进程 也试图限制每个TCP连接 达到公平共享网络宽带目的</p><hr><p>原文链接： <a href="https://github.com/wolverinn/Waking-Up/blob/master/Computertree-way-handshake">https://github.com/wolverinn/Waking-Up/blob/master/Computertree-way-handshake</a></p><p>简单理解：</p><h6 id="三次握手（三报文握手）"><a href="#三次握手（三报文握手）" class="headerlink" title="三次握手（三报文握手）"></a>三次握手（三报文握手）</h6><p>第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态；<br>第二次握手：Server收到Client的SYN&#x3D;1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number&#x3D;sequence number+1，并随机产生一个自己的初始序列号，发送给客户端；进入SYN_RCVD状态；<br>第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number&#x3D;服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。</p><p>目的： 建立 TCP连接</p><h6 id="两次握手呢？"><a href="#两次握手呢？" class="headerlink" title="两次握手呢？"></a>两次握手呢？</h6><p>只发送前两次报文 不会有 最后一次的客户端同步状态报文<br>这就会导致超时重传<br>把问题想象成发送报文就好理解了：<br>一段时间后，之前滞留在网络中的那个失效的TCP连接请求报文段到达了TCP服务器进程，TCP 服务器进程会误认为这是TCP客户进程又发起了一个新的TCP连接请求，于是给TCP客户进程发送TCP连接请求确认报文段并进入连接已建立状态。<br>该报文段到达TCP客户进程，由于TCP客户进程并没有发起新的TCP连接请求，并且处于关闭状态，因此不会理会该报文段。</p><p>不可以！</p><p>如果不是用三次握手 那么只要client发出确认报文段， server发出确认新的连接就建立了<br>因为第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了延误到连接释放以后的某个时间才到达<br>但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。</p><h6 id="四次握手？"><a href="#四次握手？" class="headerlink" title="四次握手？"></a>四次握手？</h6><p>可以。但是会降低传输的效率。</p><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；<br>原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p><p>了解名词ACK acknowledge number SYN 初始序列号</p><p>参考链接： <a href="https://juejin.cn/post/7028003193502040072">https://juejin.cn/post/7028003193502040072</a></p><p><strong>确认标志位ACK：</strong> 取值为1时确认号字段才有效；取值为0时确认号字段无效。TCP规定，在连接建立后所有传送的TCP报文段都必须把ACK置1。</p><p>源端口：16bit 目的端口： 16bit<br>序号：32bit</p><p><strong>同步标志位SYN：</strong> 在TCP连接建立时用来同步序号。终止标志位FIN： 用来释放TCP连接。复位标志位RST： 用来复位TCP连接。</p><p><strong>推送标志位PSH：</strong> 接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p><p>TCP建立需要解决的问题：</p><p>1、使TCP双方能够确知对方的存在 。</p><p>2、使TCP双方能够协商一些参数（ 最大窗口值是否使用窗口扩大选项和时间戳选项，以及服务质量等）。</p><p>3、使TCP双方能够对运输实体资源（例如缓存大小连接表中的项目等）进行分配。</p><p>TCP规定SYN被设置为1的报文段不能携带数据但要消耗掉一个序号。</p><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p><strong>总结：</strong><br>如果没有第三次握手告诉服务器客户端能否收到服务器传输的数据的话，<br>服务器端的端口就会一直开着，等到客户端因超时重新发出请求时，服务器就会重新开启一个端口连接。长此以往， 这样的端口越来越多，就会造成服务器开销的浪费。</p><p>探测报文检测 确认客户端是否出现故障 然后关闭连接</p><h6 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h6><p>第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；<br>第二次挥手：Server收到FIN之后，发送一个ACK&#x3D;1，acknowledge number&#x3D;收到的序列号+1；进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。<br>第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；<br>第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个acknowledge number&#x3D;序列号+1给服务器；服务器收到后，确认acknowledge number后，变为CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入CLOSED状态。完成四次挥手。</p><p>还有些不太理解学习一下这些名字之后再来理解</p><hr><h5 id="2-UDP服务"><a href="#2-UDP服务" class="headerlink" title="2.UDP服务"></a>2.UDP服务</h5><p>UDP是 轻量级运输协议仅提供最小服务 状态：无连接的，两个进程通信没有握手过程， 提供：不可靠传输协议：不保证报文到达接收进程<br>报文也可能是乱序到达  也没有拥塞控制机制</p><h5 id="因特网运输协议所不提供的服务"><a href="#因特网运输协议所不提供的服务" class="headerlink" title="因特网运输协议所不提供的服务"></a>因特网运输协议所不提供的服务</h5><p>TCP在应用层 用SSL加强提供安全服务 漏掉了 吞吐量，和定时保证</p><h4 id="2-1-5-应用层协议"><a href="#2-1-5-应用层协议" class="headerlink" title="2.1.5 应用层协议"></a>2.1.5 应用层协议</h4><p>定义了：</p><ol><li>交换的报文类型 如：请求报文，响应报文</li><li>报文类型语法 如：报文字段是如何描述的</li><li>字段的语义 就是信息含义</li><li>确定进程何时发送报文</li></ol><p>Web的应用层协议是HTTP： </p><p>因特网电子邮件应用：包括 电子邮件报文结构的标准 以及 定义报文如何在服务器之间以及如何在服务器与邮件客户程序之间传递的应用层协议</p><h3 id="2-2Web和HTTP"><a href="#2-2Web和HTTP" class="headerlink" title="2.2Web和HTTP"></a>2.2Web和HTTP</h3><h4 id="2-2-1HTTP概况"><a href="#2-2-1HTTP概况" class="headerlink" title="2.2.1HTTP概况"></a>2.2.1HTTP概况</h4><p>Web层应用层协议是超文本传输协议 HTTP由两个程序实现（客户程序）（服务器程序） 通过交换HTTP报文进行会话</p><p><strong>Web界面</strong><br>它是由文档组成的也就是（对象）： 一个对象是一个文件 例如： HTML文件 JPEG图形</p><p>例如： 如果一个HTML文件＋五个图片 也就是 Web页面有6个对象</p><p>URL地址两部分组成：服务器主机名 和 对象 URL：<a href="http://www/someSchool.edu/someDepartment/picture.gif">http://www/someSchool.edu/someDepartment/picture.gif</a> 到edu是主机名<br>后面是路径名</p><p>Web服务器 实现了HTTP服务器端 用于存储Web对象 流行的Web服务器：Apache等</p><p><img src="/study_photo/internet3.jpg" alt="image-20241107112953295"></p><h4 id="2-2-2非持续连接和持续链接"><a href="#2-2-2非持续连接和持续链接" class="headerlink" title="2.2.2非持续连接和持续链接"></a>2.2.2非持续连接和持续链接</h4><p>两个问题：</p><p>每个请求&#x2F;响应是 经 一个单独的TCP连接： 这称为（非持续连接）<br>还是 经相同的TCP连接发送： 这称为（持续链接）</p><h5 id="1-采用非持续连接的HTTP"><a href="#1-采用非持续连接的HTTP" class="headerlink" title="1.采用非持续连接的HTTP"></a>1.采用非持续连接的HTTP</h5><p>过程：<br><img src="/study_photo/internet4.jpg" alt="image-20241107112953295"></p><p>每个TCP只传输一个请求报文和一个响应报文</p><p>串行TCP：</p><p>并行TCP：</p><p>浏览器可以设置并行数 如果设为1 那么就会变化串行连接 并行连接可以减少响应时间</p><p><strong>往返时间（RTT）</strong></p><p>RTT包括： 分组传播时延 分组在（中间路由器）（交换机）的排队时延 分组时延</p><p><strong>三次握手过程</strong></p><ol><li>客户向服务器发送小TCP报文</li><li>服务器用小TCP报文做出确认和响应</li><li>客户向服务器返回确认</li></ol><p>这三次握手中 前两部分花费 一个RTT<br>握手后向该TCP连接发送HTTP请求报文 一旦请求报文到达服务器 服务器就在TCP连接上发送HTML文件<br>该HTTP的请求和响应用了一个HTTP  服务器传输HTML花费了时间<br>一共为 2RTT+传输时间</p><h5 id="2-采用持续连接的HTTP"><a href="#2-采用持续连接的HTTP" class="headerlink" title="2.采用持续连接的HTTP"></a>2.采用持续连接的HTTP</h5><p> 非持续链接的缺点： 每次连接都需要： 分配TCP缓存区和保持TCP变量 这给Web服务器造成了很大的负担<br> 每一个对象都会造成上面的时延时间</p><p>HTTP1.1 在服务器响应后 保持TCP打开 用单个TCP进行传送 在一定的时间间隔没有被使用HTTP服务器再关闭连接<br>HTTP2  它允许再相同连接中多个请求和回答错误 增加了连接中优化HTTP报文请i去和回答机制</p><h4 id="2-2-3-HTTP请求报文格式"><a href="#2-2-3-HTTP请求报文格式" class="headerlink" title="2.2.3 HTTP请求报文格式"></a>2.2.3 HTTP请求报文格式</h4><h5 id="1-HTTP-请求报文"><a href="#1-HTTP-请求报文" class="headerlink" title="1.HTTP 请求报文"></a>1.HTTP 请求报文</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /somedir/page.html HTTP/1.1</span><br><span class="line">HOST: www.someschool.edu</span><br><span class="line">Connection: close</span><br><span class="line">User-agent: Mozilla/5.0</span><br><span class="line">Accept-language: fr</span><br></pre></td></tr></table></figure><p>第一行：请求行<br>后继行：首部行</p><p><img src="/study_photo2/internet.jpg" alt="internet.jpg"></p><h5 id="2-HTTP-响应报文"><a href="#2-HTTP-响应报文" class="headerlink" title="2.HTTP 响应报文"></a>2.HTTP 响应报文</h5><p>真实的HTTP响应报文：<br>用Telnet 登录到喜欢的Web服务器上 请求报文请求放在该服务器上的某些对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">telnet gaia.cs.umass.edu 80</span><br><span class="line"></span><br><span class="line">Trying 128.119.245.12...</span><br><span class="line">Connected to gaia.cs.umass.edu.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">GET /kurose_ross/interactive/index.php HTTP/1.1</span><br><span class="line">Host: gaia.cs.umass.edu</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 27 Nov 2024 13:06:02 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span><br><span class="line">X-Powered-By: PHP/7.4.33</span><br><span class="line">Set-Cookie: DevMode=0</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure><p>这里的<br>GET &#x2F;kurose_ross&#x2F;interactive&#x2F;index.php HTTP&#x2F;1.1<br>Host: gaia.cs.umass.edu<br>格式很重要 回车必不可少</p><p>只想看HTTP协议的报文行 用HEAD代替GET<br>上述简短的两行代码 打开了主机 .edu的80端口的TCP连接 发送了一个HTTP请求报文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">telnet gaia.cs.umass.edu 80</span><br><span class="line">Trying 128.119.245.12...</span><br><span class="line">Connected to gaia.cs.umass.edu.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">HEAD /kurose_ross/interactive/index.php HTTP/1.1</span><br><span class="line">Host: gaia.cs.umass.edu</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 27 Nov 2024 13:11:35 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span><br><span class="line">X-Powered-By: PHP/7.4.33</span><br><span class="line">Set-Cookie: DevMode=0</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>GT方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，<br>且每次的结果都是相同的。所以，可以对GET请求的数据做缓存，这个缓存可以做到浏览器本身上<br>(彻底避免浏览器发请求)，也可以做到代理上（如gix)，而且在浏览器中GET请求可以保存为书<br>签。</p><p>POST因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据<br>就会创建多个资源，所以不是幂等的。所以，浏览器一般不会缓存POST请求，也不能把POST请求保<br>存为书签。</p><h5 id="减少HTTP请求次数"><a href="#减少HTTP请求次数" class="headerlink" title="减少HTTP请求次数"></a>减少HTTP请求次数</h5><p>1.减少重定向请求次数</p><p>重定向请求越多，那么客户端就要多次发起 HTTP 请求 每一次的 HTTP 请求都得经过网络，这无疑会越降低网络性能</p><p>重定向的工作交由代理服务器完成，就能减少 HTTP 请求次数了<br>代理服务器知晓了重定向规则后，可以进一步减少消息传递次数</p><hr><h4 id="2-2-4用户与服务器的交互-cookie"><a href="#2-2-4用户与服务器的交互-cookie" class="headerlink" title="2.2.4用户与服务器的交互 cookie"></a>2.2.4用户与服务器的交互 cookie</h4><p>HTTP服务器是无状态的 不需要验证。但是站点是希望能够标识用户， 因为服务器可能需要限制用户的访问，这就需要把内容和用户关联到一起<br>HTTP使用了 <strong>cookie</strong> </p><p><strong>cookie的四个组件</strong></p><ol><li>HTTP响应报文的一个cookie首部行</li><li>HTTP请求报文的一个cookie首部行</li><li>用户端系统保留一个cookie文件浏览器进行管理</li><li>位于WEB站点的后端数据库</li></ol><p><img src="/study_photo2/internet2.jpg" alt="internet.jpg"></p><p>这样当Susan再次访问一个站点的时候 浏览器放入首部行  就不用再输入一些信息了<br>实行了”点击购物“</p><h4 id="2-2-5-Web缓存"><a href="#2-2-5-Web缓存" class="headerlink" title="2.2.5 Web缓存"></a>2.2.5 Web缓存</h4><p><img src="/study_photo2/internet3.jpg" alt="internet.jpg"></p><p>还需要 深入理解缓存器带来的好处</p><p><img src="/study_photo2/internet4.jpg" alt="internet.jpg"></p><p>HTTP中的 强制缓存和协商缓存</p><h5 id="强制缓存定义："><a href="#强制缓存定义：" class="headerlink" title="强制缓存定义："></a>强制缓存定义：</h5><p>强制缓存是指客户端直接使用本地缓存的数据，而不会向服务器发送请求验证数据的有效性。</p><p>工作方式：</p><p>HTTP 头部中：<br>使用 Cache-Control 指定缓存策略（例如 max-age）。<br>或使用 Expires（HTTP&#x2F;1.0，已逐步被 Cache-Control 替代）指定缓存失效时间。<br>如果缓存未过期，浏览器会直接从本地缓存读取数据，而不会与服务器通信。<br>特点：</p><p>节约资源：不需要请求服务器。<br>时效性：受 max-age 或 Expires 的约束，可能存在缓存失效时间的误差。</p><h5 id="协商缓存-Conditional-Cache"><a href="#协商缓存-Conditional-Cache" class="headerlink" title="协商缓存 (Conditional Cache)"></a>协商缓存 (Conditional Cache)</h5><p>定义： 协商缓存是指客户端向服务器发送请求，验证本地缓存是否有效。如果有效，服务器返回一个状态码（如 304 Not Modified），客户端可以继续使用本地缓存的数据；否则，服务器返回最新的数据。</p><p>工作方式：</p><p>HTTP 头部中：<br>请求头：使用 If-Modified-Since 或 If-None-Match。<br>响应头：服务器返回 Last-Modified（表示资源最后修改时间）或 ETag（资源的唯一标识符）。<br>客户端会将缓存中记录的 ETag 或 Last-Modified 发送到服务器进行验证：<br>如果验证通过（服务器认为缓存未修改），返回 304。<br>如果验证失败（资源已更新），返回新的资源数据（200 OK）。<br>特点：</p><p>相对准确：确保缓存数据的有效性。<br>需要通信：每次都需要向服务器发送请求进行验证。</p><p>缓存命中率<br>内容分发网络（CDN）：多个共享CDN 专用CDN</p><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>问题： 存放在混村其中的对象副本是旧的，或者再保存到服务器中的对象再缓存到客户上之后 就被修改了<br><strong>HTTP协议机制</strong>： 允许缓存器证实它的对象是最新的 也就是（<strong>条件GET</strong>）</p><p><code>If-modified-since: Wed, 9 Sep 2015 09:23:24</code></p><p>”If-Modified-Since“首部行 这个请求报文就是条件GET请求报文</p><p>缓存器在存储对象的同时也存储了最后的修改日期 缓存器通过一个条件GET执行最新查询<br>这条语句告诉服务器 仅当指定日期后该对象被修改过 才发送对象 </p><p>如果没有修改过 则相应的时候没有body 因为再次返回一样的body会浪费宽带</p><hr><p>插入</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>在实践中，客户端指定数据流的优先级通常是在使用 HTTP&#x2F;2 时实现的。HTTP&#x2F;2 引入了<strong>流优先级（Stream Priority）</strong>机制，允许客户端为每个流指定一个优先级值，这个值会影响服务器在资源争用时对请求的处理顺序。</p><p>流优先级机制<br>优先级参数：每个 HTTP&#x2F;2 流都可以有一个权重值（weight），范围是 1 到 256，数字越大，优先级越高。<br>依赖关系：每个流还可以声明依赖于另一个流（dependency）。如果一个流依赖于另一个流，服务器会优先完成被依赖的流。<br>服务器根据这些参数决定如何分配带宽和计算资源。</p><p>实现流优先级的例子<br>客户端的实现（使用 cURL）<br>我们可以用支持 HTTP&#x2F;2 的工具，如 curl，来演示流优先级的使用。</p><p>发送两个并发请求（模拟流）</p><p>curl –http2 -o output1.html <a href="https://example.com/slow-response">https://example.com/slow-response</a> &amp;<br>curl –http2 -o output2.html <a href="https://example.com/fast-response">https://example.com/fast-response</a> &amp;<br>wait<br>默认情况下，这两个流的优先级相同，服务器会尽力均匀分配资源来处理它们。</p><p>设置优先级 使用 –http2-prioritize 选项来设置优先级。例如：</p><p>curl –http2 –http2-prioritize-weight 256 -o fast.html <a href="https://example.com/fast-response">https://example.com/fast-response</a> &amp;<br>curl –http2 –http2-prioritize-weight 1 -o slow.html <a href="https://example.com/slow-response">https://example.com/slow-response</a> &amp;<br>wait<br>这里：</p><p>fast-response 的优先级为 256（最高）。<br>slow-response 的优先级为 1（最低）。<br>服务器会优先响应 fast-response 流。</p><hr><h4 id="2-3-因特网中的电子邮件"><a href="#2-3-因特网中的电子邮件" class="headerlink" title="2.3 因特网中的电子邮件"></a>2.3 因特网中的电子邮件</h4><p>3个主体组成部分 <strong>用户代理</strong> <strong>邮件服务器</strong> <strong>简单邮件传输协议</strong></p><p><img src="/study_photo2/internet5.jpg" alt="internet.jpg"></p><p>SMTP： 应用层协议 使用TCP可靠数据传输 每台邮件服务器上：既运行SMTP的客户端也运行SMTP的服务器端<br>因为：</p><p>SMTP发送邮件的时候 表现为： 客户端</p><p>SMTP接收邮件的时候 表现为： 服务器端</p><p>使用7bit ASCII标识</p><h5 id="2-3-1-SMTP"><a href="#2-3-1-SMTP" class="headerlink" title="2.3.1 SMTP"></a>2.3.1 SMTP</h5><p><img src="/study_photo2/internet6.jpg" alt="internet.jpg"></p><hr><p>12.18 日</p><p>套接字编程： </p><ol><li><p>UDP套接字：</p></li><li><p>TCP套接字</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>青训营直播总结</title>
      <link href="/2024/11/13/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Dance_live/"/>
      <url>/2024/11/13/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/Dance_live/</url>
      
        <content type="html"><![CDATA[<p>听了前端文杰老哥分享</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>计算机基础很重要必须要持续学习： 例如：计算机原理，操作系统等，在工作中有些人问题你需要定位到它的问题出在了那里，这个问题的对应着是哪个方面的问题<br>学习ai提示词，提高学习效率，练好基本功，多写代码，多用大模型 前期多学习如何编码而不是太多关于工程化的问题</p><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><p>解决问题:事实是，就业环境中大概率没人把你当学生般保护着，别人没有义务要解决你的问题(不合理，不科学)，请务必提升自己解决问题的能力。</p><p>学习:工作中，很难找到手把手教你做事的团队，多数时候都是靠自学，没有课本，没有老师，没有标准答案，全凭自己，所以务必提升独立学习能力;</p><p>二极化:世界不是非黑即白，代码也是，职业也是，接受、包容多样性吧，多从不同角度思考问题，从不同渠道了解解决问题的方法，学会更体系化地思考;</p><p>LLM:非常值得花很多时间学习，用好这个工具，提升你个人效率;但它不是魔法，不要幻想着学会了就能怎么这么样; (目前只停留在问题的复制粘贴 效率很低)</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go语言进阶</title>
      <link href="/2024/11/11/go/Go_Advanced/"/>
      <url>/2024/11/11/go/Go_Advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="字节青训营学习"><a href="#字节青训营学习" class="headerlink" title="字节青训营学习"></a>字节青训营学习</h1><h3 id="一-入门篇学习"><a href="#一-入门篇学习" class="headerlink" title="一.入门篇学习"></a>一.入门篇学习</h3><p>实战篇：</p><h4 id="1-猜数字游戏"><a href="#1-猜数字游戏" class="headerlink" title="1.猜数字游戏"></a>1.猜数字游戏</h4><p>运用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">”math/rand“</span><br><span class="line"></span><br><span class="line">maxNum := 100</span><br><span class="line">调用 Intn（maxNum）</span><br><span class="line">//注意这并不能使每一次都用都产生不同的值</span><br><span class="line"></span><br><span class="line">需要加 时间戳 才能每次产生不同的值</span><br><span class="line">应该是：</span><br><span class="line">maxNum := 100</span><br><span class="line">ran.Seed(time.Now().UnixNano())</span><br><span class="line">然后调用</span><br><span class="line"> ran.Intn（maxNum）</span><br><span class="line"> </span><br><span class="line"> 用 &quot;bufio&quot;</span><br><span class="line"> 这个特别的包以后可以用到</span><br><span class="line"> </span><br><span class="line"> 这里读取一行输入用的是</span><br><span class="line"> reader := bufo.NewReader(os.Stdin)//调用这个可以更加灵活</span><br><span class="line"> input， err := reader.ReadString(&#x27;\n&#x27;)</span><br><span class="line"> if err != nil&#123;...&#125;</span><br><span class="line"> </span><br><span class="line"> input = strings.TrimSuffix(intput,&quot;\n&quot;)//去掉换行符</span><br><span class="line"> </span><br><span class="line"> guess,err := strconv.Atoi(input)//转换成数字</span><br><span class="line"> </span><br><span class="line"> 菜值逻辑 </span><br></pre></td></tr></table></figure><h4 id="2-在线词典介绍"><a href="#2-在线词典介绍" class="headerlink" title="2.在线词典介绍"></a>2.在线词典介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run simpledict/v4/main.go hello</span><br><span class="line">//意思是查询hello这个功能</span><br><span class="line">//会输出以下内容</span><br><span class="line">hello UK:[&#x27;he&#x27;lau]US:[ha&#x27;lo]</span><br><span class="line">int.喂；哈罗</span><br><span class="line">n.引人注意的呼声</span><br><span class="line">V.向人呼（喂</span><br><span class="line"></span><br><span class="line">调用第三方api</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成请求</p><p><a href="https://curlconverter.com/">https://curlconverter.com/</a></p><p>写入curl 自动生成代码</p><p>示例：</p><p><img src="/study_photo/39.png" alt="image-20241104201754858"></p><p>会输出一些列bilibili的东西</p><p>json序列化</p><p><img src="/study_photo/40.png" alt="image-20241104202957339"></p><p>衍生出以下</p><p><img src="/study_photo/41.png" alt="image-20241104203014855"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request ：= DicRequest&#123;Trans Type：&quot;en2zh&quot;,Source:&quot;good&quot;&#125;</span><br><span class="line">buf, err := json.Marshal(request)//序列化request 变成byte数组</span><br><span class="line">if~~~</span><br><span class="line">var data = bytes.NewReader(buf) //因为buf返回的是bytes数组所以我们应该 bytes.NewReader</span><br></pre></td></tr></table></figure><p>解析response 进行反序列化</p><p>json转golang 结构体</p><p><a href="https://oktools.net/json2go">https://oktools.net/json2go</a></p><p>反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = json.Unmarshal(bodytext,&amp;dictResponse)//传入结构体</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;%#v&quot;,dicResponse)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Go进阶"><a href="#Go进阶" class="headerlink" title="Go进阶"></a>Go进阶</h3><h4 id="1-并发编程"><a href="#1-并发编程" class="headerlink" title="1.并发编程"></a>1.并发编程</h4><p>并发：多线程在一个核运行 时间碎片</p><p>并行： 多核</p><p><img src="/study_photo/42.png" alt="image-20241109132249854"></p><p>并行是并发的手段</p><h4 id="2-协程"><a href="#2-协程" class="headerlink" title="2.协程"></a>2.协程</h4><p><img src="/study_photo/43.png" alt="image-20241109132406297"></p><p>协程：轻量级线程 线程本身重量级 Goroutine：可以实现上万个携程</p><p>例子:协程</p><p><img src="/study_photo/44.png" alt="image-20241109132554426"></p><p>go关键字开启协程</p><p>通过通信来共享内存</p><p><img src="/study_photo/45.png" alt="image-20241109132746410"></p><p>channel</p><p>make创建channel</p><p><img src="/study_photo/46.png" alt="image-20241109132925436"></p><p>有缓冲：</p><p>无缓冲：进行通信时（两个goroutine同步）也称同步通道</p><p>示例：</p><p><img src="/study_photo/47.png" alt="image-20241109133236164"></p><p>先make创建通道 把数字放入第一个通道里</p><p>然后b把src做平方运算</p><p>并发安全 Lock</p><p><img src="/study_photo/48.png" alt="image-20241109134052647"></p><p>Lock（）临界区</p><p><img src="/study_photo/49.png" alt="image-20241109134621688"></p><h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3.依赖管理"></a>3.依赖管理</h4><p>1.GOPATH</p><p>bin pkg src（项目源码）</p><p>无法实现package 的多版本控制</p><p>2.vendor存放依赖副本 也有弊端</p><p>3.go module 管理 解决了问题</p><p><img src="/study_photo/51.png" alt="image-20241109135629389"></p><p>indirect关键词</p><p><img src="/study_photo/52.png" alt="image-20241109140344112"></p><p>b（选择最低兼容版本）</p><h4 id="4-依赖分发"><a href="#4-依赖分发" class="headerlink" title="4.依赖分发"></a>4.依赖分发</h4><p>Github         SVN               …</p><p>​          Developer</p><p>无法保证构建稳定性</p><p>无法保证依赖可用性</p><p>增加第三方压力</p><p>Go proxy （）缓存内容版本 从proxy拉取依赖 减少第三方压力</p><p>Proxy1 -》 proxy2 -》 Direct  依次进行</p><h4 id="5-工具-go-get"><a href="#5-工具-go-get" class="headerlink" title="5.工具 go get"></a>5.工具 go get</h4><p>go mod       <strong>init tidy download</strong></p><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p>事故：</p><p><img src="/study_photo/59.png" alt="image-20241111092419264"></p><p>测试的重要性：避免事故的最后一道屏障</p><p>单元测试 mock测试   回归测试 集成测试</p><h5 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h5><p><img src="/study_photo/60.png" alt="image-20241111092633595"></p><p>保证代码整体覆盖率</p><p>提升效率</p><h5 id="2-规则"><a href="#2-规则" class="headerlink" title="2. 规则"></a>2. 规则</h5><p><img src="/study_photo/61.png" alt="image-20241111092852792"></p><h5 id="3例子："><a href="#3例子：" class="headerlink" title="3例子："></a>3例子：</h5><p><img src="/study_photo/62.png" alt="image-20241111093035601"></p><p>go test 【flags】 【packages】</p><h5 id="4-assert"><a href="#4-assert" class="headerlink" title="4.assert"></a>4.assert</h5><p><img src="/study_photo/63.png" alt="image-20241111093202556"></p><h5 id="5-覆盖率"><a href="#5-覆盖率" class="headerlink" title="5.覆盖率"></a>5.覆盖率</h5><p><img src="/study_photo/64.png" alt="image-20241111093237237"></p><p><img src="/study_photo/65.png" alt="image-20241111093252039"></p><p>提升覆盖率</p><p><img src="/study_photo/66.png" alt="image-20241111093436343"></p><p>对各个分支测试 使函数代码都经过完备的测试 提升覆盖率 减少事故</p><p><img src="/study_photo/67.png" alt="image-20241111093526971"></p><h5 id="6-依赖"><a href="#6-依赖" class="headerlink" title="6.依赖"></a>6.依赖</h5><p><img src="/study_photo/68.png" alt="image-20241111093723869"></p><h5 id="7-文件处理"><a href="#7-文件处理" class="headerlink" title="7.文件处理"></a>7.文件处理</h5><p><img src="/study_photo/69.png" alt="image-20241111093855592"></p><p>一旦文件被别人篡改 在特定场景下就无法运行！</p><h5 id="8-Mock"><a href="#8-Mock" class="headerlink" title="8.Mock"></a>8.Mock</h5><p><img src="/study_photo/70.png" alt="image-20241111094015817"></p><p>replacement 打桩函数</p><p><img src="/study_photo/71.png" alt="image-20241111094459861"></p><p>通过mock 不对 文件有强依&#x2F;study_photo&#x2F;70.png</p><p><img src="/study_photo/72.png" alt="image-20241111094758462"></p><p>优化：</p><p><img src="/study_photo/73.png" alt="image-20241111094944759"></p><p>fastrand</p><h4 id="10-项目实践"><a href="#10-项目实践" class="headerlink" title="10.项目实践"></a>10.项目实践</h4><p><img src="/study_photo/75.png" alt="image-20241111095222107"></p><p><img src="/study_photo/76.png" alt="image-20241111095416063"></p><p><img src="/study_photo/77.png" alt="image-20241111095526585"></p><p><img src="/study_photo/78.png" alt="image-20241111100016448"></p><p>话题id -》 获取所有post</p><p><img src="/study_photo/79.png" alt="image-20241111100134049"></p><p><img src="/study_photo/80.png" alt="image-20241111100208797"></p><p>初始化话题内存索引</p><p><img src="/study_photo/81.png" alt="image-20241111100306256"></p><hr><p>逻辑层：</p><p><img src="/study_photo/82.png" alt="image-20241111100415573"></p><p><img src="/study_photo/83.png" alt="image-20241111121526603"></p><p><img src="/study_photo/83.png" alt="image-20241111121719613"></p><p>并行处理</p><p><img src="/study_photo/84.png" alt="image-20241111121901723"></p><p><img src="/study_photo/85.png" alt="image-20241111122045428"></p><h3 id="三-高质量编程与实践"><a href="#三-高质量编程与实践" class="headerlink" title="三.高质量编程与实践"></a>三.高质量编程与实践</h3><p>如何编写更简洁和跟清晰的代码</p><p>熟悉GO程序性能分析工具</p><p>常用Go语言程序优化手段</p><p>了解工程性能优化的原则和流程</p><p>:性能调优    性能分析工具     性能调优案例</p><p>算法效率</p><h4 id="1-高质量编程"><a href="#1-高质量编程" class="headerlink" title="1.高质量编程"></a>1.高质量编程</h4><p>正确可靠 简洁清晰</p><p>各种边界条件是否考虑完备</p><p>异常情况处理 稳定性保证</p><p>易读易维护</p><p>团队合作保证容易读 维护 使其增加和调整更加快速 更加清晰</p><p>主要是给人看 让人可以看懂  对已有的功能改善 优化 容易添加功能</p><h4 id="2-编码规范"><a href="#2-编码规范" class="headerlink" title="2.编码规范"></a>2.编码规范</h4><p>代码格式</p><p>注释</p><p>命名规范</p><p>控制流程</p><p>错误和异常处理</p><p><img src="/study_photo/87.png" alt="image-20241112171014037"></p><p>不需要注释实现接口的方法 这种注释可以删除</p><p><img src="/study_photo/88.png" alt="image-20241112171126665"></p><h5 id="1-gofmt"><a href="#1-gofmt" class="headerlink" title="1.gofmt"></a>1.gofmt</h5><p>推荐使用gofmt 自动格式化代码为官方统一风格</p><h5 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h5><p>注释应该解释代码的作用</p><p>注释应该解释代码如何做的</p><p>注释应该解释代码实现的原因</p><p>注释应该解释代码什么情况会错</p><p><img src="/study_photo/89.png" alt="image-20241112171511567"></p><p>下面的根本不需要注释没有什么必要 函数名字已经说明了</p><p><img src="/study_photo/90.png" alt="image-20241112171655993"></p><p>最后一条语句是很难理解的  如果没有注释   一定要会看英文呵呵</p><p><img src="/study_photo/91.png" alt="image-20241112171909248"></p><p><img src="/study_photo/92.png" alt="image-20241112172349471"></p><p><img src="/study_photo/93.png" alt="image-20241112172623038"></p><p><img src="/study_photo/94.png" alt="image-20241112172638016"></p><p>此时的t就减少了很多东西</p><p><img src="/study_photo/95.png" alt="image-20241112172953450"></p><p>例如http中调用 Server 是 http.Server</p><p>若用 ServerHTTP   http.ServerHTTP这样感觉就变得冗余了没有必要</p><p><img src="/study_photo/96.png" alt="image-20241112173231246"></p><p>避免if else嵌套 包含同样语句可以去掉 重复语句</p><p><img src="/study_photo/97.png" alt="image-20241112173423686"></p><p>这样看起来比较复杂</p><p><img src="/study_photo/98.png" alt="image-20241112173532576"></p><p>调整后：</p><p><img src="/study_photo/99.png" alt="image-20241112173605956"></p><p>控制流程 ： 线性原理 尽量走直线 避免复杂的嵌套分支</p><h5 id="3-错误和异常处理"><a href="#3-错误和异常处理" class="headerlink" title="3.错误和异常处理"></a>3.错误和异常处理</h5><p><img src="/study_photo/100.png" alt="image-20241112173840011"></p><p><img src="/study_photo/101.png" alt="image-20241112173902743"></p><p><img src="/study_photo/102.png" alt="image-20241112174134842"></p><h4 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h4><h5 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h5><p>1.依靠数据而不是猜测<br>2.定位到最大瓶颈（也就是影响最大的部分），<br>3.不要过早优化<br>4.不要过度优化</p><h5 id="性能调优工具：pprof"><a href="#性能调优工具：pprof" class="headerlink" title="性能调优工具：pprof"></a>性能调优工具：pprof</h5><h5 id="pprof：可视化和性能分析数据的工具"><a href="#pprof：可视化和性能分析数据的工具" class="headerlink" title="pprof：可视化和性能分析数据的工具"></a>pprof：可视化和性能分析数据的工具</h5><p><img src="/study_photo/103.png" alt="image-20241112174134842"></p><h6 id="pprof实战项目："><a href="#pprof实战项目：" class="headerlink" title="pprof实战项目："></a>pprof实战项目：</h6><p>下载项目 并且运行：</p><p>GIthub：<a href="https://github.com/wolfogre/go-pprof-practice">https://github.com/wolfogre/go-pprof-practice</a></p><p><code>go run main.go</code></p><p>等待编译 等待一段时间</p><p>输入：<a href="http://localhost:6060/debug/pprof/">http://localhost:6060/debug/pprof/</a> 在浏览器中</p><p><img src="/study_photo/104.png" alt="image-20241112174134842"></p><p>此时的cpu 内存状态：</p><p><img src="/study_photo/111.png" alt="image-20241112174134842"></p><p><img src="/study_photo/112.png" alt="image-20241112174134842"></p><p><img src="/study_photo/113.png" alt="image-20241112174134842"></p><p>以下输出：<br><img src="/study_photo/114.png" alt="image-20241112174134842"></p><p><img src="/study_photo/115.png" alt="image-20241112174134842"></p><p>思考： 什么情况下 Flat &#x3D;&#x3D; Cum Flat&#x3D;&#x3D;0</p><p>分别为1. 函数中没有调用其他函数 都是本函数使用的时间<br>2. 函数中只有其他函数调用并且时间占用也很少可以忽略不计</p><p>在查看到tiger中有一部分占用了很大的时间 把相关的代码注释后</p><p>内存方面并没有解决什么</p><p>Heap：堆内存分析：</p><p>在终端使用这个指令<br><code>go tool pprof -http=:8080 &quot;http://localhost:6060/debug/pprof/heap&quot;</code><br>…没有下载工具先放一下</p><p>先截屏</p><p>锁：<br><code>go tool pprof -http=:8080 &quot;http://localhost:6060/debug/pprof/mutex&quot;</code></p><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><h5 id="GO语言优化"><a href="#GO语言优化" class="headerlink" title="GO语言优化"></a>GO语言优化</h5><p>内存管理优化</p><p>编译器优化</p><p>什么是性能优化 ，为什么要做性能优化？</p><p>：提升软件系统处理能力，减少不必要的消耗</p><p>：用户体验，让用户刷抖音不卡顿</p><p>：资源高效利用，成低成本，提高效率</p><p>业务代码：处理用户请i去</p><p>SDK：go的SDK</p><p>基础库：</p><p>这两部分提供抽象逻辑（数据结构 网络库 io库）</p><p>语言运行时： gc 调度器（go语言）</p><p>OS</p><p>性能分析工具：pprof</p><p>依靠数据而非猜测</p><p>优化最大瓶颈</p><p>Go的SDK</p><p>接口 命令 APIs</p><p>测试 来 驱动开发</p><p>隔离： 通过选择控制是否开启优化</p><p>可观测：</p><p>静态分析：</p><h5 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h5><p>基于追踪的垃圾回收</p><p>GC</p><p>动态内存 malloc</p><p>自动内存回收： 避免手动内存管理 专注于实现业务逻辑</p><p>保证内存使用的正确性和安全性</p><p>为新对象分配空间</p><p>偷懒了：实在不知道怎么记了 留着以后学的更深入一些再看吧</p><p><img src="/study_photo/149.png" alt="image-20241112174134842"></p><p><img src="/study_photo/150.png" alt="image-20241112174134842"></p><p><img src="/study_photo/151.png" alt="image-20241112174134842"></p><p><img src="/study_photo/152.png" alt="image-20241112174134842"></p><p><img src="/study_photo/153.png" alt="image-20241112174134842"></p><p><img src="/study_photo/154.png" alt="image-20241112174134842"></p><p><img src="/study_photo/155.png" alt="image-20241112174134842"></p><p><img src="/study_photo/156.png" alt="image-20241112174134842"></p><p><img src="/study_photo/157.png" alt="image-20241112174134842"></p><p><img src="/study_photo/158.png" alt="image-20241112174134842"></p><p><img src="/study_photo/159.png" alt="image-20241112174134842"></p><h4 id="四-数据库"><a href="#四-数据库" class="headerlink" title="四.数据库"></a>四.数据库</h4><h5 id="数据库database-sql"><a href="#数据库database-sql" class="headerlink" title="数据库database&#x2F;sql"></a>数据库database&#x2F;sql</h5><p><img src="/study_photo/160.png" alt="image-20241112174134842"></p><p><img src="/study_photo/161.png" alt="image-20241112174134842"></p><p>GORM ： 业务需求驱动开发</p><p><img src="/study_photo/162.png" alt="image-20241112174134842"></p><p><strong>基本用法</strong></p><p><img src="/study_photo/163.png" alt="image-20241112174134842"></p><p><img src="/study_photo/164.png" alt="image-20241112174134842"></p><p><strong>规定</strong></p><p><img src="/study_photo/165.png" alt="image-20241112174134842"></p><p>数据库约束</p><p>Select实现级联删除</p><h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><h5 id="1-经典排序算法"><a href="#1-经典排序算法" class="headerlink" title="1.经典排序算法"></a>1.经典排序算法</h5><p>为什么要用数据结构和算法：</p><p><img src="/study_photo/img_7.png" alt="image-20241112173840011"></p><p>最快的排序算法：<br>Go ： introsort </p><p>1.19的默认排序算法：如何设计的 生产环境和课本上的排序算法有什么区别</p><h6 id="1-插入排序：（洗牌）"><a href="#1-插入排序：（洗牌）" class="headerlink" title="1.插入排序：（洗牌）"></a>1.插入排序：（洗牌）</h6><p><img src="/study_photo/img_8.png" alt="image-20241112173840011"></p><p>时间复杂度：最好O（n）有序 平均O（n^2） 最坏 （n^2）</p><p>缺点：太慢 优点：最好</p><h6 id="2。快速排序："><a href="#2。快速排序：" class="headerlink" title="2。快速排序："></a>2。快速排序：</h6><p><img src="/study_photo/img_9.png" alt="image-20241112173840011"></p><p>时间复杂度；最好 O（n<em>logn） 平均O（n</em>logn）最坏O（n^2）</p><p>缺点 最坏太慢 优点 平均的挺好</p><h5 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3.堆排序"></a>3.堆排序</h5><p><img src="/study_photo/img_10.png" alt="image-20241112173840011"></p><p><img src="/study_photo/img_11.png" alt="image-20241112173840011"></p><h4 id="网络与部署"><a href="#网络与部署" class="headerlink" title="网络与部署"></a>网络与部署</h4><p>《负载均衡 高并发网关原理与实践》</p><p>协议基础</p><p>协议分析（自学）</p><p>熟悉tcp&#x2F;ip 熟悉计算机网络</p><p>抖音视频 加载出来 会有什么交互（网络是如何交互的）（为什么刷抖音又快又稳）（计算机网络要解决什么问题 发现什么问题）</p><p>应用层：  域名解析（DNS） 图片下载 视频下载（HTTP）评论API&#x2F;HTTP</p><p>网络接入 网络传输</p><p>手机要先访问抖音服务器</p><p><img src="/study_photo/116.png" alt="image-20241116152733233"></p><p>终端（pc pad） 通过 4g &#x2F;wifi 通过有线网络 接入 四大运营商网络 -》 接通抖音的机房（服务器） 还用通过光缆（海底） 接通 美国网络</p><h5 id="网络接入-（路由）"><a href="#网络接入-（路由）" class="headerlink" title="网络接入 （路由）"></a>网络接入 （路由）</h5><p>交换机&#x2F;逻辑交换机&#x2F;网络虚拟化</p><p>路由一定对称吗？</p><p>路由是工作在哪一层协议？</p><p>路由协议（ip层） 本身不是ip层 动态路由协议（传输层协议bgp）（基于tcp udp）可能 不是很简单</p><p>路由改的是ip地址吗？</p><p>不是改ip地址 而是mac地址 路由是为了找到目标ip</p><p>怎么找下一跳（网络中间节点）的MAC 通过 ARP协议 跨网段 不能发送ARP</p><p>同网段可以发送ARP 否则需要一级一级的发送  免费ARP：（）新加入机器（向其中发送免费ARP ： 防止ip冲突 在同一局域网里有两个同一个ip ）</p><p>ARP：本质是查找下一跳MAC 而不是目标请求地址</p><p>ARP 代理： 中间设备抢先应答 （）</p><p><img src="/study_photo/117.png" alt="image-20241116154311845"></p><p><img src="/study_photo/118.png" alt="image-20241116154131510"></p><p>IP协议</p><p>唯一标识</p><p>为什么Mac（2层）（以太网） 地址不能代替ip协议 ： IP协议把MAC地址问题 解决了</p><p>ipv4不够用 怎么解决：如果不支持ipv6 ， 用NAT（原理 内部用户 通过NAT）</p><p><img src="/study_photo/119.png" alt="image-20241116155224812"></p><p>问题2 ： （NAT ip＋端口）一起改变 解决第二个问题</p><h4 id="网络打通视频怎么下载"><a href="#网络打通视频怎么下载" class="headerlink" title="网络打通视频怎么下载"></a>网络打通视频怎么下载</h4><p><img src="/study_photo/120.png" alt="image-20241116155401344"></p><p><img src="/study_photo/121.png" alt="image-20241116155543012"></p><p>也就是服务的封装与拆解</p><p>如何把域名映射到ip （DNS基于UDP协议（端口＋校验））</p><p><img src="/study_photo/122.png" alt="image-20241116155905523"></p><p>避免分片</p><p>丢包丢了UDP也不知道</p><h4 id="TCP连接-三次握手"><a href="#TCP连接-三次握手" class="headerlink" title="TCP连接 三次握手"></a>TCP连接 三次握手</h4><p>TCP连接状态</p><p>如果拔了网线，连接会断吗（没有什么关系）</p><p>keep-alive ：保活机制（不会一定断开在一定场景下）</p><h4 id="TCP传输"><a href="#TCP传输" class="headerlink" title="TCP传输"></a>TCP传输</h4><p><img src="/study_photo/123.png" alt="image-20241116160324196"></p><p>很复杂的协议</p><p>Timewait？（） 状态复杂</p><p>TCP丢包</p><p>滑动窗口</p><p>流量控制</p><h4 id="网络传输-HTTP-HTTP1-1"><a href="#网络传输-HTTP-HTTP1-1" class="headerlink" title="网络传输 HTTP&#x2F;HTTP1.1"></a>网络传输 HTTP&#x2F;HTTP1.1</h4><p><img src="/study_photo/124.png" alt="image-20241116161839691"></p><p>HTTPS 解密 出来仍然是HTTP</p><p>防止中间者偷听一些东西  加密之后中间人听不懂</p><p>SSL&#x2F;TLS握手 非对称加密 对称加密</p><p><img src="/study_photo/125.png" alt="image-20241116162211539"></p><h5 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h5><p>网络提速</p><p>HTTP 2.0 （多路复用） 并行下载 并行访问</p><p>一次性加载了多个图片 （并行请求 一次性发送了）</p><p><img src="/study_photo/126.png" alt="image-20241117194455726"></p><p>多路复用：</p><p><img src="/study_photo/127.png" alt="image-20241117194604452"></p><p>TCP （丢包 其他包等待（对头阻塞））</p><p><img src="/study_photo/128.png" alt="image-20241117194853572"></p><p><strong>协议优化：</strong></p><p>TCP本身协议不可插拔</p><p>UDP（基于UDP扩展）</p><p>kernel （windows mac 安卓 ios ）是否都要去实现呢？</p><p>Google实现在了用户态（方便）</p><p>RTT</p><p>QUIC（实现了UDP的扩展）(弱网优势) （解决了队头堵塞）（优化了HTTp2.0的多路复用）</p><p><strong>路径优化</strong></p><p><img src="/study_photo/129.png" alt="image-20241117195324763"></p><p>服务器集合（数据中心）</p><p>POP接入（核心机房） 边缘机房（靠近用户（上海电信 上海移动……））</p><p><strong>同运营商访问</strong> （访问客户端ip  电信 解析到 电信）</p><p>电信 访问 电信</p><p>移动 访问 移动</p><p>若要使两者跨网访问（丢包率较高）</p><p>路径优化（CDN） 网络提速-静态资源 （边缘机房（缓存）直接从缓存中取出资源 如果找不到 -》 核心机房）</p><p>动态API （播放 &#x2F; 评论接口）（因为信息不一样）</p><p><img src="/study_photo/130.png" alt="image-20241117195852655"></p><p>DSA（路径优化算法） 直连最快</p><p>机房延迟探测 （做成表（通过算法 找到最优路径））</p><h5 id="网络提速的优化之路"><a href="#网络提速的优化之路" class="headerlink" title="网络提速的优化之路"></a>网络提速的优化之路</h5><p>几天就挂了怎么办？？</p><p>抖音稳定性如何调高？</p><p><img src="/study_photo/131.png" alt="image-20241117200255063"></p><p><img src="/study_photo/132.png" alt="image-20241117200401223"></p><p>专线： 内部字节机房-》没有走外部internet（如果走internet 如果从北京 访问 上海 可能会造成中间去到江苏再回到上海这样会很慢 并且丢包等）-》自己拉线连接两个机房（通过交换机等）（这样速度更快）</p><p>b -》 c  外网：机房内部专线以外的网络通过internet连接 （如果专线挂了）需要走外网容灾 微服务可能跨机房</p><p><img src="/study_photo/133.png" alt="image-20241117200824142"></p><p>全局容灾系统 ：  A机房不可用了 （自动容灾） 探测机房b的容量可以承载 a机房的容量</p><p>自动降级&#x2F;容灾</p><p>云到端 SDK告诉端，不要访问，崩了的A机房   云控   什么场景云控控制不到（Web服务器 字节搜索&#x2F;百度搜索 ）</p><p>故障明确</p><p>沟通： 明确是什么业务 什么接口故障</p><p>故障体现在哪？ 其他目标是否访问正常（业务A有故障 接口A有问题 其他的是否有问题？）</p><p>是否是修改导致的异常？（如果是就回退）</p><p>如果你上传导致的错误（找是谁 ）</p><p>先止损 再 排查（debug）</p><p>如何止损</p><p>分段排查</p><p><img src="/study_photo/134.png" alt="image-20241117202312571"></p><h5 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h5><p><img src="/study_photo/135.png" alt="image-20241117202359378"></p><p>最后一个是抓包工具</p><p>误判断 摘除了 好的服务器</p><p>线上debug（p0级别事故）</p><p><img src="/study_photo/136.png" alt="image-20241117202838541"></p><p>抓包：</p><p>快速发包（路由对称）实际路由并不是对称的（找下一跳） 故障预防真的很重要</p><h5 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h5><p><img src="/study_photo/137.png" alt="image-20241117203250586"></p><p><img src="/study_photo/138.png" alt="image-20241117203354461"></p><h4 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h4><p>输入网页到内容加载出来 中间都经历了什么 （TCP握手 SSL 域名解析）</p><p>浏览器抓包</p><p>看第一条请求了什么</p><p><img src="/study_photo/139.png" alt="image-20241118125748346"></p><p>网络卡 还是服务器满 还是什么？</p><p>企业接入：</p><p>域名系统 自建DNS服务器 HTTPS 接入全站加速 四层负载均衡 七层负载均衡</p><p>example公司  Host -》 ip映射</p><p>问题： 流量和负载 名称冲突 时效性（）</p><h5 id="使用域名系统"><a href="#使用域名系统" class="headerlink" title="使用域名系统"></a>使用域名系统</h5><p>使用域名系统 替换hosts</p><p><img src="/study_photo/140.png" alt="image-20241118130222229"></p><p>域名购买  购买二级域名 example.com  域名备案防止从事非法运动</p><p>建设外部网站：</p><p><img src="/study_photo/141.png" alt="image-20241118130420184"></p><p>自建DNS：</p><p>取代云厂商</p><p><img src="/study_photo/142.png" alt="image-20241118130700240"></p><p>先访问 本地DNS服务器 -》 根 -》 顶级 -》权威-》本地缓存</p><h5 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h5><p><img src="/study_photo/143.png" alt="image-20241118130854468"></p><h5 id="权威DNS系统架构"><a href="#权威DNS系统架构" class="headerlink" title="权威DNS系统架构"></a>权威DNS系统架构</h5><p><img src="/study_photo/144.png" alt="image-20241118131553232"></p><h5 id="接入HTTPS协议"><a href="#接入HTTPS协议" class="headerlink" title="接入HTTPS协议"></a>接入HTTPS协议</h5><p>HTTP明文传输 被抓去后 信息很容易被暴露出来</p><p>加密算法：</p><p>对称加密： 一份密钥</p><p>非对称加密 ： 公钥和私钥 （公钥加密私钥解密 或者  对调）（锁头和钥匙）</p><p>SSL 通信过程：</p><p><img src="/study_photo/145.png" alt="image-20241118174903171"></p><p>证书链：</p><p>公钥是不是可信的 会不会被劫持？</p><p>数字签名</p><p>外网访问站点一定是一帆风顺的吗：</p><p>1.源站（网站） 容量第 可承载的并发请求数低 容易打跨</p><p>2.报文经过的网络设备越多 出问题概率越大 丢包 劫持</p><p>3.自主选择网络链路长 时延高</p><p>整体看来：就是响应慢 卡顿</p><p>优化：</p><p>增加后端机器扩容 静态内容</p><p>全站加速：</p><p>静态加速：CDN</p><p>cpu访问 （缓存）</p><p>动态加速：</p><p><img src="/study_photo/146.png" alt="image-20241118175913629"></p><p>DCDN原理 ：</p><p>RTT： 用户到核心</p><p>用户到边缘</p><p>边缘到汇聚</p><p>汇聚到核心</p><h5 id="全站加速"><a href="#全站加速" class="headerlink" title="全站加速"></a>全站加速</h5><p><img src="/study_photo/147.png" alt="image-20241118180340066"></p><p><img src="/study_photo/148.png" alt="image-20241118180356658"></p><h4 id="消息队列-kafka"><a href="#消息队列-kafka" class="headerlink" title="消息队列 kafka"></a>消息队列 kafka</h4><p>用户行为： 搜索 点赞 评论 收藏</p><p>使用场景： 搜索服务， 直播服务 订单服务 支付服务</p><p>如何使用Kafka： 创建集群 新增topic 编写生产者逻辑 编写消费之逻辑</p><p><img src="/study_photo/196.png" alt="image-20241125172137241"></p><p><img src="/study_photo/197.png" alt="image-20241125172850441"></p><p>Kafka架构：</p><p>Zookeeper</p><p>Producer 批量发送</p><pre><code>      数据压缩</code></pre><p>Broker 数据存储 消息文件结构</p><p>磁盘结构</p><p>​操作系统：</p><p><img src="/study_photo/198.png" alt="image-20241125174036284"></p><p>顺序写： 提高写入效率</p><p><img src="/study_photo/199.png" alt="image-20241125174650570"></p><p>Broker 偏移量索引文件</p><p>二分查找</p><p><img src="/study_photo/200.png" alt="image-20241125174726467"></p><p>Broker 时间戳索引文件</p><p>传统数据拷贝：</p><p>操作系统层面： 数据的内存拷贝（开销很大）</p><p><img src="/study_photo/201.png" alt="image-20241125175012153"></p><p>Broker零拷贝</p><p><img src="/study_photo/202.png" alt="image-20241125175137912"></p><p>Consumer-消息接收端</p><p><img src="/study_photo/203.png" alt="image-20241125175549378"></p><p>通过手动分配 哪一个Consumer消费哪一个Partition 完全由业务决定</p><p>缺点</p><p>不能自动容灾</p><p>优点：</p><p>快</p><p>自动分配 High-level</p><p><img src="/study_photo/204.png" alt="image-20241125180033073"></p><p><img src="/study_photo/205.png" alt="image-20241125180233648"></p><h4 id="存储与数据库"><a href="#存储与数据库" class="headerlink" title="存储与数据库"></a>存储与数据库</h4><p>数据的持久化</p><p>1.校验数据的合法行</p><p>（名字是否存在） （修改内存 用高效的数据结构组织数据）（写入存储介质 以寿命 性能友好写入硬件）（）</p><p><img src="/study_photo/206.png" alt="image-20241126175430987"></p><p>什么是存储系统？</p><p>一个提供了 读写 控制类接口 能够安全有效的 把 数据持久化的软件 称为 存储系统</p><p>user Medium Memory Network(把原有的单机 升级到分布式系统) 还可能与这些有关</p><p>特点：</p><p>性能敏感 容易受硬件影响  代码既简单又复杂（考虑到多种异常情况）</p><p>存储器层级结构：</p><p>Persistent Memory</p><p>数据怎么从应用到存储介质</p><p><img src="/study_photo/207.png" alt="image-20241126180440273"></p><p>数据拷贝 消耗cpu 如果cpu全部用来拷贝 软件性能就会降低（减少拷贝的使用） Disk（）</p><p>RAID技术： 单机存储怎么做到 高性能&#x2F;高性价比&#x2F;高可靠性</p><p>背景： 大容量磁盘价格》 多块小容量磁盘</p><p>单块磁盘的写入性能 《 多块磁盘的并发写入性能</p><p>RAID0</p><p>多块磁盘的简单组合</p><p>数据条带化存储 调高磁盘带宽</p><p>没有额外的容错设计</p><p>RAID1</p><p>一块磁盘对应一块额外镜像盘</p><p>真是空间利用率50%</p><p>容错能力强</p><p>上面是两个极端</p><p>RAID 0 + 1</p><p>RAID 0 和 RAID 1</p><h5 id="数据库和存储系统不一样吗？"><a href="#数据库和存储系统不一样吗？" class="headerlink" title="数据库和存储系统不一样吗？"></a>数据库和存储系统不一样吗？</h5><p>关系型数据库（是存储系统）</p><p>非关系型数据库</p><p>关系是什么： 关系模型（EFCodd）&#x3D; 集合 反映了事务间的关系</p><p>关系代数 &#x3D; 运算的抽象查询语句</p><p>SQL &#x3D; 一种DSL （方便人类阅读的 关系代数表达式）</p><p>关系型数据库：结构化数据友好 支持事务（ACID）支持复杂的查询语言（sql 全集 子集）</p><p>非关系型数据库（也是存储系统）： 半结构化数据友好 可能支持事务（ACID） 可能支持复杂查询语言</p><p>数据库 vs 经典存储 - 结构化数据管理</p><p><img src="/study_photo/208.png" alt="image-20241126181756913"></p><h5 id="事务能力："><a href="#事务能力：" class="headerlink" title="事务能力："></a>事务能力：</h5><p>要么全做 要么全不做</p><p>数据状态是一致的</p><p>可以隔离多个并发事务 避免影响</p><p>事务一旦提交成功 数据保持持久性</p><h5 id="复杂查询能力："><a href="#复杂查询能力：" class="headerlink" title="复杂查询能力："></a>复杂查询能力：</h5><p>复杂查询： 请查询出以xiao开头 密码提示问题小于10个字的人 并按照性别分组统计人数</p><p><img src="/study_photo/209.png" alt="image-20241126182318775"></p><p>左边灵活简介 右边复杂</p><h4 id="支流产品剖析"><a href="#支流产品剖析" class="headerlink" title="支流产品剖析"></a>支流产品剖析</h4><h5 id="单机存储系统"><a href="#单机存储系统" class="headerlink" title="单机存储系统"></a>单机存储系统</h5><p>单个计算机节点上的存储软件系统 一般不涉及网络交互</p><p>key-value存储 本地文件系统</p><p>本地文件系统</p><p>一切皆文件：</p><p>文件系统管理单元： 文件</p><p>文件系统接口： 文件系统繁多 Ext2 遵循VFS统一抽象接口</p><p>linux 文件系统的两大数据结构 ：Index Node   Directory Entry</p><ol><li>innode 记录文件元数据 如id 大小 权限 磁盘位置</li><li>innode 是一个文件的唯一标识  会被存储到磁盘上</li><li>innode总数在格式化文件系统时就固定了</li></ol><p>​1：1</p><p>1.Directory Entry</p><p>记录文件名 innode指针 层级关系</p><p>dentry时内存结构 与innode 关系时N：1</p><p>key-value存储</p><p><img src="/study_photo/210.png" alt="image-20241126183518576"></p><p>put(k,v) get(k)</p><p>LSM-Tree 某种程度上牺牲读性能 追求写入性能（）</p><p>拳头产品： RocksDB</p><p>分布式存储：</p><p>在单机存储基础上实现了分布式协议，实际大量网络交互</p><p>分布式文件系统  分布式对象存储系统</p><p>HDFS ：</p><p>核心：</p><p>支持海量数据存储（使用普通硬件堆叠）</p><p>高容错性</p><p>弱POSIX语义</p><p>使用普通x86服务器-极高性价比高</p><p>DataNode</p><p>Ceph- （分布式存储）开源分布式存储系统里的【万金油】 里面的算法很好</p><p>一切皆对象；</p><p>数据写入采用主备复制模型</p><p>数据分布模型采用CRUSH算法</p><p>单机数据库</p><p>单个计算机节点上的数据库系统</p><p>事务在单机内执行 通过网络交互实现分布式事务</p><p>关系数据库</p><p>商业产品Oracle</p><p>开源产品 MySQL PostgreSQL</p><p><img src="/study_photo2/1.png" alt="image-20241127101722363"></p><p><img src="/study_photo2/2.png" alt="image-20241127101919309"></p><p>Page  <em>Redo Log</em>  临时文件</p><p>内存 与 磁盘之间的交互</p><p><img src="/study_photo2/3.png" alt="image-20241127102206620"></p><p>非关系型数据库 没有准则 交互方式各不相同</p><p>schema相对灵活</p><p>SQL查询语言的统治地位很重视</p><p><img src="/study_photo2/4.png" alt="image-20241127102716222"></p><p>模糊搜索</p><p><img src="/study_photo2/5.png" alt="image-20241127102924660"></p><p>Query： match 编程语言 好 难度  模糊匹配到小明的帖子 ES天然能够做 模糊搜索 还能自动算出关联程度 传统关系型无法做到这一点</p><p>分布式数据库（引入分布式架构）：</p><p>容量 弹性 性价比 解决单机时代遇到的问题</p><p>解决容量问题：</p><p><img src="/study_photo2/6.png" alt="image-20241127103344147"></p><p>存储池 动态扩缩容</p><p>弹性问题：</p><p><img src="/study_photo2/7.png" alt="image-20241127103713521"></p><p>随着业务的变化而变化 1t如何搬到200g？</p><p>池化！</p><p>性价比问题</p><p><img src="/study_photo2/8.png" alt="image-20241127103908948"></p><p>硬件disk不需要怎么准备 什么不够用Storge Pool 分布式存储池来解决这个问题</p><p>磁盘池化 内存池化（降低成本）</p><p>单写vs多写     从磁盘弹性到内存弹性    分布式事务优化</p><h5 id="新技术演进"><a href="#新技术演进" class="headerlink" title="新技术演进"></a>新技术演进</h5><p>软件架构变更（依赖于操作系统内核） AI增强（智能存储格式转换） 新硬件革命（存储介质变更 计算单元变更 网络硬件变更）</p><p><img src="/study_photo2/9.png" alt="image-20241127104445468"></p><p>cpu中断 使性能降低 与之替换的是用轮询替换</p><p><img src="/study_photo2/10.png" alt="image-20241127104706603"></p><p>数据存储格式的转换 左边是二维表由 多个行与列 行存 列存 （优势 劣势）</p><p>ai决策-》行列混存（动态性强）</p><p><img src="/study_photo2/11.png" alt="image-20241127104909837"></p><p><img src="/study_photo2/12.png" alt="image-20241127105517074"></p><p>硬件反推软件变革</p><h5 id="课后作业-1"><a href="#课后作业-1" class="headerlink" title="课后作业"></a>课后作业</h5><p><img src="/study_photo2/13.png" alt="image-20241127105647523"></p><p>材料引用</p><p><img src="/study_photo2/14.png" alt="image-20241127105742332"></p><h4 id="深入理解RDBMS（关系型数据库）"><a href="#深入理解RDBMS（关系型数据库）" class="headerlink" title="深入理解RDBMS（关系型数据库）"></a>深入理解RDBMS（关系型数据库）</h4><p>存储系统:</p><p>块存储 文件存储 对象存储 key-value存储</p><p>数据库系统：</p><p>大型关系数据库 非关系型数据库</p><p>抖音红包雨</p><p>从抖音账号扣除1个亿</p><p><img src="/study_photo2/15.png" alt="image-20241127110101367"></p><p>事务ACID</p><p><img src="/study_photo2/16.png" alt="image-20241127110324168"></p><p>红包雨与ACID</p><p><img src="/study_photo2/17.png" alt="image-20241127110453611"></p><p>事务要同时成功与同时失败</p><p>账户的钱不能为复数</p><p><img src="/study_photo2/18.png" alt="image-20241127110554045"></p><p>操作一定要是合法的</p><p>隔离性问题 ： 两个操作同时进行 有相互影响的关系</p><p><img src="/study_photo2/19.png" alt="image-20241127110756892"></p><p>刚开始抢了一个亿（成功） 但是服务器挂了</p><p><img src="/study_photo2/20.png" alt="image-20241127111019483"></p><p><strong>高并发</strong></p><p>10亿人 同时抢红包 一定 数据要有处理高并发的能力 每秒处理事务的请求</p><p><strong>高可靠</strong></p><p>在关键时间和结点上 保证后台服务可靠</p><p>从 纸 到 磁盘文件</p><p>第一个数据库 网状数据库（W.Bachman）</p><p>​             Collage</p><p>English   computer  Maths</p><p>多对多</p><p>没有交叉</p><p>结点 网络结构 父节点可以有多个子节点</p><p>层次模型（IBM）</p><p>用树形结构描述实体 与 网状结构相似 但是并不交叉树状</p><p>每个子节点只有一个父节点</p><p>（1对多）</p><p>关系模型（IBM）（EFCodd博士）</p><p><img src="/study_photo2/21.png" alt="image-20241127113215926"></p><h5 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h5><p>一条SQL的一生 ：</p><p>解析SQL（语法解析器） 语法树AST  优化器 Plan Executor（执行器） 写入数据 写入日志</p><p><img src="/study_photo2/22.png" alt="image-20241127150742531"></p><p>分析</p><p><img src="/study_photo2/23.png" alt="image-20241127151110898"></p><p>为什么还要优化器？（Optimizer）  类比于 （高德地图路线优化） 快 慢 红绿灯</p><p>基于规则的优化</p><p>条件简化……</p><p>Scan优化</p><p><img src="/study_photo2/24.png" alt="image-20241127151708954"></p><p>基于代价优化：</p><p>时间是代价 最少时间到目的地</p><p>io cpu NET MEM也是代价</p><p>火山模型：</p><p><img src="/study_photo2/25.png" alt="image-20241127152543557"></p><p>向量化：</p><p>每次返回是一批数据 而不是一行数据</p><p>优点：</p><p>函数调用次数降低为1&#x2F;N</p><p>CPU cache命中率更高</p><p>可以利用CPU提供SIMD机制 一次加法（可以操作多个数据）</p><p>编译执行：</p><h5 id="存储引擎-InnoDB"><a href="#存储引擎-InnoDB" class="headerlink" title="存储引擎-InnoDB"></a>存储引擎-InnoDB</h5><p>内存态（做一点内存缓存）</p><p><img src="/study_photo2/26.png" alt="image-20241127153304028"></p><p>存储引擎-Buffer Pool</p><p>instance0</p><p>instance1</p><p>HashMap管理</p><p>LRU 算法</p><p>保留最近最常使用的保存在内存 其他的 淘汰</p><p>内存放不下？ 放磁盘  从磁盘访问数据</p><p><img src="/study_photo2/27.png" alt="image-20241127153706131"></p><p>存储引擎-Page</p><p>B+Tree索引 B树的扩展（二分查找树）</p><p><img src="/study_photo2/28.png" alt="image-20241127154133896"></p><h5 id="事务引擎："><a href="#事务引擎：" class="headerlink" title="事务引擎："></a>事务引擎：</h5><p>原子性   与   Undo Log</p><p>同步失败或成功</p><p>如何将数据库回退到修改之前的状态？</p><p>Undo日志：</p><p>逻辑日志 进行事务回滚 保证原子性</p><p><img src="/study_photo2/29.png" alt="image-20241127154501380"></p><p>isolation 与 锁</p><p>如果两个操作同时发生 发生冲突怎么办</p><p>锁机制</p><p>Share Lock 共享锁 读读 两个人都有共享锁</p><p>Exclusice Lock 写锁 读写 一个有写锁另一个不能有</p><p>读写   -》  MVCC数据的多版本</p><p><img src="/study_photo2/30.png" alt="image-20241127154917696"></p><p>一致性：</p><p>对数据的修改 永久保存</p><p>方案一 事务提交前页面写盘</p><p>随机io 写放大</p><p>方案二 WAL</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>后端项目学习</title>
      <link href="/2024/11/09/%E9%A1%B9%E7%9B%AE/Simple_bank/"/>
      <url>/2024/11/09/%E9%A1%B9%E7%9B%AE/Simple_bank/</url>
      
        <content type="html"><![CDATA[<h1 id="重新开启simplebank学习！！！"><a href="#重新开启simplebank学习！！！" class="headerlink" title="重新开启simplebank学习！！！"></a>重新开启simplebank学习！！！</h1><h3 id="一-创建数据库表"><a href="#一-创建数据库表" class="headerlink" title="一.创建数据库表"></a>一.创建数据库表</h3><p><a href="https://dbdiagram.io/">https://dbdiagram.io</a> 可视化数据库工具</p><h4 id="1-创建账户表"><a href="#1-创建账户表" class="headerlink" title="1.创建账户表"></a>1.创建账户表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table accounts as A &#123; <span class="comment">//A作为account的别名</span></span><br><span class="line">  id bigserisal [pk]  <span class="comment">//pk作为主键 自增的id列</span></span><br><span class="line">  owner varchar</span><br><span class="line">  balance bigint</span><br><span class="line">  currency varchar </span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//自动获取时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建条目表"><a href="#2-创建条目表" class="headerlink" title="2.创建条目表"></a>2.创建条目表</h4><p>&#x2F;&#x2F;记录账户余额的变化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk] <span class="comment">//</span></span><br><span class="line">  account_id bigint [ref : &gt; A.id] <span class="comment">//外键 账户和条目之间是1对多关系</span></span><br><span class="line">    amount bigint [not null note:<span class="string">`可以是负或者正`</span>] <span class="comment">//正负取决于取出还是存入 note是添加注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//记录条目的创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建-转账表"><a href="#3-创建-转账表" class="headerlink" title="3.创建 转账表"></a>3.创建 转账表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  amount  bigint [not null note: <span class="string">`一定不能为空`</span>]<span class="comment">//note为注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此之后向列中添加非空约束 例如 ：</p><p>balance bigint [not null] &#x2F;&#x2F;  <strong>非空约束是一种用于限制数据库表中某列不能为空的约束</strong></p><p>枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enum Currency&#123;</span><br><span class="line">USD</span><br><span class="line">EUR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向表中添加索引</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use DBML to define your database structure</span></span><br><span class="line"><span class="comment">// Docs: https://dbml.dbdiagram.io/docs</span></span><br><span class="line"></span><br><span class="line">Table accounts as A &#123;</span><br><span class="line">  id bigserisal [pk]</span><br><span class="line">  owner varchar [not null]</span><br><span class="line">  balance bigint [not null]</span><br><span class="line">  currency varchar  [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    owner</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  account_id bigint [ref : &gt; A.id] </span><br><span class="line">  </span><br><span class="line">  amount bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//列出特定账户的所有条目</span></span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  amount  bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些做好之后使用导出功能 生成代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserisal PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将外键添加到表中</span></span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二-Docker"><a href="#二-Docker" class="headerlink" title="二.Docker"></a>二.Docker</h3><p><strong>用指令创建容器的时候 一定要注意-p参数 将容器的端口映射到主机上 一定要保证端口不要被占用 否则将会产生问题</strong></p><p>拉取镜像语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>开始一个容器指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.docker run --name &lt;container_name&gt; -e &lt;environment_variable&gt; -d &lt;image&gt;:tag</span><br><span class="line">:</span><br><span class="line">2.docker run --name some-postgres -e POSTGRES_PASSWORD=mysecret -d postgres </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！！！端口映射 -p 5432:5432 //注意防止端口冲突自行更改</span></span><br><span class="line">示例：</span><br><span class="line">docker run --name postgres12 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine </span><br><span class="line"></span><br><span class="line">3. docker exec -it &lt;contain_name_or_id&gt; &lt;comman&gt; [args]</span><br><span class="line">示例：#进入psql控制台</span><br><span class="line">docker exec -it postgres12 psql -U root</span><br><span class="line"></span><br><span class="line">4.显示容器日志</span><br><span class="line">docker logs &lt;container_name_or_id&gt;</span><br><span class="line">示例:</span><br><span class="line">docker logs postgres12</span><br><span class="line"></span><br><span class="line">5.连接shell</span><br><span class="line">指令：</span><br><span class="line">docker exec -it postgres12 /bin/sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建新的数据库</span></span><br><span class="line">createdb --username=root --owner=root simple_bank</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用psql连接</span></span><br><span class="line"> psql simple_bank</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">删除数据库</span></span><br><span class="line"> dropdb [名称]</span><br><span class="line"> </span><br><span class="line"> exit退出shell</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">指令结合</span></span><br><span class="line"> docker exec -it postgres12 createdb --username=root --owner=root simple_bank</span><br><span class="line"> docker exec -it postgres12 psql -U root simple_bank</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查找指令</span></span><br><span class="line"> history | grep &quot;docker run&quot; //linux</span><br><span class="line"> history | Select-String &quot;docker run&quot;//windows</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>区分 docker中的 镜像和容器</p><p>docker image中包含多个运行 容器的应用实例 类似结构：</p><p>- docker image</p><ul><li>├── container1</li></ul><ul><li><p>├──container2</p></li><li><p>├──container3</p></li></ul><h3 id="三-Tableplus"><a href="#三-Tableplus" class="headerlink" title="三.Tableplus"></a>三.Tableplus</h3><p>将sql文件导入到tableplus中</p><p>在tableplus中删除表 使用sql指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> accounts CASCADE; <span class="operator">/</span><span class="operator">/</span>注意替换表名称</span><br></pre></td></tr></table></figure><h3 id="四-DB-migration"><a href="#四-DB-migration" class="headerlink" title="四.DB migration"></a>四.DB migration</h3><p>迁移指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq init_schema</span><br></pre></td></tr></table></figure><p>up&#x2F;down migration：理解迁移 类比栈结构 向上新数据表 向下 旧数据表</p><p><strong>使用migrate up指令时         Old DB 在文件中 一次按照 1.up.sql 2.up.sql 3.up.sql 依次运行到New DB</strong></p><p><strong>使用migrate down指令时  New DB 在文件中依次按照 3.up.sql 2.up.sql  1.up.sql 依次运行到Old DB</strong></p><p><strong>old DB schema</strong> —–&gt; migrate up —––&gt; x.up.sql —–&gt;<strong>New DB schema</strong></p><p>​      &lt;—————————-  x.down.sql &lt;———migrate down&lt;————-</p><p>将最开始的.sql文件放入 .up.sql中</p><h3 id="五-Makefile文件"><a href="#五-Makefile文件" class="headerlink" title="五.Makefile文件"></a>五.Makefile文件</h3><p><strong>创建规则后使用  make指令 快速创建</strong></p><p>如果你是萌新开始给到你一个项目 你可以通过makefile文件快速构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">migrate -help</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过看日志 知道使用什么指令来工作</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">迁移指令</span></span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank&quot; -verbose up</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现ssl错误</span></span><br><span class="line">添加sslmode=disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现了一系列的迁移错误   解决方案</span></span><br><span class="line">强制更改版本</span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; -verbose force 1</span><br></pre></td></tr></table></figure><h3 id="六-数据库的CRUD"><a href="#六-数据库的CRUD" class="headerlink" title="六.数据库的CRUD"></a>六.数据库的CRUD</h3><p>DATAVASE&#x2F;SQL库</p><p>GORM</p><p>sqlx（兼容多）</p><p>sqlc（最好的 融合了以上两者的优点）</p><h3 id="七-使用sqlc"><a href="#七-使用sqlc" class="headerlink" title="七.使用sqlc"></a>七.使用sqlc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlc init</span><br></pre></td></tr></table></figure><p>介绍:</p><p>sqlc 从 SQL 生成<strong>类型安全的代码</strong>。以下是它的工作原理：</p><ol><li>您使用 SQL 编写查询。</li><li>运行 sqlc 来生成具有这些查询的类型安全接口的代码。</li><li>编写调用生成的代码的应用程序代码。</li></ol><p>查看<a href="https://play.sqlc.dev/">一个交互式示例</a>来了解它的实际应用，以及 sqlc 背后的动机的<a href="https://conroy.org/introducing-sqlc">介绍性博客文章</a>。</p><h3 id="八-sqlc-yaml"><a href="#八-sqlc-yaml" class="headerlink" title="八.sqlc.yaml"></a>八.sqlc.yaml</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line">sql:</span><br><span class="line">- schema: <span class="string">&quot;simplebank/db/migration&quot;</span> <span class="comment">//数据库表</span></span><br><span class="line">  queries: <span class="string">&quot;db/query&quot;</span> <span class="comment">//数据库查询 首先要编写数据库查询</span></span><br><span class="line">  engine: <span class="string">&quot;postgresql&quot;</span> <span class="comment">//使用的数据库</span></span><br><span class="line">  gen:</span><br><span class="line">    <span class="keyword">go</span>: </span><br><span class="line">      <span class="keyword">package</span>: <span class="string">&quot;db&quot;</span></span><br><span class="line">      out: <span class="string">&quot;simplebank/db/sqlc&quot;</span></span><br><span class="line">      sql_package: <span class="string">&quot;pgx/v5&quot;</span></span><br><span class="line">      emit_json_tags: <span class="literal">true</span></span><br><span class="line">      emit_interface: <span class="literal">false</span></span><br><span class="line">      emit_empty_slices: <span class="literal">true</span></span><br><span class="line">      overrides:</span><br><span class="line">        - db_type: <span class="string">&quot;timestamptz&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;time.Time&quot;</span></span><br><span class="line">        - db_type: <span class="string">&quot;uuid&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;github.com/google/uuid.UUID&quot;</span></span><br></pre></td></tr></table></figure><p>account.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: CreateAccount :one</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts (</span><br><span class="line">  owner,</span><br><span class="line">  balance,</span><br><span class="line">  currency</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">  $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span></span><br><span class="line">) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><h4 id="make-sqlc-生成代码"><a href="#make-sqlc-生成代码" class="headerlink" title="make sqlc 生成代码"></a>make sqlc 生成代码</h4><h5 id="1-account-sql-go"><a href="#1-account-sql-go" class="headerlink" title="1.account.sql.go"></a>1.account.sql.go</h5><h5 id="2-db-go"><a href="#2-db-go" class="headerlink" title="2.db.go"></a>2.db.go</h5><h5 id="3-models-go"><a href="#3-models-go" class="headerlink" title="3.models.go"></a>3.models.go</h5><p><strong>在生成之后由于没有 初始化项目 使得项目报红</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init project/simplebank</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="九-编写单元测试用例"><a href="#九-编写单元测试用例" class="headerlink" title="九.编写单元测试用例"></a>九.编写单元测试用例</h3><p>1.导入未使用的包在前面添加_可以防止系统自动将它删除</p><p>例如：</p><p>_ “github.com&#x2F;lib&#x2F;pq “</p><p>错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec)</span><br><span class="line">have Exec(string, ...any) (sql.Result, error)</span><br><span class="line">want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span><br><span class="line"></span><br><span class="line">        你遇到的错误信息表明，你尝试将 *sql.DB 类型的 conn 变量用作 DBTX 类型的参数，但 *sql.DB 并不满足 DBTX 接口的要求。具体来说，DBTX 接口期望的 Exec 方法签名是 (context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag, error)，而 *sql.DB 提供的 Exec 方法签名是 (string, ...any) (sql.Result, error)。</span><br></pre></td></tr></table></figure><p><strong>目前不理解  方法和接口 开始学习</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是接口</span></span><br><span class="line"><span class="keyword">type</span> DBTX <span class="keyword">interface</span> &#123;</span><br><span class="line">Exec(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgconn.CommandTag, <span class="type">error</span>)</span><br><span class="line">Query(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgx.Rows, <span class="type">error</span>)</span><br><span class="line">QueryRow(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) pgx.Row</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;<span class="comment">//的含义这是可变参数的声明方式。它表示可以接收零个或多个任意类型的参数。在函数内部，这些参数被视为一个 []interface&#123;&#125;（一个接口类型的切片）。</span></span><br><span class="line">例如，如果有一个函数接受一个字符串和任意数量的其他参数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">(s <span class="type">string</span>, args...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以这样调用这个函数：</span><br><span class="line">myFunction(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 在这段代码中有一个这样的错误我不知道怎么修改cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec) have Exec(string, ...any) (sql.Result, error) want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要解决这个问题，你需要确保你的 DBTX 接口的方法签名与 *sql.DB 的实现匹配。具体来说，你需要修改 DBTX 接口的 Exec 方法，使其接受 context.Context 参数。以下是一个可能的解决方案：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修改 DBTX 接口，使其 Exec 方法的签名为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBTX interface &#123;</span></span><br><span class="line"><span class="comment">    Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error)</span></span><br><span class="line"><span class="comment">    // 其他方法...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">在你的 New 函数中，确保它接受符合 DBTX 接口的类型。例如，使用 sql.DB 时，你可以创建一个适配器来实现 DBTX 接口。</span></span><br><span class="line"><span class="comment">这里是一个适配器示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBAdapter struct &#123;</span></span><br><span class="line"><span class="comment">    *sql.DB</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func (db *DBAdapter) Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error) &#123;</span></span><br><span class="line"><span class="comment">    result, err := db.DB.ExecContext(ctx, query, args...)</span></span><br><span class="line"><span class="comment">    return result, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">然后在 TestMain 中使用这个适配器：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">testQueries = New(&amp;DBAdapter&#123;conn&#125;)</span></span><br><span class="line"><span class="comment">这样就能确保 *sql.DB 能正确实现 DBTX 接口，从而解决你遇到的错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!gpt给出解决问题的方法在我不知道用pgx的情况下 gpt给出用pgx连接</span><br><span class="line">给gpt看完接口定义之后</span><br><span class="line">由于你的 DBTX 接口使用了 pgx 库，你可以使用 pgx 的 Conn 类型而不是 *sql.DB。这里是一个简单的解决方案：</span><br><span class="line">使用 pgx 连接：确保在代码中使用 pgx 的连接，而不是 *sql.DB。修改你的数据库连接部分：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dbDriver = <span class="string">&quot;pgx&quot;</span></span><br><span class="line">dbSource = <span class="string">&quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">conn, err := pgx.Connect(context.Background(), dbSource)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">testQueries = New(conn) <span class="comment">// 确保 New 函数接收 pgx.Conn</span></span><br><span class="line"></span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line">确保 New 函数接受 pgx.Conn：在你的 New 函数中，确保它接受 pgx.Conn 而不是 *sql.DB。</span><br><span class="line">这样，你的 DBTX 接口与 pgx 的连接就能正常工作，避免了类型不匹配的问题。这样也简化了代码，直接使用了 pgx 连接而不需要适配器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="10-8日-解决目前为止遇见的一个问题"><a href="#10-8日-解决目前为止遇见的一个问题" class="headerlink" title="10.8日 解决目前为止遇见的一个问题"></a>10.8日 解决目前为止遇见的一个问题</h4><p><em>遇见的第一个大问题 在account_test.go中和main_test.go中出现的一些问题</em></p><p>*和姐聊了一下 解决了 **testQueries &#x3D; New(conn)*<em>中的问题</em></p><p><em>main_test.go使用 pgx来连接数据库 而不是视频中讲解的sql.open 他们的返回值类型不同造成了错误</em></p><p>测试函数的拼写错误 可能也影响了一大部分</p><p>还有最后一处问题</p><ol><li><code>require.NotEmpty(t, err)</code>这一行存在问题。这里应该是检查<code>account</code>是否不为空，而不是检查错误<code>err</code>是否不为空。正确的应该是<code>require.NotEmpty(t, account)</code>。</li></ol><p>不熟悉的地方go语言的包 接口 方法</p><hr><h4 id="1-最终的account-test-go代码"><a href="#1-最终的account-test-go代码" class="headerlink" title="1.最终的account_test.go代码"></a>1.最终的account_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    <span class="string">&quot;xiaozhao&quot;</span>,</span><br><span class="line">Balance:  <span class="number">100</span>,</span><br><span class="line">Currency: <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-最终的main-test-go代码"><a href="#2-最终的main-test-go代码" class="headerlink" title="2.最终的main_test.go代码"></a>2.最终的main_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">DATABASE_URL = <span class="string">&quot;postgres://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">conn, err := pgx.Connect(context.Background(), DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Unable to connect to database: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(context.Background())</span><br><span class="line"></span><br><span class="line">testQueries = New(conn)</span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试通过！！！！！！！</span></span><br></pre></td></tr></table></figure><p><strong>上面是指定了一个一个账户 我们想让账户的主人 货币 钱是随机的 编写util中的random代码</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rng *rand.Rand</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    source := rand.NewSource(time.Now().UnixNano())</span><br><span class="line">    rng = rand.New(source)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个介于 min max 之间的随机的 int64 数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomInt</span><span class="params">(min, max <span class="type">int64</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> min + rng.Int63n(max-min+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 n 个字符的随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sb strings.Builder</span><br><span class="line">    k := <span class="built_in">len</span>(alphabet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        c := alphabet[rng.Intn(k)]</span><br><span class="line">        sb.WriteByte(c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成owner</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomOwner</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomString(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成钱的数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomMoney</span><span class="params">()</span></span> <span class="type">int64</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomInt(<span class="number">0</span>,<span class="number">1000</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机产生一种货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandowCurrency</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line">currencies := []<span class="type">string</span>&#123;<span class="string">&quot;RMB&quot;</span>,<span class="string">&quot;USD&quot;</span>,<span class="string">&quot;CAD&quot;</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(currencies)</span><br><span class="line"><span class="keyword">return</span> currencies[rand.Intn(n)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**学会如何把自己写的包导入到别的文件夹下  这个需要看go mod下的 module project&#x2F;simplebank  **</p><p><strong>把moudle中的包作为起始路径 导入到别的文件夹下  就是：”project&#x2F;simplebank&#x2F;util”</strong></p><p>ok 截止到 10.8日随机生成的数据生成功</p><hr><p><strong>问题2</strong></p><p>makefile文件中的下面这个指令</p><p><strong>test:</strong></p><p><strong>go test -v -cover .&#x2F;…     这个指令必须在当前目录下找到go的测试文件</strong></p><p><strong>就是go.mod文件应该和makefile保持在一起</strong>    解决方法在本地的go.mod文件夹下又创建了一个makefile 用来测试 make test</p><p>类型断言 interface代表为止类型 使用前需要 转换为具体类型   (从未知类型转为已知类型)</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var i interface&#123;&#125; = 2</span><br><span class="line">num1， ok ：= i.(int)//断言</span><br></pre></td></tr></table></figure><hr><h4 id="3-account-test-go代码："><a href="#3-account-test-go代码：" class="headerlink" title="3.account_test.go代码："></a>3.account_test.go代码：</h4><p>全部测试通过！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomAccount</span><span class="params">(t *testing.T)</span></span> Account &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    util.RandomOwner(),</span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, account1.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line">arg := UpdateAccountParams&#123;</span><br><span class="line">ID:      account1.ID,</span><br><span class="line">Balance: util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">account2, err := testQueries.UpdateAccount(context.Background(), arg)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDeleteAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">err := testQueries.DeleteAccount(context.Background(), account1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line">require.Error(t, err)</span><br><span class="line"><span class="comment">//require.EqualError(t, err, sql.ErrNoRows.Error())</span></span><br><span class="line">require.Empty(t, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lastAccount Account</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">lastAccount = createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line">arg := ListAccountsParams&#123;</span><br><span class="line">Owner:  lastAccount.Owner,</span><br><span class="line">Limit:  <span class="number">5</span>, <span class="comment">//返回五条记录</span></span><br><span class="line">Offset: <span class="number">0</span>, <span class="comment">//设置偏移量 返回后五条记录  这里出现了问题！！！！</span></span><br><span class="line">&#125;</span><br><span class="line">accounts, err := testQueries.ListAccounts(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, accounts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, account := <span class="keyword">range</span> accounts &#123;</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line">require.Equal(t, lastAccount.Owner, account.Owner)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4-entry-test-go"><a href="#4-entry-test-go" class="headerlink" title="4.entry_test.go"></a>4.entry_test.go</h4><p>条目上的account.id要和account表单上的di相对应</p><p><strong>问题</strong></p><p><strong>id为null</strong></p><p><em><strong>在 PostgreSQL 中，如果一个表的 <code>id</code> 字段没有设置为自增序列（如 <code>bigserial</code>），并且你在插入数据时没有显式地为 <code>id</code> 字段指定值，那么 <code>id</code> 字段的值将会是 <code>NULL</code>，除非该字段设置了默认值。</strong></em></p><p><strong>解决办法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个序列：首先，你需要创建一个序列，这个序列将用于生成 id 列的值。</span><br><span class="line">   <span class="keyword">CREATE</span> SEQUENCE entries_id_seq;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置序列的所有权：将序列与 id 列关联起来。</span><br><span class="line">   <span class="keyword">ALTER</span> SEQUENCE entries_id_seq OWNED <span class="keyword">BY</span> entries.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置 id 列的默认值为序列的下一个值：这样，每当你插入新行而没有指定 id 值时，PostgreSQL 会自动使用序列的下一个值。</span><br><span class="line">   <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> entries <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> id <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;entries_id_seq&#x27;</span>);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>4确保 <code>id</code> 列是主键</strong>：从你提供的信息来看，<code>id</code> 列已经是主键。确保这一点很重要，因为主键约束可以保证 <code>id</code> 列的值是唯一的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试：插入一条新记录，不指定 id 值，检查是否自动生成了 id。</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id, amount, created_at) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">100</span>, now());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> entries <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">4</span>; 删除特定行的指令</span><br></pre></td></tr></table></figure><p>创建账单成功！</p><p>但是只能生成一个数据？？？</p><p>我发现了输出的区别 Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestCreateEntry$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc</p><p>ok  project&#x2F;simplebank&#x2F;db&#x2F;sqlc(cached) 这是第二次输出        第一次输出没有cached字样 数据正确的加载到了数据库 但是这个带有cached的数据没有加载到数据库</p><p><strong>因为 cached 是因为两次的数据相同 所以才没有被加载到数据库 这个可能是随机数代码的问题</strong></p><hr><h4 id="5-transfer-test-go"><a href="#5-transfer-test-go" class="headerlink" title="5.transfer_test.go"></a>5.transfer_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomTransfer</span><span class="params">(t *testing.T, account1, account2 Account)</span></span> Transfer &#123;</span><br><span class="line">arg := createTransferParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account2.ID,</span><br><span class="line">Amount:        util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">transfer, err := testQueries.createTransfer(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.FromAccountID, transfer.FromAccountID)</span><br><span class="line">require.Equal(t, arg.ToAccountID, transfer.ToAccountID)</span><br><span class="line">require.Equal(t, arg.Amount, transfer.Amount)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, transfer.ID)</span><br><span class="line">require.NotZero(t, transfer.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> transfer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">transfer1 := createRandomTransfer(t, account1, account2)</span><br><span class="line"></span><br><span class="line">transfer2, err := testQueries.GetTransfer(context.Background(), transfer1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, transfer1.ID, transfer2.ID)</span><br><span class="line">require.Equal(t, transfer1.FromAccountID, transfer2.FromAccountID)</span><br><span class="line">require.Equal(t, transfer1.ToAccountID, transfer2.ToAccountID)</span><br><span class="line">require.Equal(t, transfer1.Amount, transfer2.Amount)</span><br><span class="line">require.WithinDuration(t, transfer1.CreatedAt.Time, transfer2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">createRandomTransfer(t, account2, account1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := ListTransfersParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account1.ID,</span><br><span class="line">Limit:         <span class="number">5</span>,</span><br><span class="line">Offset:        <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transfers, err := testQueries.ListTransfers(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Len(t, transfers, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, transfer := <span class="keyword">range</span> transfers &#123;</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line">require.True(t, transfer.FromAccountID == account1.ID || transfer.ToAccountID == account1.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十-db-transaction"><a href="#十-db-transaction" class="headerlink" title="十.db transaction"></a>十.db transaction</h3><p>BEGIN语句启动事务</p><p>成功 则更新数据库</p><p>失败 则回滚事务（保持原来的状态）</p><p>​</p><p>代码对不上了 决定先复制粘贴 学习数据库中的知识点</p><p><strong>先从config.go开始</strong></p><hr><h3 id="十一-config-go"><a href="#十一-config-go" class="headerlink" title="十一.config.go"></a>十一.config.go</h3><p><strong>使用viper</strong></p><p>创建app.env文件存储配置信息</p><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config stores all configuration of the application.</span></span><br><span class="line"><span class="comment">// The values are read by viper from a config file or environment variable.</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">DATABASE_URL <span class="type">string</span> <span class="string">`mapstructure:&quot;DATABASE_URL&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadConfig reads configuration from file or environment variables.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">(path <span class="type">string</span>)</span></span> (config Config, err <span class="type">error</span>) &#123;</span><br><span class="line">viper.AddConfigPath(path)</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;env&quot;</span>)</span><br><span class="line"></span><br><span class="line">viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">err = viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = viper.Unmarshal(&amp;config)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>使用接口来简化一些操作好好学接口</p><p>目前为止更正了大部分问题接着往下学。。。。</p><p><strong>store.test.go出现了大问题</strong></p><p><strong>报错：</strong></p><p>**Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc &gt;&gt; before: 1984 3906 — FAIL: TestTransferTx (0.03s)    e:\projects\simplebank\db\sqlc\store_test.go:83:         Error Trace:e:&#x2F;projects&#x2F;simplebank&#x2F;db&#x2F;sqlc&#x2F;store_test.go:83        Error:      Should NOT be empty, but was {0  0  {0001-01-01 00:00:00 +0000 UTC finite false}}        Test:       TestTransferTx FAIL FAILproject&#x2F;simplebank&#x2F;db&#x2F;sqlc**<strong>0.571s</strong></p><p>因为还没编写代码。。。。。草草草草操操操操哦哦操操操这视频叫我看的</p><hr><h3 id="十二-需要仔细处理并发-交易-以避免死锁"><a href="#十二-需要仔细处理并发-交易-以避免死锁" class="headerlink" title="十二.需要仔细处理并发 交易 以避免死锁"></a>十二.需要仔细处理并发 交易 以避免死锁</h3><p>数据库事务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; before: 6892 6969</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6979</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6989</span></span><br><span class="line">--- FAIL: TestTransferTx (0.04s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:102: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:102</span><br><span class="line">        Error:      Not equal: </span><br><span class="line">                    expected: 10</span><br><span class="line">                    actual  : 20</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc0.602s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个问题出在</p><p>account.sql.go他无法阻止一些东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- name: GetAccount :one</span><br><span class="line">SELECT * FROM accounts</span><br><span class="line">WHERE id = $1 LIMIT 1;</span><br></pre></td></tr></table></figure><p><strong>在两个终端中并行运行两个事务来观察这个问题</strong></p><p><em>BEGIN；开始事务</em></p><p><em>ROLLBACK；回滚事务</em></p><p>：第一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">WARNING:  there is already a transaction in progress</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# ROLLBACK;</span><br><span class="line">ROLLBACK</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"> id |  owner   | balance | currency |         created_at</span><br><span class="line">----+----------+---------+----------+----------------------------</span><br><span class="line">  1 | xiaozhao |     100 | USD      | 2024-10-08 09:03:03.272176</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>第二个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"></span><br><span class="line">这里会被阻止 并且必须等待第一个事务提交或回滚</span><br></pre></td></tr></table></figure><p>纠正方法1： 在sql中添加 ： 重新用make sqlc生成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>但是接下来出现了死锁错误：</p><p>添加日志寻找错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"></span><br><span class="line">&gt;&gt; before: 1826 5993</span><br><span class="line">tx 5 Create transfer</span><br><span class="line">tx 5 Create entry 1</span><br><span class="line">tx 5 Create entry 2</span><br><span class="line">tx 5 get account 1</span><br><span class="line">tx 2 Create transfer</span><br><span class="line">tx 5 update account 1</span><br><span class="line">tx 5 get account 2</span><br><span class="line">tx 4 Create transfer</span><br><span class="line">tx 5 update account 2</span><br><span class="line">tx 3 Create transfer</span><br><span class="line">tx 2 Create entry 1</span><br><span class="line">tx 4 Create entry 1</span><br><span class="line">tx 3 Create entry 1</span><br><span class="line">tx 1 Create transfer</span><br><span class="line">tx 2 Create entry 2</span><br><span class="line">tx 4 Create entry 2</span><br><span class="line">tx 3 Create entry 2</span><br><span class="line">tx 2 get account 1</span><br><span class="line">tx 4 get account 1</span><br><span class="line">tx 3 get account 1</span><br><span class="line">&gt;&gt; tx: 1816 6003</span><br><span class="line">tx 1 Create entry 1</span><br><span class="line">tx 1 Create entry 2</span><br><span class="line">tx 1 get account 1</span><br><span class="line">--- FAIL: TestTransferTx (0.95s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:52: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:52</span><br><span class="line">        Error:      Received unexpected error:</span><br><span class="line">                    ERROR: deadlock detected (SQLSTATE 40P01)</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc1.470s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>终端事务出现错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><ol><li><ul><li>第一个错误 <code>INSERT INFO transfers</code> 是语法错误，正确的语法是 <code>INSERT INTO transfers</code>。</li></ul></li></ol><ul><li>第二个错误 <code>INSERT INTO transfers (from_account_id to_account_id amount)</code> 也存在语法错误，缺少逗号分隔列名。正确的写法是 <code>INSERT INTO transfers (from_account_id, to_account_id, amount)</code>。</li></ul><ol start="2"><li><strong>当前事务已中止</strong>：<ul><li>由于之前的 SQL 语句（可能是第一条插入语句）出错，事务被标记为 “aborted”。这意味着在该事务中的所有后续 SQL 命令都将失败，直到事务被回滚。</li></ul></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p><strong>结束当前事务</strong>：</p><ul><li><p>在 PostgreSQL 中，你可以通过以下命令结束当前事务并回滚更改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="终端阻塞-事务状态"><a href="#终端阻塞-事务状态" class="headerlink" title="终端阻塞 事务状态"></a>终端阻塞 事务状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 确认当前事务状态</span><br><span class="line">在 PostgreSQL 中，如果一个事务因为某种原因（例如错误或未处理的异常）而中断，那么所有后续的 SQL 语句将会被忽略，直到你执行 ROLLBACK 或 COMMIT。首先，确保没有事务在进行中。</span><br><span class="line"></span><br><span class="line">你可以使用以下命令查看当前活动的事务：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="operator">^</span>CCancel request sent</span><br><span class="line">ERROR:  canceling statement due <span class="keyword">to</span> <span class="keyword">user</span> request</span><br><span class="line">CONTEXT:  <span class="keyword">SQL</span> statement &quot;SELECT 1 FROM ONLY &quot;public&quot;.&quot;accounts&quot; x WHERE &quot;id&quot; OPERATOR(pg_catalog.=) $1 FOR KEY SHARE OF x&quot;</span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"> datid <span class="operator">|</span>   datname   <span class="operator">|</span> pid <span class="operator">|</span> usesysid <span class="operator">|</span> usename <span class="operator">|</span> application_name <span class="operator">|</span> client_addr <span class="operator">|</span> client_hostname <span class="operator">|</span> client_port <span class="operator">|</span>         backend_start         <span class="operator">|</span>          xact_start           <span class="operator">|</span>          query_start          <span class="operator">|</span>         state_change</span><br><span class="line"> <span class="operator">|</span> wait_event_type <span class="operator">|</span>  wait_event   <span class="operator">|</span> state  <span class="operator">|</span> backend_xid <span class="operator">|</span> backend_xmin <span class="operator">|</span>                                            query                                            <span class="operator">|</span>  backend_type</span><br><span class="line"><span class="comment">-------+-------------+-----+----------+---------+------------------+-------------+-----------------+-------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------+---------------+--------+-------------+--------------+---------------------------------------------------------------------------------------------+----------------</span></span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">810</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">51.115963</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094867</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span>                 <span class="operator">|</span>               <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;                                      <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">802</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">07.854964</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850039</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">965</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">782</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">58.685461</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014413</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">963</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">775</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">51.971697</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">52</span>:<span class="number">16.478898</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280622</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280627</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">964</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">556</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">44.776508</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">11.909182</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551023</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551027</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> transactionid <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;                                               <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">638</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql          </span><br></pre></td></tr></table></figure><hr><p>从你提供的 <code>pg_stat_activity</code> 的查询结果来看，有多个活跃的事务正在等待锁。这可能是导致你无法执行 <code>INSERT</code> 操作的原因。以下是一些步骤，可以帮助你诊断并解决这个问题：</p><h4 id="1-识别并终止阻塞的事务"><a href="#1-识别并终止阻塞的事务" class="headerlink" title="1. 识别并终止阻塞的事务"></a>1. <strong>识别并终止阻塞的事务</strong></h4><p>你的查询结果显示了多个 <code>INSERT</code> 操作在等待锁。可以尝试强制终止这些阻塞的事务，以释放锁并允许你的操作继续进行。首先，记录下阻塞的 <code>pid</code>（进程 ID），然后使用以下命令终止它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>802</code>、<code>782</code> 和 <code>775</code> 是阻塞的 <code>pid</code>。请根据你的实际情况调整这条命令。</p><h4 id="2-确认事务的状态"><a href="#2-确认事务的状态" class="headerlink" title="2. 确认事务的状态"></a>2. <strong>确认事务的状态</strong></h4><p>如果终止了这些连接，确保你没有其他活跃的事务在运行。你可以再次运行以下命令确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><h4 id="3-尝试再次执行插入"><a href="#3-尝试再次执行插入" class="headerlink" title="3. 尝试再次执行插入"></a>3. <strong>尝试再次执行插入</strong></h4><p>在确保没有其他事务阻塞后，尝试重新执行你的插入操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;  <span class="comment">-- 开始新的事务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>) RETURNING <span class="operator">*</span>;  <span class="comment">-- 执行插入</span></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line">指令；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="4-如果问题依然存在"><a href="#4-如果问题依然存在" class="headerlink" title="4. 如果问题依然存在"></a>4. <strong>如果问题依然存在</strong></h4><p>如果问题依然存在，建议检查数据库的锁状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_locks WHERE granted = false;</span><br></pre></td></tr></table></figure><p><strong>又产生错误</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775,556,638,810);</span><br><span class="line">FATAL:  terminating connection due to administrator command</span><br><span class="line">server closed the connection unexpectedly</span><br><span class="line">        This probably means the server terminated abnormally</span><br><span class="line">        before or while processing the request.</span><br><span class="line">The connection to the server was lost. Attempting reset: Succeeded.</span><br></pre></td></tr></table></figure><p>回答：</p><p>看起来你在尝试终止阻塞的连接时，PostgreSQL 服务器意外关闭了连接。这可能是由于以下几个原因：</p><ol><li><strong>服务器崩溃</strong>：可能是因为在终止连接时，某个后台进程遇到了问题，导致服务器崩溃。</li><li><strong>资源不足</strong>：如果你的 PostgreSQL 服务器资源不足（例如内存或 CPU），在处理请求时可能会出现这种情况。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">由于服务器崩溃，重启 Docker 容器可能会帮助你恢复连接：</span><br><span class="line"></span><br><span class="line">docker restart postgres12</span><br><span class="line">在重启后检查连接：</span><br><span class="line"></span><br><span class="line">重启后，尝试重新连接到数据库，并检查活动连接：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity;</span><br><span class="line">再次终止阻塞的连接：</span><br><span class="line"></span><br><span class="line">如果连接正常，尝试再次运行终止命令：</span><br><span class="line"></span><br><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775, </span><br></pre></td></tr></table></figure><hr><p><strong>git上传一个项目没有共同历史</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查是否有共同历史</span><br><span class="line">git log --oneline --graph --all</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">强制合并冲突</span><br><span class="line">git pull origin main --allow-unrelated-histories</span><br></pre></td></tr></table></figure><hr><p>终端1：在没有阻塞的情况下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="number">1</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在终端一提交事务时 终端二会显示出结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">600</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql QUERIER</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id,to_account_id,amount) <span class="keyword">VALUE</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">-10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span><span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">110</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="5-postgres-lock：帮助查询哪里有锁"><a href="#5-postgres-lock：帮助查询哪里有锁" class="headerlink" title="5.postgres lock：帮助查询哪里有锁"></a>5.postgres lock：帮助查询哪里有锁</h4><p>The following query may be helpful to see what processes are blocking SQL statements (these only find row-level locks, not object-level locks).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT blocked_locks.pid     AS blocked_pid,</span><br><span class="line">       blocked_activity.usename  AS blocked_user,</span><br><span class="line">       blocking_locks.pid     AS blocking_pid,</span><br><span class="line">       blocking_activity.usename AS blocking_user,</span><br><span class="line">       blocked_activity.query    AS blocked_statement,</span><br><span class="line">       blocking_activity.query   AS current_statement_in_blocking_process</span><br><span class="line"> FROM  pg_catalog.pg_locks         blocked_locks</span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid</span><br><span class="line">  JOIN pg_catalog.pg_locks         blocking_locks </span><br><span class="line">      ON blocking_locks.locktype = blocked_locks.locktype</span><br><span class="line">      AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database</span><br><span class="line">      AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation</span><br><span class="line">      AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page</span><br><span class="line">      AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple</span><br><span class="line">      AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid</span><br><span class="line">      AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid</span><br><span class="line">      AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid</span><br><span class="line">      AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid</span><br><span class="line">      AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid</span><br><span class="line">      AND blocking_locks.pid != blocked_locks.pid</span><br><span class="line"></span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid</span><br><span class="line"> WHERE NOT blocked_locks.granted;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; 这条语句阻塞了</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Here<span class="string">&#x27;s an alternate view of that same data that includes an idea how old the state is</span></span><br><span class="line"><span class="string"># 列出所有锁</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT a.datname,</span></span><br><span class="line"><span class="string">         l.relation::regclass,</span></span><br><span class="line"><span class="string">         l.transactionid, //事务id</span></span><br><span class="line"><span class="string">         l.mode, 锁的mod</span></span><br><span class="line"><span class="string">         l.GRANTED,</span></span><br><span class="line"><span class="string">         a.usename,  who</span></span><br><span class="line"><span class="string">         a.query, </span></span><br><span class="line"><span class="string">         a.query_start,</span></span><br><span class="line"><span class="string">         age(now(), a.query_start) AS &quot;age&quot;,</span></span><br><span class="line"><span class="string">         a.pid</span></span><br><span class="line"><span class="string">FROM pg_stat_activity a</span></span><br><span class="line"><span class="string">JOIN pg_locks l ON l.pid = a.pid</span></span><br><span class="line"><span class="string">ORDER BY a.query_start;</span></span><br></pre></td></tr></table></figure><p><strong>死锁是由外键约束引起的</strong></p><p>1.删除约束</p><p>修改sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">NO</span> KEY <span class="keyword">UPDATE</span>;<span class="operator">/</span><span class="operator">/</span>这步时解决死锁的关键</span><br></pre></td></tr></table></figure><p>避免死锁是关键：微调事务中的查询</p><h3 id="十三-隔离级别"><a href="#十三-隔离级别" class="headerlink" title="十三.隔离级别"></a>十三.隔离级别</h3><p>数据库事务必须满足 ACID 原子性  一致性 隔离性 持久性</p><hr><h4 id="Read-Phenomenaa"><a href="#Read-Phenomenaa" class="headerlink" title="Read Phenomenaa"></a>Read Phenomenaa</h4><h4 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1.脏读"></a>1.脏读</h4><p>当一个事务读取了   其他并发事务写入的尚未提交的数据（导致 如果尚未提交的数据 最终回滚 可能导致用到错误的数据 ）</p><h4 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h4><p>当一个事务两次读取到同一记录并看到不同的值  因为第一次读取后提交的其他事务修改</p><h4 id="3-幻读"><a href="#3-幻读" class="headerlink" title="3.幻读"></a>3.幻读</h4><p>影响多行</p><h4 id="4-四种隔离级别"><a href="#4-四种隔离级别" class="headerlink" title="4.四种隔离级别"></a>4.四种隔离级别</h4><p>READ UNCOMMITMED： 可以看到其他未提交事务写入的数据</p><p>READ COMMITED：只能看到其他事务已经提交的数据</p><p>REPEATABLE READ:</p><p>SERIALIZABLE:</p><h4 id="5-mysql选择隔离级别"><a href="#5-mysql选择隔离级别" class="headerlink" title="5.mysql选择隔离级别"></a>5.mysql选择隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> sexxion transaction isolation level read commited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @@一种隔离级别</span><br></pre></td></tr></table></figure><h4 id="6-postgresql选择隔离级别-只有三个"><a href="#6-postgresql选择隔离级别-只有三个" class="headerlink" title="6.postgresql选择隔离级别 只有三个"></a>6.postgresql选择隔离级别 只有三个</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在postgresql中 未提交和已提交是一个级别</span><br><span class="line">show transaction isolation level</span><br><span class="line"></span><br><span class="line">set transaction isolation level read uncommited</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十四-持续集成或CI"><a href="#十四-持续集成或CI" class="headerlink" title="十四.持续集成或CI"></a>十四.持续集成或CI</h3><p><strong>自动化构建和测试流程进行验证</strong></p><h4 id="1-Github-Action"><a href="#1-Github-Action" class="headerlink" title="1.Github Action"></a>1.Github Action</h4><p>首先上传项目到github时如果出现了连接问题 就切换成ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:Whuichenggong/projects.git</span><br><span class="line">PS E:\projects&gt; git pull origin main --tags</span><br><span class="line">From github.com:Whuichenggong/projects</span><br><span class="line"> * branch            main       -&gt; FETCH_HEAD</span><br></pre></td></tr></table></figure><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo. &gt; .github\workflows\ci.yml</span><br></pre></td></tr></table></figure><p>安装工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">golang migrate</span><br></pre></td></tr></table></figure><p>但是目前我看不到页面我的action</p><h3 id="十五-RESTful-HEEP-API"><a href="#十五-RESTful-HEEP-API" class="headerlink" title="十五.RESTful HEEP API"></a>十五.RESTful HEEP API</h3><h4 id="1-创建api文件夹"><a href="#1-创建api文件夹" class="headerlink" title="1.创建api文件夹"></a>1.创建api文件夹</h4><p><strong>account.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateAccountRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Owner    <span class="type">string</span> <span class="string">`json:&quot;owner&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,oneof= USD EUR&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createAccount(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateAccountRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateAccountParams&#123;</span><br><span class="line">Owner:    req.Owner,</span><br><span class="line">Currency: req.Currency,</span><br><span class="line">Balance:  <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>server.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config util.Config</span><br><span class="line">store  db.Store</span><br><span class="line">router *gin.Engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store: store,</span><br><span class="line">&#125;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/api&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5/pgxpool&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot load config:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connPool, err := pgxpool.New(context.Background(), config.DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化数据库服务</span></span><br><span class="line">store := db.NewStore(connPool)</span><br><span class="line"><span class="comment">//运行gin框架</span></span><br><span class="line">runGinServer(config, store)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot start server:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runGinServer</span><span class="params">(config util.Config, store db.Store)</span></span> &#123;</span><br><span class="line">server, err := api.NewServer(config, store)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot create server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = server.Start(config.HTTPServerAddress)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot start server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据库重置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br><span class="line">   </span><br><span class="line">PostgreSQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name RESTART <span class="keyword">IDENTITY</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> accounts, entries RESTART <span class="keyword">IDENTITY</span>; 同时截断两个表</span><br></pre></td></tr></table></figure><p><strong>listaccount.go</strong></p><p>用postman请求时：&#x2F;&#x2F;查询参数</p><p><strong>page_id     1</strong></p><p><strong>page_size   5</strong></p><p><strong>在使用多组查找的时候没有找到用户？？？</strong></p><p>目前为止还是无法解决</p><hr><p>找了喜春学哥帮我找到了问题的所在在ListAccounts中 传进去的arg.Owner是个空值导致了出现了问题 把arg.Owner改成一个数据库中具体的值 就能找到问题的所在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner<span class="comment">/*问题所在*/</span>, arg.Limit, arg.Offset)</span><br></pre></td></tr></table></figure><hr><h4 id="2-模拟数据库测试"><a href="#2-模拟数据库测试" class="headerlink" title="2.模拟数据库测试"></a>2.模拟数据库测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用mock</span><br><span class="line"> go get github.com/golang/mock/mockgen@v1.6.0</span><br><span class="line"> </span><br><span class="line">PS E:\projects\simplebank\db\mock&gt; mockgen -destination db/mock/store.go project/simplebank/db/sqlc Store </span><br></pre></td></tr></table></figure><h4 id="3-account-test-go"><a href="#3-account-test-go" class="headerlink" title="3.account_test.go"></a>3.account_test.go</h4><p>出现的问题</p><hr><p>你提到的问题是由于 <code>mock_sqlc.MockStore</code> 未完全实现 <code>db.Store</code> 接口，特别是缺少 <code>createTransfer</code> 方法。为了解决这个问题，您可以采取以下步骤：</p><p>解决步骤：</p><ol><li><strong>确认 <code>db.Store</code> 接口的定义：</strong></li></ol><p>首先，确保 <code>db.Store</code> 接口定义了所有需要的方法。特别是，确认接口中是否包含 <code>createTransfer</code> 方法。</p><p>也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在你当前的测试代码中，store := mockdb.NewMockStore(ctrl) 返回的确实是 *mockdb.MockStore 类型，而 NewServer 需要的参数是 db.Store 接口类型。那么为什么没有类型错误呢？这是因为在 Go 中，接口是基于方法集实现的，而 *mockdb.MockStore 实现了 db.Store 接口中的所有方法。</span><br><span class="line"></span><br><span class="line">具体原因分析：</span><br><span class="line">接口实现方式：在 Go 语言中，接口并不关心你传递的具体类型（如 *mockdb.MockStore），它只关心该类型是否实现了接口中定义的所有方法。如果 *mockdb.MockStore 实现了 db.Store 接口的所有方法，那么它就可以被赋值给 db.Store 类型的变量。</span><br><span class="line"></span><br><span class="line">gomock 的自动生成：你使用 gomock 生成了 *mockdb.MockStore，这个 mock 类型会模拟 db.Store 接口的所有方法。因为它是通过 gomock 自动生成的，并且已经包含了 db.Store 中的所有方法，所以它实际上是符合 db.Store 接口的实现。</span><br><span class="line"></span><br><span class="line">类型匹配：在 Go 中，赋值 *mockdb.MockStore 给 db.Store 类型是可以的，因为 *mockdb.MockStore 实现了 db.Store 接口。即便 *mockdb.MockStore 是一个具体类型，只要它的方法集与 db.Store 接口的方法集匹配，Go 会认为它是一个合法的接口实现。</span><br><span class="line"></span><br><span class="line">为什么没有错误？</span><br><span class="line">由于 *mockdb.MockStore 实现了 db.Store 接口的所有方法，Go 编译器允许将 *mockdb.MockStore 传递给 NewServer 这个需要 db.Store 类型的函数参数。具体的原因是：</span><br><span class="line"></span><br><span class="line">NewMockStore 生成的 mock 类型实现了 db.Store 的所有方法，因此符合 db.Store 接口。</span><br><span class="line">在 Go 语言中，接口实现是隐式的，不需要显式声明实现接口，只要结构体的方法集与接口匹配即可。</span><br></pre></td></tr></table></figure><p>方法 1：使用类型断言验证</p><p>在 Go 中，你可以通过<strong>静态类型检查</strong>来验证一个类型是否实现了某个接口。具体方法是使用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _ db.Store = (*mockdb.MockStore)(nil)</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccountAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;配置文件出错&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//user, _ := randomUser(t)</span></span><br><span class="line">account := randomAccount()</span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">url := fmt.Sprintf(<span class="string">&quot;/accounts/%d&quot;</span>, tc.accountID)</span><br><span class="line">request, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//tc.setupAuth(t, request, server.tokenMaker)</span></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(t, recorder)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomAccount</span><span class="params">()</span></span> db.Account &#123;</span><br><span class="line"><span class="keyword">return</span> db.Account&#123;</span><br><span class="line">ID: util.RandomInt(<span class="number">1</span>, <span class="number">1000</span>),</span><br><span class="line"><span class="comment">//Owner:    owner,</span></span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchAccount</span><span class="params">(t *testing.T, body *bytes.Buffer, account db.Account)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotAccount db.Account</span><br><span class="line">err = json.Unmarshal(data, &amp;gotAccount)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, account, gotAccount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在这段代码中有不懂的地方</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">store是 *mockdb.MockStore类型</span><br><span class="line">而<span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) 需要的是db.store类型</span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"><span class="comment">//我觉得这是自相矛盾</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, sql.ErrNoRows)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>目前的问题是notfound处理不符合预期</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">setupAuth: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span> &#123;</span><br><span class="line">addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, db.ErrRecordNotFound)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)<span class="comment">//我手动把 recorder.Code换成404jiu&#x27;cheng&#x27;gogn</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h4 id="4-transfer-go"><a href="#4-transfer-go" class="headerlink" title="4.transfer.go"></a>4.transfer.go</h4><p>Currency      string <code>json:&quot;currency&quot; binding:&quot;required,currency&quot;</code> 添加了currency验证器 因为正常json不能识别USD等货币</p><p>实现思路 在go run mian.go后使用gin框架请求路由前 使用自己添加的数字验证器</p><p>在server.go中添加如下内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;USD&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store:  store,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccount)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">FromAccountID <span class="type">int64</span>  <span class="string">`json:&quot;from_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">ToAccountID   <span class="type">int64</span>  <span class="string">`json:&quot;to_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">Amount        <span class="type">int64</span>  <span class="string">`json:&quot;amount&quot; binding:&quot;required,gt=0&quot;`</span></span><br><span class="line">Currency      <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,currency&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createTransfer(ctx *gin.Context) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req transferRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 FromAccount</span></span><br><span class="line">fromAccount, valid := server.validAccount(ctx, req.FromAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 ToAccount</span></span><br><span class="line">toAccount, valid := server.validAccount(ctx, req.ToAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := db.TransferTxParams&#123;</span><br><span class="line">FromAccountID: fromAccount.ID,</span><br><span class="line">ToAccountID:   toAccount.ID,</span><br><span class="line">Amount:        req.Amount,</span><br><span class="line">&#125;</span><br><span class="line">result, err := server.store.TransferTx(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查id和货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> validAccount(ctx *gin.Context, accountID <span class="type">int64</span>, currency <span class="type">string</span>) (db.Account, <span class="type">bool</span>) &#123;</span><br><span class="line">account, err := server.store.GetAccount(ctx, accountID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> account.Currency != currency &#123;</span><br><span class="line">err := fmt.Errorf(<span class="string">&quot;account [%d] currency mismatch: %s vs %s&quot;</span>, account.ID, account.Currency, currency)</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用postman测试得到的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;transfer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;from_account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;to_account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afmxtl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:33:43.423875Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bdupue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:37:04.113466Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">-12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="十六-用户身份验证和授权"><a href="#十六-用户身份验证和授权" class="headerlink" title="十六.用户身份验证和授权"></a>十六.用户身份验证和授权</h3><h4 id="1-建user数据库表"><a href="#1-建user数据库表" class="headerlink" title="1.建user数据库表"></a>1.建user数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Use DBML <span class="keyword">to</span> <span class="keyword">define</span> your database structure</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> Docs: https:<span class="operator">/</span><span class="operator">/</span>dbml.dbdiagram.io<span class="operator">/</span>docs</span><br><span class="line"><span class="keyword">Table</span> <span class="keyword">user</span> <span class="keyword">as</span> U&#123;</span><br><span class="line">  username carchar [pk]</span><br><span class="line">  hashed_paassword <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  full_name <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  email <span class="type">varchar</span> [<span class="keyword">unique</span>, <span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  password_changed_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">default</span>: `<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z`]</span><br><span class="line">  create_at timestamptz [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> accounts <span class="keyword">as</span> A &#123;</span><br><span class="line">  id bigser [pk]</span><br><span class="line">  owner <span class="type">varchar</span> [<span class="keyword">ref</span>:<span class="operator">&gt;</span> U.username,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  balance <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  currency <span class="type">varchar</span>  [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    (owner, currency) [<span class="keyword">unique</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> entries &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>] </span><br><span class="line">  </span><br><span class="line">  amount <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> transfers &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  from_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  to_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  amount  <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建数据库迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq add_users</span><br></pre></td></tr></table></figure><p>出现了错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">make migrateup</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose up</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> <span class="keyword">Start</span> buffering <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> Read <span class="keyword">and</span> <span class="keyword">execute</span> <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> error: migration failed: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot; (<span class="keyword">column</span> <span class="number">69</span>) <span class="keyword">in</span> line <span class="number">6</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;user&quot; (</span><br><span class="line">  &quot;username&quot; carchar <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  &quot;hashed_paassword&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;full_name&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;password_changed_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z),</span><br><span class="line">  &quot;create_at&quot; timestamptz <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;accounts&quot; <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (&quot;owner&quot;) <span class="keyword">REFERENCES</span> &quot;user&quot; (&quot;username&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">--CREATE UNIQUE INDEX ON &quot;accounts&quot; (&quot;owner&quot;, &quot;currency&quot;);</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;acounts&quot; <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> &quot;owner_currency-unique&quot; <span class="keyword">UNIQUE</span> (&quot;owner&quot;, &quot;currency&quot;) (details: pq: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot;)</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migrateup] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：违反了外键约束</p><h3 id="十七-迁移失败原因"><a href="#十七-迁移失败原因" class="headerlink" title="十七.迁移失败原因"></a>十七.迁移失败原因</h3><p><strong>sql语句写错了 IF写成ID</strong></p><p>**理解去除外键等 **</p><h4 id="2-问题："><a href="#2-问题：" class="headerlink" title="2.问题："></a>2.问题：</h4><p>在执行数据库迁移时，出现的错误是因为在 <code>accounts</code> 表上有外键依赖 (<code>transfers</code> 表中的 <code>transfers_from_account_id_fkey</code> 和 <code>transfers_to_account_id_fkey</code> 约束依赖于 <code>accounts</code> 表)。当你尝试删除 <code>accounts</code> 表时，PostgreSQL 不允许删除这个表，因为还有其他表（如 <code>transfers</code>）依赖它。</p><p>但是执行了migrateup指令就会出现脏读现象 使得数据库版本变为2 所以我们要先回退到1版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make migratedown</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">34</span> <span class="keyword">Are</span> you sure you want <span class="keyword">to</span> apply <span class="keyword">all</span> down migrations? [y<span class="operator">/</span>N]</span><br><span class="line">y</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> Applying <span class="keyword">all</span> down migrations</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> error: Dirty database version <span class="number">2.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>修改迁移表的值为 FALSE：没管用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">执行migratedown操作时失败，并出现错误信息 “cannot <span class="keyword">drop</span> <span class="keyword">table</span> accounts because other objects depend <span class="keyword">on</span> it”，这表明accounts表有其他数据库对象依赖于它。</span><br><span class="line">原因包括：</span><br><span class="line">transfers表中的外键约束引用了accounts表。</span><br><span class="line">直接删除含外键的表会引发错误。</span><br><span class="line">建议：</span><br><span class="line">修改迁移脚本，先删除依赖的对象，如约束、触发器、视图等。</span><br><span class="line">使用CASCADE选项强制删除所有依赖的对象。</span><br><span class="line">在 makefile 中为migrate命令添加条件检查。</span><br><span class="line">可能的迁移修正示例：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers CASCADE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><h4 id="3-解除外键约束"><a href="#3-解除外键约束" class="headerlink" title="3.解除外键约束"></a>3.解除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">你可以按以下步骤修改你的迁移文件，确保先删除外键约束，再删除相关的表。</span><br><span class="line"></span><br><span class="line">删除外键约束： 在迁移文件中，先删除 transfers 表中的外键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_from_account_id_fkey;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_to_account_id_fkey;</span><br><span class="line"></span><br><span class="line">删除表： 然后，按顺序删除表：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> entries;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><p>migrate 出现的错误可能就是   把外键依赖删除然后在执行数据库迁移语句</p><hr><p>有没有可能你在写数据库迁移的时候就没有在migratedown中加入 删除外键约束的语句呢从而导致这么麻烦？？？</p><hr><p>编写migratedown时操作是和migrateup相反的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-问题："><a href="#4-问题：" class="headerlink" title="4.问题："></a>4.问题：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make migratedown1</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down <span class="number">1</span></span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">21</span> error: Dirty database version <span class="number">1.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown1] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个错误信息表明数据库处于 “dirty” 状态，通常意味着上一次的迁移未成功完成，导致数据库的迁移版本与实际执行情况不一致。要解决这个问题，你可以尝试以下步骤：</p><h4 id="5-解决："><a href="#5-解决：" class="headerlink" title="5.解决："></a>5.解决：</h4><p>检查数据库的迁移状态</p><p>使用 <code>migrate</code> 查看当前的迁移状态，以确认哪个版本是 dirty：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; version</span><br></pre></td></tr></table></figure><p>这将显示当前数据库的版本号以及 dirty 状态。</p><p>强制迁移版本</p><p>使用 <code>migrate force</code> 命令将数据库状态恢复为干净的版本。你可以将其设置为版本 1，这样可以清除 “dirty” 标志，同时保留当前的版本号。</p><p>执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; force <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个命令不会运行任何迁移，它只是将数据库的迁移版本重置为 1，同时将脏状态清除。</p><h4 id="6-检查当前数据库中的约束名"><a href="#6-检查当前数据库中的约束名" class="headerlink" title="6.检查当前数据库中的约束名"></a>6.检查当前数据库中的约束名</h4><p>如果不确定数据库中的约束名，可以通过以下 SQL 查询当前表中的约束名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> conname <span class="keyword">FROM</span> pg_constraint <span class="keyword">WHERE</span> conrelid <span class="operator">=</span> <span class="string">&#x27;accounts&#x27;</span>::regclass;</span><br></pre></td></tr></table></figure><p>每条语句后面要写分号啊啊啊啊！！！！！</p><h3 id="十八-user-test-go"><a href="#十八-user-test-go" class="headerlink" title="十八. user_test.go"></a>十八. user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomUser</span><span class="params">(t *testing.T)</span></span> User &#123;</span><br><span class="line"></span><br><span class="line">arg := CreateUserParams&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := testStore.CreateUser(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Username, user.Username)</span><br><span class="line">require.Equal(t, arg.HashedPassword, user.HashedPassword)</span><br><span class="line">require.Equal(t, arg.FullName, user.FullName)</span><br><span class="line">require.Equal(t, arg.Email, user.Email)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, user.CreateAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">createRandomUser(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user1 := createRandomUser(t)</span><br><span class="line">user2, err := testStore.GetUser(context.Background(), user1.Username)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, user1.Username, user2.Username)</span><br><span class="line">require.Equal(t, user1.HashedPassword, user2.HashedPassword)</span><br><span class="line">require.Equal(t, user1.FullName, user2.FullName)</span><br><span class="line">require.Equal(t, user1.Email, user2.Email)</span><br><span class="line">require.WithinDuration(t, user1.PasswordChangedAt.Time, user2.PasswordChangedAt.Time, time.Second)</span><br><span class="line">require.WithinDuration(t, user1.CreateAt.Time, user2.CreateAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在第29行代码有一个断言语句判断 ：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require.True(t, user.PasswordChangedAt.Time.IsZero())</span><br></pre></td></tr></table></figure><p>这个语句目前不能通过测试 往后看吧看看是么时候找到问题</p><h4 id="1-10-23外键约束问题"><a href="#1-10-23外键约束问题" class="headerlink" title="1. 10.23外键约束问题"></a>1. 10.23外键约束问题</h4><p>运行真个包测试出现的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个外键错误提示 &quot;ERROR: insert or update on table&quot;accounts&quot;violates foreign key constraint&quot;accounts_owner_fkey&quot;(SQLSTATE 23503)&quot; 意味着在尝试往 &quot;accounts&quot; 表中插入或更新数据时违反了名为 &quot;accounts_owner_fkey&quot; 的外键约束。</span><br></pre></td></tr></table></figure><p><strong>应该是    一个用户链接到账户 这就是主表与副表的关系  设置外键 将两个表链接到一起</strong></p><h4 id="2-数据库表出现错误"><a href="#2-数据库表出现错误" class="headerlink" title="2.数据库表出现错误"></a>2.数据库表出现错误</h4><p>数据库语句就写错了 正常每个表的 id序列都应该是自增的 如果不是这样将会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: null value in column &quot;id&quot; violates not-null constraint (SQLSTATE 23502)</span><br></pre></td></tr></table></figure><p>我们要重新修改数据库迁移语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;entries&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;can be negative or positive&#x27;</span>;</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;transfers&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;must be positive&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改过后 正常运行account_test.go</p><h4 id="3-修改状态码"><a href="#3-修改状态码" class="headerlink" title="3.修改状态码"></a>3.修改状态码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> pqErr, ok := err.(*pq.Error); ok &#123;</span><br><span class="line"><span class="keyword">switch</span> pqErr.Code.Name() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;foreign_key_violation&quot;</span>, <span class="string">&quot;unique_violation&quot;</span>:</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Println(pqErr.Code.Name())</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现错误了 等待明天修改</p><p><strong>10.24</strong></p><p>将上述代码语句修改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功解决了问题 。 这是为什么呢？？</p><p>应该是:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation</span><br></pre></td></tr></table></figure><p>这段代码起到了主要i作用</p><p>在error.go中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">ForeignKeyViolation = &quot;23503&quot;</span><br><span class="line">UniqueViolation     = &quot;23505&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这代表了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ForeignKeyViolation 常量的值是 &quot;23503&quot;，它代表 PostgreSQL 中的一个错误代码。当执行的数据库操作违反外键约束时，会触发这个错误。外键约束保证了不同表之间的关系，如果尝试插入、更新或删除的数据并不能被其他表中的相关记录引用，就会抛出这个错误。</span><br><span class="line"></span><br><span class="line">UniqueViolation 常量的值是 &quot;23505&quot;，这也是一个 PostgreSQL 错误代码。当向需要唯一值的字段插入了重复的值时，会引发这个错误。违反唯一性约束意味着这样的操作将导致两个记录含有相同的值，这在数据库规则中通常是不允许的，因为唯一约束保护了记录唯一识别数据的能力。</span><br></pre></td></tr></table></figure><h3 id="十九-在数据库中安全的存储密码"><a href="#十九-在数据库中安全的存储密码" class="headerlink" title="十九.在数据库中安全的存储密码"></a>十九.在数据库中安全的存储密码</h3><h4 id="1-password-go"><a href="#1-password-go" class="headerlink" title="1.password.go"></a>1.password.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashPassword</span><span class="params">(password <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">hashedPassword, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;哈希加密失败:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(hashedPassword), <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPassword</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckPassword</span><span class="params">(password <span class="type">string</span>, hashedPassword <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hashedPassword), []<span class="type">byte</span>(password))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-password-test-go"><a href="#2-password-test-go" class="headerlink" title="2.password_test.go"></a>2.password_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPassword</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">password := RandomString(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">hashPassword, err := HashPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">err = CheckPassword(password, hashPassword)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">wrongPassword := RandomString(<span class="number">6</span>)</span><br><span class="line">err = CheckPassword(wrongPassword, hashPassword)</span><br><span class="line">require.EqualError(t, err, bcrypt.ErrMismatchedHashAndPassword.Error())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-user-go"><a href="#3-user-go" class="headerlink" title="3.user.go"></a>3.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;fullname&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;full_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe Zhao&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhaozhonghe40@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password_changed_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;create_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>想让返回结果没有 这个字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rsp := CreateUserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br></pre></td></tr></table></figure><h3 id="二十-user-test-go"><a href="#二十-user-test-go" class="headerlink" title="二十.user_test.go"></a>二十.user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUserAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user, password := randomUser(t)</span><br><span class="line"></span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name          <span class="type">string</span></span><br><span class="line">body          gin.H</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:  user.Username,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:  password,</span><br><span class="line"><span class="string">&quot;full_name&quot;</span>: user.FullName,</span><br><span class="line"><span class="string">&quot;email&quot;</span>:     user.Email,</span><br><span class="line">&#125;,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       user.Username,</span><br><span class="line">FullName:       user.FullName,</span><br><span class="line">Email:          user.Email,</span><br><span class="line">HashedPassword: user.HashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">store.EXPECT().</span><br><span class="line">CreateUser(gomock.Any(), EqCreateUserParams(arg, password)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(user, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response code: %d\n&quot;</span>, recorder.Code)</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchUser(t, recorder.Body, user)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server := newTestServer(t, store)</span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Marshal body data to JSON</span></span><br><span class="line">data, err := json.Marshal(tc.body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %s\n&quot;</span>, <span class="type">string</span>(data)) <span class="comment">// 打印请求体</span></span><br><span class="line">url := <span class="string">&quot;/users&quot;</span></span><br><span class="line">request, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(data))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(recorder)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %v\n&quot;</span>, tc.body)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomUser</span><span class="params">(t *testing.T)</span></span> (user db.User, password <span class="type">string</span>) &#123;</span><br><span class="line">password = util.RandomString(<span class="number">6</span>)</span><br><span class="line">hashedPassword, err := util.HashedPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">user = db.User&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchUser</span><span class="params">(t *testing.T, body *bytes.Buffer, user db.User)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotUser db.User</span><br><span class="line">err = json.Unmarshal(data, &amp;gotUser)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, user.Username, gotUser.Username)</span><br><span class="line">require.Equal(t, user.FullName, gotUser.FullName)</span><br><span class="line">require.Equal(t, user.Email, gotUser.Email)</span><br><span class="line">require.Empty(t, gotUser.HashedPassword)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gomock.Any()这个验证的 准确度太低 任何测试基本都能通过</p><p>解决方法 使用 新的自定义匹配器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><p><strong>长记性 json的字段名错误 我测试了一下午</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FullName string <code>json:&quot;full_name&quot; binding:&quot;required&quot;</code>这里的json标签我把full_name 写成了fullname</p><h3 id="二十一-JWT"><a href="#二十一-JWT" class="headerlink" title="二十一.JWT"></a>二十一.JWT</h3><h4 id="1-JSON-Web令牌"><a href="#1-JSON-Web令牌" class="headerlink" title="1.JSON Web令牌"></a>1.JSON Web令牌</h4><p>密钥算法</p><p>服务器一般使用RSA 和 RS256来验证令牌</p><p>对称算法</p><p>非对称算法</p><p>必须在服务器代码中 检查令牌的算法标头</p><p>JWT令牌的很多问题：</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184159996.png" alt="image-20241026184159996"></p><p>RASETO作为替代JWT的安全方案</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184634250.png" alt="image-20241026184634250"></p><h4 id="2-基于令牌的身份验证的工作原理是什么？"><a href="#2-基于令牌的身份验证的工作原理是什么？" class="headerlink" title="2.基于令牌的身份验证的工作原理是什么？"></a>2.基于令牌的身份验证的工作原理是什么？</h4><p>基于令牌的身份验证从用户登录至系统、设备或应用程序开始，通常使用密码或安全问题。授权服务器验证初始身份验证，然后发放访问令牌，访问令牌是一小段数据，允许客户端应用程序向 API 服务器发出安全调用或信号。</p><p>基于令牌的身份验证的工作原理是为服务器提供第二种高度可靠的方式来验证用户的身份和请求的真实性。</p><p>完成该基于令牌的初始身份验证协议后，令牌就像盖了章的票据一样：用户可以在令牌生命周期内连续无缝访问相关资源，而无需重新进行身份验证。 该生命周期在用户注销或退出应用程序时结束，也可由设定的超时协议触发。</p><h4 id="3-基于令牌的身份验证有何益处？"><a href="#3-基于令牌的身份验证有何益处？" class="headerlink" title="3.基于令牌的身份验证有何益处？"></a>3.基于令牌的身份验证有何益处？</h4><p>基于令牌的身份验证能为多个利益相关者提供许多便利：</p><ul><li><strong>即时的用户体验</strong>：用户无需在每次返回系统、应用程序或网页时重新输入凭据并重新进行身份验证，只要令牌仍然有效（通常会持续到会话因注销或退出而结束），用户就可以保持即时访问。</li><li><strong>增加了数字安全性</strong>：基于令牌的身份验证在传统的基于密码或基于服务器的身份验证之上又增加了一道安全保护。通常，令牌比密码更难被窃取、被黑客入侵或以其他方式泄露。</li><li><strong>管理员控制</strong>：基于令牌的身份验证为管理员提供了对每个用户操作和事项的更精细的控制和可见性。</li><li><strong>减轻技术负担</strong>：由于令牌生成可以与令牌验证完全分离，因此验证可以由辅助服务（如 Entrust 身份和访问管理解决方案提供的服务）来处理。这将显著减少内部服务器和设备上的负载。</li></ul><h3 id="二十二-编写令牌"><a href="#二十二-编写令牌" class="headerlink" title="二十二.编写令牌"></a>二十二.编写令牌</h3><h4 id="make-go"><a href="#make-go" class="headerlink" title="make.go"></a>make.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maker is an interface for managing tokens</span></span><br><span class="line"><span class="keyword">type</span> Maker <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line">CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line">VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="payload-go"><a href="#payload-go" class="headerlink" title="payload.go"></a>payload.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Different types of error returned by the VerifyToken function</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrInvalidToken = errors.New(<span class="string">&quot;token is invalid&quot;</span>)</span><br><span class="line">ErrExpiredToken = errors.New(<span class="string">&quot;token has expired&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Payload contains the payload data of the token</span></span><br><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        uuid.UUID <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Username  <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">Role      <span class="type">string</span>    <span class="string">`json:&quot;role&quot;`</span></span><br><span class="line">IssuedAt  time.Time <span class="string">`json:&quot;issued_at&quot;`</span></span><br><span class="line">ExpiredAt time.Time <span class="string">`json:&quot;expired_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPayload creates a new token payload with a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPayload</span><span class="params">(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration)</span></span> (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">tokenID, err := uuid.NewRandom()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload := &amp;Payload&#123;</span><br><span class="line">ID:        tokenID,</span><br><span class="line">Username:  username,</span><br><span class="line">Role:      role,</span><br><span class="line">IssuedAt:  time.Now(),</span><br><span class="line">ExpiredAt: time.Now().Add(duration),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valid checks if the token payload is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(payload *Payload)</span></span> Valid() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> time.Now().After(payload.ExpiredAt) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jwt-maker-go"><a href="#jwt-maker-go" class="headerlink" title="jwt_maker.go"></a>jwt_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minSecretKeySize = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JWTMaker is a JSON Web Token maker</span></span><br><span class="line"><span class="keyword">type</span> JWTMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">secretKey <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewJWTMaker creates a new JWTMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWTMaker</span><span class="params">(secretKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(secretKey) &lt; minSecretKeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be at least %d characters&quot;</span>, minSecretKeySize)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;JWTMaker&#123;secretKey&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, role, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, payload)</span><br><span class="line">token, err := jwtToken.SignedString([]<span class="type">byte</span>(maker.secretKey))</span><br><span class="line"><span class="keyword">return</span> token, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">keyFunc := <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">_, ok := token.Method.(*jwt.SigningMethodHMAC)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(maker.secretKey), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken, err := jwt.ParseWithClaims(token, &amp;Payload&#123;&#125;, keyFunc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">verr, ok := err.(*jwt.ValidationError)</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; errors.Is(verr.Inner, ErrExpiredToken) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload, ok := jwtToken.Claims.(*Payload)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jwt_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJWTMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">role := util.DepositorRole</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.Equal(t, role, payload.Role)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredJWTToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInvalidJWTTokenAlgNone</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">payload, err := NewPayload(util.RandomOwner(), time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodNone, payload)</span><br><span class="line">token, err := jwtToken.SignedString(jwt.UnsafeAllowNoneSignatureType)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">payload, err = maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrInvalidToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作者说 passeto是比JWT更简洁更好用</p><h4 id="passeto-maker-go"><a href="#passeto-maker-go" class="headerlink" title="passeto_maker.go"></a>passeto_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aead/chacha20poly1305&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/o1egl/paseto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PasetoMaker is a PASETO token maker</span></span><br><span class="line"><span class="keyword">type</span> PasetoMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">paseto       *paseto.V2</span><br><span class="line">symmetricKey []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPasetoMaker creates a new PasetoMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPasetoMaker</span><span class="params">(symmetricKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(symmetricKey) != chacha20poly1305.KeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be exactly %d characters&quot;</span>, chacha20poly1305.KeySize)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maker := &amp;PasetoMaker&#123;</span><br><span class="line">paseto:       paseto.NewV2(),</span><br><span class="line">symmetricKey: []<span class="type">byte</span>(symmetricKey),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> CreateToken(username <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker.paseto.Encrypt(maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload := &amp;Payload&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := maker.paseto.Decrypt(token, maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = payload.Valid()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="paseto-make-test-go"><a href="#paseto-make-test-go" class="headerlink" title="paseto_make_test.go"></a>paseto_make_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPasetoMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredPasetoToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewPasetoMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//None算法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-28学习如何用令牌登录api"><a href="#10-28学习如何用令牌登录api" class="headerlink" title="10.28学习如何用令牌登录api"></a>10.28学习如何用令牌登录api</h3><h4 id="1-server-go"><a href="#1-server-go" class="headerlink" title="1.server.go"></a>1.server.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/token&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config     util.Config</span><br><span class="line">store      db.Store</span><br><span class="line">router     *gin.Engine</span><br><span class="line">tokenMaker token.Maker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;RMB&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">tokenMaker, err := token.NewPasetoMaker(config.TokenSymmetricKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Key length in bytes: %d\n&quot;</span>, <span class="built_in">len</span>([]<span class="type">byte</span>(config.TokenSymmetricKey)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;cannot create token maker: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config:     config,</span><br><span class="line">store:      store,</span><br><span class="line">tokenMaker: tokenMaker,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">server.setupRouter()</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupRouter() &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/users/login&quot;</span>, server.loginUser)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.POST(<span class="string">&quot;/users&quot;</span>, server.createUser)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccounts)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-user-go"><a href="#2-user-go" class="headerlink" title="2.user.go"></a>2.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="comment">//&quot;github.com/jackc/pgtype&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newUserResponse</span><span class="params">(user db.User)</span></span> UserResponse &#123;</span><br><span class="line"><span class="keyword">return</span> UserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received request: %+v\n&quot;</span>, req) <span class="comment">// 打印请求体</span></span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(fmt.Errorf(<span class="string">&quot;failed to hash password: %v&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">user, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error creating user: %v\n&quot;</span>, err) <span class="comment">// 打印错误</span></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := newUserResponse(user)</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span>       <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">User        UserResponse <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> loginUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req loginUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := server.store.GetUser(ctx, req.Username)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = util.CheckPassword(req.Password, user.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accessToken, err := server.tokenMaker.CreateToken(</span><br><span class="line">user.Username,</span><br><span class="line">server.config.AccessTokenDuration,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := loginUserResponse&#123;</span><br><span class="line"></span><br><span class="line">AccessToken: accessToken,</span><br><span class="line"></span><br><span class="line">User: newUserResponse(user),</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-问题1"><a href="#3-问题1" class="headerlink" title="3.问题1"></a>3.问题1</h4><p>为什么运行transfer_text.go出现了很多错误：</p><h4 id="4-解决1"><a href="#4-解决1" class="headerlink" title="4.解决1"></a>4.解决1</h4><p>在学习的时候图方便把作者的代码全部拉了下来  在transfer_test.go中 有很多情况 在transfer中并没有实现 导致无法对应这些情况</p><p>正常时作者留给你的任务 让你去课后实现这些功能</p><p>重新回顾第13集：</p><p>模拟数据库进行测试：</p><p>确保模拟数据库实现与真是数据库相同的接口</p><p>出问题的两段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;UnauthorizedUser&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.RandomCurrency(),</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account1.ID)).Times(<span class="number">1</span>).Return(account1, <span class="literal">nil</span>)</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account2.ID)).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;NoAuthorization&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.USD,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-问题2"><a href="#5-问题2" class="headerlink" title="5.问题2"></a>5.问题2</h4><p>为什么得到分组用户出错</p><h4 id="6-解决2"><a href="#6-解决2" class="headerlink" title="6.解决2"></a>6.解决2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为什么得到分页的时候用户为空 错误出现在这里</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">items := []Account&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> i Account</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(</span><br><span class="line">&amp;i.ID,</span><br><span class="line">&amp;i.Owner,</span><br><span class="line">&amp;i.Balance,</span><br><span class="line">&amp;i.Currency,</span><br><span class="line">&amp;i.CreatedAt,</span><br><span class="line">); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items = <span class="built_in">append</span>(items, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rows, err :&#x3D; q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset) 这里查询的条件有arg.owner 但是我们在测试的时候并没有设置owner 可以显示尝试把owner去掉</p><h4 id="11-6日-二十二-身份验证中间件-授权API请求"><a href="#11-6日-二十二-身份验证中间件-授权API请求" class="headerlink" title="11.6日 二十二.身份验证中间件 授权API请求"></a>11.6日 二十二.身份验证中间件 授权API请求</h4><p>使用make sqlc 和 make mock 重新为listAccount增加 Owner字段</p><p>搞了半天 app.env配置错了 应该是</p><p>ACCESS_TOKEN_DURATION&#x3D;15m</p><p>我写成别的了</p><h3 id="二十三-部署目前的程序"><a href="#二十三-部署目前的程序" class="headerlink" title="二十三.部署目前的程序"></a>二十三.部署目前的程序</h3><h4 id="1-对程序进行docker化"><a href="#1-对程序进行docker化" class="headerlink" title="1.对程序进行docker化"></a>1.对程序进行docker化</h4><p>运用git部署</p><p><strong>注意</strong>：永远不要将更改直接推送到主分支</p><p>1.创建新分支-》推送分支-》产生以下结果-》复制url-》创建标题-》创建拉取请求-》从而可以看到 Files changed 文件的更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 local objects.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for &#x27;ft/docker&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/Whuichenggong/projects/pull/new/ft/docker</span><br><span class="line">remote:</span><br><span class="line">To github.com:Whuichenggong/projects.git</span><br><span class="line"> * [new branch]      ft/docker -&gt; ft/docker</span><br></pre></td></tr></table></figure><p>重新回看第10集 配置工作流 最近这两天了解到了工作流有了更深的理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># This workflow will build a golang project</span><br><span class="line"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span><br><span class="line"></span><br><span class="line">name: Go</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line"></span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">    - name: Set up Go</span><br><span class="line">      uses: actions/setup-go@v4</span><br><span class="line">      with:</span><br><span class="line">        go-version: &#x27;1.20&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: go build -v ./...</span><br><span class="line"></span><br><span class="line">    - name: Test</span><br><span class="line">      run: go test -v ./...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>go语言的工作流模板</p><p>giuthub action 相当于将一些列配置放到了github上的一个服务器上 也就是相当于将东西放进了github的服务器</p><hr><h4 id="11-10日"><a href="#11-10日" class="headerlink" title="11.10日"></a>11.10日</h4><p>还是github action问题 终于把 Install golang-migrate解决了</p><p>因为： 在最开始推送项目到github的时候 就是因为把项目结构推送错了 ，导致推送到github上的项目根目录没有go.mod文件这造成了很大的错误 导致一直失败</p><p>今天又解决了 install golang-migrate问题 因为sudo mv migrate &#x2F;usr&#x2F;bin&#x2F;migrate   把之前的 名称换成 <strong>migrate</strong>就好用了</p><p>问题2：</p><p>make migratedown migrate -path &#x2F;db&#x2F;migration -database “postgresql:&#x2F;&#x2F;root:secret@localhost:5432&#x2F;simple_bank?sslmode&#x3D;disable” -verbose down 2024&#x2F;11&#x2F;10 13:30:17 error: open &#x2F;db&#x2F;migration.: The system cannot find the path specified. make: *** [migratedown] 错误 1</p><p>在Makefile中的指令的 路径又弄错了 必须让指令能找到位置所在</p><p><strong>卧槽：成功了 绿了 妈的</strong></p><p>牛逼</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>官方镜像</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-alpine3.<span class="number">13</span> </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> .. .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>docker build -t simplebank:latest</code> 使用这个指令构建镜像</p><p>images的大小很大</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images </span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       48621dad3f4d   5 minutes ago   656MB</span><br></pre></td></tr></table></figure><p>分阶段构建可以减少体积</p><p>也就是</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage 构建二进制文件</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.23</span>-alpine3.<span class="number">20</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Production stage 生产环境</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.20</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/main .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终体积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       f64691fae70e   7 seconds ago   27.1MB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a列出容器状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker rmi f64691fae70e</span><br><span class="line">Untagged: simplebank:latest</span><br><span class="line">Deleted: sha256:f64691fae70e516b799ed846bbeef10045388dae1932ecafc8b93fb208b403f0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//运行这条指令便启动了容器 监听8080端口</span><br><span class="line"> docker run --name simplebank -p 8080:8080 simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 127.0.0.1:1124</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//重新启动镜像</span><br><span class="line">PS E:\projects\simplebank&gt; docker rm simplebank</span><br><span class="line">simplebank</span><br><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release simplebank:latest</span><br><span class="line"></span><br><span class="line">这样启动就不会有上面的输出了</span><br></pre></td></tr></table></figure><p><code> docker container inspect postgres12</code>  检查网络设置</p><h4 id="11-13日"><a href="#11-13日" class="headerlink" title="11.13日"></a>11.13日</h4><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>解决用docker启动后 无法用postman测试接口的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8083:8083 -e GIN_MODE=release -e       DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br></pre></td></tr></table></figure><p><strong>每次修改完dockerfiles或者什么 要记住重新构建镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t simplebank:latest .</span><br></pre></td></tr></table></figure><h5 id="关键："><a href="#关键：" class="headerlink" title="关键："></a>关键：</h5><p><strong>先使用调试功能 查看是否正确监听端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8080:8080  simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>这次在测试的时候 有了反应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 01:17:23 | 401 |      39.567µs |      172.17.0.1 | GET      &quot;/accounts/1&quot;</span><br></pre></td></tr></table></figure><p>此更改导致了postgres连接出错</p><p>#####<strong>不使用ip地址使用用户定义的网络 连接到postrges</strong></p><p><code>docker network ls</code></p><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID     NAME                DRIVER    SCOPE</span><br><span class="line">ca0046b2c82c   bank-network        bridge    <span class="keyword">local</span></span><br><span class="line">cf35f34026f7   bridge              bridge    <span class="keyword">local</span></span><br><span class="line">1500c05159ef   host                host      <span class="keyword">local</span></span><br><span class="line">074a556122c6   none                null      <span class="keyword">local</span></span><br><span class="line">fafb76e1721e   start_gvb-network   bridge    <span class="keyword">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>桥接网络</p><h5 id="查看更详细的网络信息"><a href="#查看更详细的网络信息" class="headerlink" title="查看更详细的网络信息"></a>查看更详细的网络信息</h5><p><code>docker network inspect bridge</code></p><p>删除网络:</p><p><code>docker network rm 0fd871187ef1</code></p><h5 id="创建自己的网络"><a href="#创建自己的网络" class="headerlink" title="创建自己的网络"></a>创建自己的网络</h5><p>&#96;&#96;docker network create bank_network&#96;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`0fd871187ef1e3b3bee37ac898e895cf54615e267bd6af9d7b2c045fc5178a14</span><br></pre></td></tr></table></figure><h5 id="连接创建的网络"><a href="#连接创建的网络" class="headerlink" title="连接创建的网络"></a>连接创建的网络</h5><p><code>docker network connect bank-network</code></p><p>将postrges12 连接到我们创建的网络</p><p><code>docker network connect bank-network postgres12</code></p><p><code>docker network inspect bank-network</code></p><h6 id="得先启动-postrges12"><a href="#得先启动-postrges12" class="headerlink" title="得先启动 postrges12"></a>得先启动 postrges12</h6><p><strong>验证 <code>postgres12</code> 容器是否正在运行</strong>： 检查 named 的容器是否正在运行：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查找具有名称的容器并检查其状态。如果容器未运行，请启动容器：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start postgres12</span><br></pre></td></tr></table></figure><p><strong>再次将 <code>postgres12</code> 连接到网络</strong>： 现在，尝试将容器连接到 ：<code>postgres12``bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect bank-network postgres12</span><br></pre></td></tr></table></figure><p>现在已经成功添加了postrges12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br></pre></td></tr></table></figure><p>此时查看</p><p><code> docker container inspect postgres12</code></p><p>这个容器将会有两段网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&quot;NetworkSettings&quot;: &#123;</span><br><span class="line">           &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">           &quot;SandboxID&quot;: &quot;2ea1e674576863a5e20fe6dda2a3ea265dd11b0223dc4a94bbfa23c57adc66d9&quot;,</span><br><span class="line">           &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/2ea1e6745768&quot;,</span><br><span class="line">           &quot;Ports&quot;: &#123;</span><br><span class="line">               &quot;5432/tcp&quot;: [</span><br><span class="line">                   &#123;</span><br><span class="line">                       &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">                       &quot;HostPort&quot;: &quot;5432&quot;</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;HairpinMode&quot;: false,</span><br><span class="line">           &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">           &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">           &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">           &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">           &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">           &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">           &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">           &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">           &quot;Networks&quot;: &#123;</span><br><span class="line">               &quot;bank-network&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ],</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;DNSNames&quot;: [</span><br><span class="line">                       &quot;postgres12&quot;,</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ]</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;bridge&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: null,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: null,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;cf35f34026f787fe91864d7e7a2ab23d482b6a6b956a10d596ae0d9818aa7e16&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: null,</span><br><span class="line">                   &quot;DNSNames&quot;: null</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>重新使用指令</p><p><code> docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</code></p><p>此时 simplebank容器将与postgres12运行在同一个网络上</p><p>将172.17.0.2替换成postgres12 因为可以通过名称访问网络</p><p>启动容器指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@postgres12:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 02:06:27 | 400 |     105.754µs |      172.18.0.1 | POST     &quot;/users/login&quot;</span><br></pre></td></tr></table></figure><p><code>docker network inspect bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">       &quot;Name&quot;: &quot;bank-network&quot;,</span><br><span class="line">       &quot;Id&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">       &quot;Created&quot;: &quot;2024-05-10T13:32:42.557489581Z&quot;,</span><br><span class="line">       &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">       &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">       &quot;EnableIPv6&quot;: false,</span><br><span class="line">       &quot;IPAM&quot;: &#123;</span><br><span class="line">           &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">           &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">           &quot;Config&quot;: [</span><br><span class="line">               &#123;</span><br><span class="line">                   &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Internal&quot;: false,</span><br><span class="line">       &quot;Attachable&quot;: false,</span><br><span class="line">       &quot;Ingress&quot;: false,</span><br><span class="line">       &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">           &quot;Network&quot;: &quot;&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;a76e19ef1c210d1cc4f458ed9b2238db810872417e0a1072e8467dda82663a2a&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;487f3ec81ada3bf84e44af700d0ae930075ce8c683755d789c27cadc7f95ed06&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">       &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>目前有两个容器在自定义的网络中运行</p><p><strong>之后的postrges就可以正常使用了</strong></p><p>更改Makefile文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">postgres:</span></span><br><span class="line">docker run --name postgres12 --network bank-network -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine</span><br></pre></td></tr></table></figure><p>在github中 pullrequest中可以查看更改 并且 merge 分支到主分支-》然后确认合并—》Delete branch</p><h4 id="二十四-docker-compose"><a href="#二十四-docker-compose" class="headerlink" title="二十四.docker-compose"></a>二十四.docker-compose</h4><p><a href="https://docs.docker.com/">https://docs.docker.com</a></p><p>创建docker-compose.yaml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:12-alpine</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=root</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">      - POSTGRES_DB=simple_bank</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5432:5432&quot;</span><br><span class="line">    </span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    </span><br><span class="line">    environment:</span><br><span class="line">      - DB_SOURCE=postgresql://root:secret@postgres:5432/simple_bank?sslmode=disable</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p><code>docker compose up</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> docker compose up</span><br><span class="line">[+] Running 1/0</span><br><span class="line"> ✔ Container simplebank-api-1  Created            0.0s </span><br><span class="line">Attaching to api-1, postgres-1</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line">api-1       |  - using env:     export GIN_MODE=release</span><br><span class="line">api-1       |  - using code:    gin.SetMode(gin.ReleaseMode)</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">api-1       | Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">api-1       | [GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br><span class="line">postgres-1  | The files belonging to this database system will be owned by user &quot;postgres&quot;.</span><br><span class="line">postgres-1  | This user must also own the server process.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | The database cluster will be initialized with locale &quot;en_US.utf8&quot;.</span><br><span class="line">postgres-1  | The default database encoding has accordingly been set to &quot;UTF8&quot;.</span><br><span class="line">postgres-1  | The default text search configuration will be set to &quot;english&quot;.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Data page checksums are disabled.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | fixing permissions on existing directory /var/lib/postgresql/data ... ok</span><br><span class="line">postgres-1  | creating subdirectories ... ok</span><br><span class="line">postgres-1  | selecting dynamic shared memory implementation ... posix</span><br><span class="line">postgres-1  | selecting default max_connections ... 100</span><br><span class="line">postgres-1  | selecting default shared_buffers ... 128MB</span><br><span class="line">postgres-1  | selecting default time zone ... UTC</span><br><span class="line">postgres-1  | creating configuration files ... ok</span><br><span class="line">postgres-1  | running bootstrap script ... ok</span><br><span class="line">postgres-1  | sh: locale: not found</span><br><span class="line">postgres-1  | 2024-11-13 06:50:42.795 UTC [30] WARNING:  no usable system locales were found</span><br><span class="line">postgres-1  | performing post-bootstrap initialization ... ok</span><br><span class="line">postgres-1  | syncing data to disk ... ok</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Success. You can now start the database server using:</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |     pg_ctl -D /var/lib/postgresql/data -l logfile start</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | initdb: warning: enabling &quot;trust&quot; authentication for local connections</span><br><span class="line">postgres-1  | You can change this by editing pg_hba.conf or using the option -A, or</span><br><span class="line">postgres-1  | --auth-local and --auth-host, the next time you run initdb.</span><br><span class="line">postgres-1  | waiting for server to start....2024-11-13 06:50:43.144 UTC [36] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.146 UTC [36] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.160 UTC [37] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.164 UTC [36] LOG:  database system is ready to accept connections</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server started</span><br><span class="line">postgres-1  | CREATE DATABASE</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | waiting for server to shut down....2024-11-13 06:50:43.315 UTC [36] LOG:  received fast shutdown request</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.316 UTC [36] LOG:  aborting any active transactions</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [36] LOG:  background worker &quot;logical replication launcher&quot; (PID 43) exited with exit code 1</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [38] LOG:  shutting down</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.330 UTC [36] LOG:  database system is shut down</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server stopped</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | PostgreSQL init process complete; ready for start up.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line"></span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.450 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.461 UTC [51] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.465 UTC [1] LOG:  database system is ready to accept connections</span><br></pre></td></tr></table></figure><p>构建镜像完成后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED        SIZE</span><br><span class="line">simplebank-api     latest       eb772c9e932f   6 hours ago    27.1MB</span><br><span class="line">simplebank         latest       9f145f0ce89f   6 hours ago    27.1MB</span><br></pre></td></tr></table></figure><p>查看占用端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`netstat -ano | findstr :5432`</span><br><span class="line">  TCP    0.0.0.0:5432           0.0.0.0:0              LISTENING       30352</span><br><span class="line">  TCP    [::]:5432              [::]:0                 LISTENING       30352</span><br><span class="line">  TCP    [::1]:5432             [::]:0                 LISTENING       35464</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 30352&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">com.docker.backend.exe       30352 Console                    2    117,104 K</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 35464&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">wslrelay.exe                 35464 Console                    2      8,328 K</span><br></pre></td></tr></table></figure><p>在 Windows 上（终止进程）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 30352 /F</span><br><span class="line">taskkill /PID 35464 /F</span><br></pre></td></tr></table></figure><p><code>docker ps</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                COMMAND                   CREATED             STATUS         PORTS                                      NAMES</span><br><span class="line">dab18d564f9c   postgres:12-alpine   &quot;docker-entrypoint.s…&quot;   About an hour ago   Up 7 minutes   0.0.0.0:5432-&gt;5432/tcp                     simplebank-postgres-1</span><br><span class="line">c4c37a8a870a   simplebank-api       &quot;/app/main&quot;               About an hour ago   Up 7 minutes   0.0.0.0:8080-&gt;8080/tcp                     simplebank-api-1</span><br></pre></td></tr></table></figure><p><code>docker network inspect simplebank_default</code></p><p>两个服务容器实际在同一个网络上运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> docker network inspect simplebank_default</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;simplebank_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;fab69439b1a55525d81fa70d9e789c3b6d51ba8d7899924deb8413fb724ca951&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-13T05:28:49.358856507Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.20.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.20.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;c4c37a8a870a75e9fa626c7034dd935c8f3afdb86c5e2c37b012503bff9c7ab7&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;8a247db55db70983d6b2d619caef09bf2593964daa02be5773448fbd74f9d791&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;dab18d564f9c4554ef255e50205be2f4dd9c1fada3391dde698d7717d0e642ff&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;2b9220ab1bcc031b29631a2ecb462a48a475a722b10592c478124c03d95e29df&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;simplebank&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;2.24.6&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>docker compose down</code></p><p>删除现在所有网络</p><p>Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Build stage 构建二进制文件</span></span><br><span class="line">FROM golang:1.23-alpine3.20 AS build</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line">RUN go build -o main main.go</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run stage</span> </span><br><span class="line">FROM alpine:3.20</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build /app/main .</span><br><span class="line">COPY app.env .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一步可以解决2024/11/13 08:08:06 cannot load config:Config File <span class="string">&quot;app&quot;</span> Not Found <span class="keyword">in</span> <span class="string">&quot;[/app]&quot;</span></span></span><br><span class="line"></span><br><span class="line">EXPOSE 8080 </span><br><span class="line">CMD [ &quot;/app/main&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>操 最后一刻验证成功了</p><p>用终端输入指令 带入参数 172.17.0.2 这样 viper可以自动读取配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simple_bank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">Received request: &#123;Username:Zhonghe FullName:zhaohzonghe Email:3041322213@qq.com Password:zzh123456&#125;</span><br><span class="line">[GIN] 2024/11/13 - 12:54:07 | 200 |   57.106456ms |      172.17.0.1 | POST     &quot;/users&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.env中的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=postgres://root:secret@localhost:5432/simple_bank?sslmode=disable</span><br><span class="line">MIGRATION_URL=project/simplebank/db/migration</span><br><span class="line">HTTPServerAddress=0.0.0.0:8080</span><br><span class="line">TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012</span><br><span class="line">ACCESS_TOKEN_DURATION=15m</span><br></pre></td></tr></table></figure><h4 id="11-18日"><a href="#11-18日" class="headerlink" title="11.18日"></a>11.18日</h4><p><code>docker ps</code></p><p><code>docker network inspect simplebank_default</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                COMMAND                   CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">81aa7c463a58   postgres:12-alpine   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:5432-&gt;5432/tcp   simplebank-postgres-1</span><br><span class="line">047f0bb9fbc8   simplebank-api       &quot;/app/main&quot;               About a minute ago   Up About a minute   0.0.0.0:8080-&gt;8080/tcp   simplebank-api-1</span><br><span class="line">PS E:\projects\simplebank&gt; </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;simplebank_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;9afc6c5d5e9252f2161f204008596b067fceecd49ac5a9171910c58f4717e205&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-18T11:05:59.526768414Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;047f0bb9fbc8fdbe07cc311b134c00ff27cb0a2cbcb4322746a6b30cbbb404bf&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;b607176500386abe6ac7ad27f31d9c453a3f2087dacade426d50a72b1e30b585&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;81aa7c463a58ad777dd3d99f9ba3c442c024c02d0f91be924903ffa423f99426&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;ce4ec4fda5631c27ba1e8c96503ef86f1bfea3bc8f563ecf7528c75ca91f1bb6&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;simplebank&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;2.24.6&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>两个服务器运行在同一个网络 通过名字彼此发现自己</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;047f0bb9fbc8fdbe07cc311b134c00ff27cb0a2cbcb4322746a6b30cbbb404bf&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b607176500386abe6ac7ad27f31d9c453a3f2087dacade426d50a72b1e30b585&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;81aa7c463a58ad777dd3d99f9ba3c442c024c02d0f91be924903ffa423f99426&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;ce4ec4fda5631c27ba1e8c96503ef86f1bfea3bc8f563ecf7528c75ca91f1bb6&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>目前是链接不上数据库的因为没有执行数据库迁移</p><p>重新构建docker-compose docker files文件</p><p><code>docker compose down</code><br>[+] Running 3&#x2F;3<br>✔ Container simplebank-postgres-1  Removed                                                                                                                               0.7s<br>✔ Container simplebank-api-1       Removed                                                                                                                               0.6s<br>✔ Network simplebank_default       Removed</p><p>删除目前所有容器和网络</p><p>使用<code>docker rmi ….</code></p><p>删除simplebank_api镜像</p><h5 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h5><p>ERROR [api internal] load metadata for docker.io&#x2F;library&#x2F;builder:latest</p><p>错误的核心在于 <code>tar</code> 解压的文件名与你 <code>mv</code> 命令中期望的文件名不匹配。具体表现为 <code>tar</code> 解压生成的文件名并不是 <code>migrate.linux-amd64</code>，而是 <code>migrate</code>。</p><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p><strong>1. 修改 <code>RUN</code> 命令中的文件名引用</strong></p><p>根据错误日志，<code>tar</code> 解压后生成的文件名是 <code>migrate</code>，而非 <code>migrate.linux-amd64</code>。因此，<code>mv</code> 命令应改为直接操作 <code>migrate</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dockerfile复制代码RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz \</span><br><span class="line">    | tar -xz &amp;&amp; mv migrate /app/migrate</span><br></pre></td></tr></table></figure><p>这将确保正确地将解压出的 <code>migrate</code> 文件移动到 <code>/app/migrate</code>。</p><p><strong>2. 验证文件解压和路径</strong></p><p>为了确保过程正确，可以在 <code>RUN</code> 指令中加入调试信息以打印文件列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dockerfile复制代码RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz \</span><br><span class="line">    | tar -xz &amp;&amp; ls -l &amp;&amp; mv migrate /app/migrate</span><br></pre></td></tr></table></figure><p>原因：要保持 builer同意 我写成了一个build  另一个builder 因该换成build</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY --from=build /app/main .</span><br><span class="line">COPY --from=build /app/migrate /usr/bin/migrate   </span><br></pre></td></tr></table></figure><p>欧克解决了</p><p>完整的 dockerfile</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.23</span>-alpine3.<span class="number">20</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L  https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz &amp;&amp; <span class="built_in">mv</span> migrate /app/migrate</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment"># Run stage</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.20</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/main .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/migrate /usr/bin/migrate</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.env .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> start.sh . </span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> db/migration ./migration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/app/start.sh&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的 docker-compose.yaml</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:<span class="number">12</span>-alpine</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=root</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">      - POSTGRES_DB=simple_bank</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    </span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    </span><br><span class="line">    environment:</span><br><span class="line">      - DB_SOURCE=postgresql://root:secret@postgres:<span class="number">5432</span>/simple_bank?sslmode=disable</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br></pre></td></tr></table></figure><p>下载wait-for工具</p><p><code>mv &quot;C:\Users\30413\Downloads\wait-for&quot; ./wait-for.sh</code></p><p>目前测试api问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;error&quot;: &quot;failed to connect to `user=root database=simple_bank`:\n\t127.0.0.1:5432 (localhost): dial error: dial tcp 127.0.0.1:5432: connect: connection refused\n\t[::1]:5432 (localhost): dial error: dial tcp [::1]:5432: connect: cannot assign requested address&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-11-22日"><a href="#二-11-22日" class="headerlink" title="二.11.22日"></a>二.11.22日</h4><h5 id="解决上次的问题"><a href="#解决上次的问题" class="headerlink" title="解决上次的问题"></a>解决上次的问题</h5><p>无论怎么样构建无法用postman接口调试</p><p>这是因为 你在</p><p>star.sh中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">echo &quot;run db migrations&quot;</span><br><span class="line">/app/migrate -path /app/migration -database &quot;$DB_SOURCE&quot; -verbose up</span><br><span class="line"></span><br><span class="line">echo &quot;start the app&quot;</span><br><span class="line">exec &quot;$@&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决</strong></p><p>使用的连接数据库的 参数是 $DB_SOURCE” 但是你在app.env中配置的名字不是DB_SOURCE 是DATABASE_URL 这种错误造成的原因可能是目前你并不了解一些列的工具是如何真正使用的没有真正了解</p><p>之前的配置 都是用DATABASE_URL来配置的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=postgres://root:secret@localhost:5432/simple_bank?sslmode=disable</span><br><span class="line">MIGRATION_URL=project/simplebank/db/migration</span><br><span class="line">HTTPServerAddress=0.0.0.0:8080</span><br><span class="line">TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012</span><br><span class="line">ACCESS_TOKEN_DURATION=15m</span><br></pre></td></tr></table></figure><p>更改为 DB_SOURCE后api测试成功</p><h4 id="三-11-23日"><a href="#三-11-23日" class="headerlink" title="三.11.23日"></a>三.11.23日</h4><p>部署应用程序</p><h5 id="创建AWS-最大的云提供商-账户部署应用程序"><a href="#创建AWS-最大的云提供商-账户部署应用程序" class="headerlink" title="创建AWS(最大的云提供商)账户部署应用程序"></a>创建AWS(最大的云提供商)账户部署应用程序</h5><p>地址 <a href="https://aws.amazon.com/free/">https://aws.amazon.com/free/</a></p><p>emmm不知道银行卡的cvv</p><h5 id="自动构建docker镜像并推送到AWS-ECR"><a href="#自动构建docker镜像并推送到AWS-ECR" class="headerlink" title="自动构建docker镜像并推送到AWS ECR"></a>自动构建docker镜像并推送到AWS ECR</h5><p>1.创建一个存储库存储docker镜像</p><p>将docker 镜像推送到CLI<br>每当新代码合并到主分支时 我们将使用 Github Actions自动构建标记和推送镜像</p><p>deploy.yml 关键</p><p><strong>目前没有招商卡无法使用AWS 先使用快过期的aliyun试一试</strong></p><p>添加go到linux环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]# ^C</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]#    export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]# go run main.go</span><br><span class="line">go: downloading github.com/jackc/pgx/v5 v5.7.1</span><br><span class="line">go: downloading github.com/gin-gonic/gin v1.10.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="四-11-29日-尝试"><a href="#四-11-29日-尝试" class="headerlink" title="四.11.29日 尝试"></a>四.11.29日 尝试</h4><p>在仅剩5个月的服务器中 把这个简单的项目部署到服务器上</p><p>配置服务器的docker的yum源 否则下载东西很费劲</p><p>设置国内镜像【不设置可能会导致拉取镜像失败】<br>进入&#x2F;etc&#x2F;docker文件夹下，修改daemon.json。如果文件不存在则，创建该文件。</p><p>daemon.json文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;https://jkfdsf2u.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;insecure-registries&quot; : [</span><br><span class="line">    &quot;docker-registry.zjq.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;10&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;data-root&quot;: &quot;/data/docker&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉取docker pull镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:12-alpine</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>。。。。 配置不够cpu直接干到100%    看看有没有 简化的方法</p><p>11.30日</p><p>还是执着一点  弄了一台2核2gb的服务器 用docker部署</p><p>首先是源的配置 安装docker 安装docker-compose</p><p>然后是构建项目中出现的问题 反复构建</p><p>赋予权限等</p><p>权限问题在ubuntu中也是一个很重要的问题  哪个用户使用ubuntu也会导致不同的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">从 ls -ld 命令的输出可以看到，/home/ubuntu/projects/simplebank 目录的所有者和所属组都是 ubuntu，权限也允许当前用户进行访问。这意味着该目录的所有权和权限没有问题。</span><br><span class="line"></span><br><span class="line">但根据 Git 提示的错误信息，Git 依然检测到目录的所有权问题，因此需要添加该目录到 安全目录 列表中。</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line">运行以下命令，将该目录添加到 Git 的安全目录列表中：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /home/ubuntu/projects/simplebank</span><br></pre></td></tr></table></figure><p>看到希望了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS    PORTS                                       NAMES</span><br><span class="line">758e9432d178   e054039bb12c   &quot;/app/start.sh /app/…&quot;   27 minutes ago   Created   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   simplebank</span><br></pre></td></tr></table></figure><p>还需要配置数据库吗？？我有点蒙了</p><p>docker run与docker start的区别</p><p><img src="/study_photo2/simplebank1.png" alt="image-20241130213549768"></p><h4 id="五-2024年-11-30日-21：27分-成了把项目成功部署到了云服务器上太不容易了"><a href="#五-2024年-11-30日-21：27分-成了把项目成功部署到了云服务器上太不容易了" class="headerlink" title="五.2024年 11.30日 21：27分  成了把项目成功部署到了云服务器上太不容易了"></a>五.2024年 11.30日 21：27分  成了把项目成功部署到了云服务器上太不容易了</h4><p><img src="/study_photo2/simplebank2.png" alt="image-20241130213014346"></p><p><img src="/study_photo2/simplebank3.png" alt="image-20241130213026028"></p><p><img src="/study_photo2/simplebank4.png" alt="image-20241130213036904"></p><p><img src="/study_photo2/simplebank5.png" alt="image-20241130213050934"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker run --name simplebank -p 80:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simple_bank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">run db migrations</span><br><span class="line">2024/11/30 13:25:56 no change</span><br><span class="line">2024/11/30 13:25:56 Finished after 977.24µs</span><br><span class="line">2024/11/30 13:25:56 Closing source and database</span><br><span class="line">start the app</span><br><span class="line">Received request: &#123;Username:Zhonghe FullName:zhaohzonghe Email:3041322213@qq.com Password:zzh123456&#125;</span><br><span class="line">[GIN] 2024/11/30 - 13:26:07 | 200 |   75.179039ms |  202.97.179.126 | POST     &quot;/users&quot;</span><br></pre></td></tr></table></figure><p><img src="/study_photo2/simplebank6.png" alt="image-20241130213341117"></p><p><img src="/study_photo2/simplebank7.png" alt="image-20241130214233993"></p><p>为什么把端口8080:8080改成 80:8080就好用了 啊啊啊啊好兴奋 感谢老哥们</p><p>从把项目移动到 ubuntu 配置dockers环境</p><p>使用docker build构建项目</p><p>然后就是用postman测试</p><p>这期间 多次使用的</p><h5 id="Docker-指令"><a href="#Docker-指令" class="headerlink" title="Docker 指令"></a>Docker 指令</h5><p>docker run</p><p>docker images</p><p>docker ps -a</p><p>docekr pull</p><p>docker build -t simplebank:latest .</p><p>docker network create bank_network</p><p>docker network rm 0fd871187ef1</p><p>docker rm simplebank</p><p>docker rmi</p><p>docker network connect bank-network postgres12</p><p>docker network ls</p><p>docker container inspect postgres12</p><p>目前服务器中的 postgres12大体网络模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker container inspect postgres12</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-30T09:24:02.785101065Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;docker-entrypoint.sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;postgres&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 315509,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2024-11-30T11:54:14.985494404Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;2024-11-30T11:35:40.792853655Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:486566ce0ca8f59e321b2b5999de4b50237b2c60bcc3414d8a602fb96cb12c6f&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/postgres12&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;docker-default&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;</span><br><span class="line">                    &quot;max-file&quot;: &quot;10&quot;,</span><br><span class="line">                    &quot;max-size&quot;: &quot;10m&quot;</span><br><span class="line">            </span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bank_network&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [],</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;c2a3ada685148d5607a5a6fc39e1690e5fbd161f0607df5a3a189f74ced100fa&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;07a57c58250657bf968d33d1f93cea6e9225d0cae314648d1b1c639c3811c9c1&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;DNSNames&quot;: [</span><br><span class="line">                        &quot;postgres12&quot;,</span><br><span class="line">                        &quot;100ff1a5f0bf&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;83e7fddfe207131e6199fb11fb5daa38bf044b67817fba2de02bd7f1639d4bb8&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;d9449d910f4e7be735031acb301f0e418999b091bb8c75450fecf983eca2aa24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;DNSNames&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>还是看跟着课程走一走吧</p><p><img src="/study_photo2/simplebank8.png" alt="image-20241129195348180"></p><p><img src="/study_photo2/simplebank9.png" alt="image-20241129195504285"></p><p>AWS的EKS</p><p>将工作节点 添加到EKS集群 使用 kubectl 连接到集群</p><h5 id="如何创建新的EKS集群并向其中添加工作节点"><a href="#如何创建新的EKS集群并向其中添加工作节点" class="headerlink" title="如何创建新的EKS集群并向其中添加工作节点"></a>如何创建新的EKS集群并向其中添加工作节点</h5><p>大多都是用AWS目前没有卡还是先不要弄了</p><p>学习一下其他的知识</p><h4 id="进阶后端"><a href="#进阶后端" class="headerlink" title="进阶后端"></a>进阶后端</h4><p>master haha</p><p>管理用户会话</p><p>用PASETO JWT作为基于令牌的身份验证</p><p>因为这些是无状态设计 这些令牌不会存储到数据库中 寿命应该很短</p><p>他们的过期时间通常为10~15分钟 如果token每次都在这么短时间过期重新输入用户名和密码一定不是一个好的体验</p><p>刷新令牌</p><p>在服务器上维护有状态的会话</p><p>它将存储在数据库中 生命周期长</p><p>创建一个新的字段添加到app.env中</p><p>REFRESH_TOKEN_DURATION&#x3D;24h</p><p>同时config中添加新字段</p><p>RefreshTokenDuration time.Duration <code>mapstructure:&quot;REFRESH_TOKEN_DURATION&quot;</code></p><p>使用指令 migrate create -ext sql -dir db&#x2F;migration -seq  <migration_name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">，用于创建一个新的迁移文件。该指令参数的意义如下：&lt;migration_name&gt;表示迁移文件的名称；-ext sql指定迁移文件的扩展名；-dir db/migration定义了迁移文件的存储路径；-seq代表创建顺序迁移文件，并在文件名前加上序号。这个命令会在指定目录下生成两个文件，一个用于执行迁移（.up.sql），另一个用于回滚迁移（.down.sql），以实现数据库的版本控制和变更管理。</span><br></pre></td></tr></table></figure><h5 id="add-sessions-up-sql"><a href="#add-sessions-up-sql" class="headerlink" title="add_sessions.up.sql"></a>add_sessions.up.sql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &quot;sessions&quot; (</span><br><span class="line">  &quot;id&quot; uuid PRIMARY KEY,</span><br><span class="line">  &quot;username&quot; varchar NOT NULL,</span><br><span class="line">  &quot;refresh_token&quot; varchar NOT NULL,</span><br><span class="line">  &quot;user_agent&quot; varchar NOT NULL,</span><br><span class="line">  &quot;client_ip&quot; varchar NOT NULL,</span><br><span class="line">  &quot;is_blocked&quot; boolean NOT NULL DEFAULT false,</span><br><span class="line">  &quot;expires_at&quot; timestamptz NOT NULL,</span><br><span class="line">  &quot;created_at&quot; timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE &quot;sessions&quot; ADD FOREIGN KEY (&quot;username&quot;) REFERENCES &quot;users&quot; (&quot;username&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>“is_blocked” boolean NOT NULL DEFAULT false,  添加bool列来阻止会话 以防止刷新令牌被泄露</p><p>“expires_at” timestamptz NOT NULL, 刷新令牌的过期时间</p><p>ALTER TABLE “sessions” ADD FOREIGN KEY (“username”) REFERENCES “users” (“username”); 外键约束</p><h4 id="11-30日"><a href="#11-30日" class="headerlink" title="11.30日"></a>11.30日</h4><p>理清楚<code>sqlc generate</code> 到底是什么意思</p><p>依赖于sqlc.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">sql:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">schema:</span> <span class="string">&quot;./db/migration&quot;</span></span><br><span class="line">  <span class="attr">queries:</span> <span class="string">&quot;./db/query&quot;</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">  <span class="attr">gen:</span></span><br><span class="line">    <span class="attr">go:</span> </span><br><span class="line">      <span class="attr">package:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line">      <span class="attr">out:</span> <span class="string">&quot;./db/sqlc&quot;</span></span><br><span class="line">      <span class="attr">sql_package:</span> <span class="string">&quot;pgx/v5&quot;</span></span><br><span class="line">      <span class="attr">emit_json_tags:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">emit_interface:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">emit_empty_slices:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">overrides:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;timestamptz&quot;</span></span><br><span class="line">          <span class="attr">go_type:</span> <span class="string">&quot;time.Time&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;uuid&quot;</span></span><br><span class="line">          <span class="attr">go_type:</span> <span class="string">&quot;github.com/google/uuid.UUID&quot;</span></span><br></pre></td></tr></table></figure><p>指定一些列路径 自动生成代码到哪个位置</p><p>依赖的是.sql文件自动生成 相关的代码</p><h4 id="12-2日"><a href="#12-2日" class="headerlink" title="12.2日"></a>12.2日</h4><p>加入更多的响应</p><p><img src="/study_photo2/simplebank10.png" alt="image-20241129195504285"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的实现</title>
      <link href="/2024/11/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/data_structure/"/>
      <url>/2024/11/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/data_structure/</url>
      
        <content type="html"><![CDATA[<h2 id="双链表的实现"><a href="#双链表的实现" class="headerlink" title="双链表的实现"></a>双链表的实现</h2><h3 id="基于go语言实现"><a href="#基于go语言实现" class="headerlink" title="基于go语言实现"></a>基于go语言实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// Node 定义双链表节点</span><br><span class="line">type Node struct &#123;</span><br><span class="line">    data  interface&#123;&#125;</span><br><span class="line">    prev  *Node</span><br><span class="line">    next  *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DoublyLinkedList 定义双链表</span><br><span class="line">type DoublyLinkedList struct &#123;</span><br><span class="line">    head *Node</span><br><span class="line">    tail *Node</span><br><span class="line">    size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertTail 向链表尾部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertTail(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail.next = newNode</span><br><span class="line">        newNode.prev = dll.tail</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertHead 向链表头部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertHead(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        newNode.next = dll.head</span><br><span class="line">        dll.head.prev = newNode</span><br><span class="line">        dll.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Remove 删除节点</span><br><span class="line">func (dll *DoublyLinkedList) Remove(node *Node) &#123;</span><br><span class="line">    if node.prev != nil &#123;</span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.head = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    if node.next != nil &#123;</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail = node.prev</span><br><span class="line">    &#125;</span><br><span class="line">    node.prev = nil</span><br><span class="line">    node.next = nil</span><br><span class="line">    dll.size--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Display 打印双链表</span><br><span class="line">func (dll *DoublyLinkedList) Display() &#123;</span><br><span class="line">    curr := dll.head</span><br><span class="line">    for curr != nil &#123;</span><br><span class="line">        fmt.Print(curr.data, &quot; &quot;)</span><br><span class="line">        curr = curr.next</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    dll := DoublyLinkedList&#123;&#125;</span><br><span class="line">    dll.InsertTail(1)</span><br><span class="line">    dll.InsertTail(2)</span><br><span class="line">    dll.InsertHead(0)</span><br><span class="line">    dll.Display() // 应该输出：0 1 2</span><br><span class="line"></span><br><span class="line">    // 删除节点</span><br><span class="line">    headNode := dll.head</span><br><span class="line">    dll.Remove(headNode)</span><br><span class="line">    dll.Display() // 应该输出：1 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于c语言实现双链表"><a href="#基于c语言实现双链表" class="headerlink" title="基于c语言实现双链表"></a>基于c语言实现双链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">// 定义双链表节点结构</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Node* prev;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125; Node;</span><br><span class="line">// 创建一个新节点</span><br><span class="line">Node* createNode(int data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(sizeof(Node));</span><br><span class="line">    if (newNode == NULL) &#123;</span><br><span class="line">        printf(&quot;内存分配失败&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;prev = NULL;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line">    return newNode;</span><br><span class="line">&#125;</span><br><span class="line">// 在双链表前插入节点</span><br><span class="line">void insertFront(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    newNode-&gt;next = *head;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    *head = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在双链表后插入节点</span><br><span class="line">void insertRear(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        *head = newNode;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* last = *head;</span><br><span class="line">    while (last-&gt;next != NULL) &#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = last;</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表前的节点</span><br><span class="line">void deleteFront(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    *head = (*head)-&gt;next;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表后的节点</span><br><span class="line">void deleteRear(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* secondLast = *head;</span><br><span class="line">    while (secondLast-&gt;next-&gt;next != NULL) &#123;</span><br><span class="line">        secondLast = secondLast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = secondLast-&gt;next;</span><br><span class="line">    secondLast-&gt;next = NULL;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 打印双链表</span><br><span class="line">void printList(Node* node) &#123;</span><br><span class="line">    while (node != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Node* head = NULL;</span><br><span class="line"></span><br><span class="line">    insertFront(&amp;head, 10);</span><br><span class="line">    insertFront(&amp;head, 20);</span><br><span class="line">    insertRear(&amp;head, 30);</span><br><span class="line">    insertRear(&amp;head, 40);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：20 10 30 40</span><br><span class="line"></span><br><span class="line">    deleteFront(&amp;head);</span><br><span class="line">    deleteRear(&amp;head);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：10 30</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>区别：</p><p>c语言的双链表 我们要清楚 改变了头节点 所以要传入二级指针 才能正确的记录到头指针的变化</p><p>而Go语言，因为 Go 中的切片、映射和通道等是引用类型，它们在函数参数传递时本身就是按引用传递的，不需要通过指针的指针（二级指针）来实现修改。这实际上是 Go 语言的一个特性：切片、映射和通道在函数间传递时，共享底层数据结构，因此不需要额外的二级指针。</p><h2 id="栈的c语言实现"><a href="#栈的c语言实现" class="headerlink" title="栈的c语言实现"></a>栈的c语言实现</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Stack &#123;</span><br><span class="line">    int data[10];</span><br><span class="line">    int top;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack* stack) &#123;</span><br><span class="line">    stack-&gt;top = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsFull(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == 9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool push(Stack* stack, int data) &#123;</span><br><span class="line">    if (IsFull(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经满了不能执行入栈操作\n&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    stack-&gt;data[++stack-&gt;top] = data;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int pop(Stack* stack) &#123;</span><br><span class="line">    if (IsEmpty(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;  </span><br><span class="line">    &#125;</span><br><span class="line">    return stack-&gt;data[stack-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* stack) &#123;</span><br><span class="line">    printf(&quot;栈中元素：&quot;);</span><br><span class="line">    for (int i = stack-&gt;top; i &gt;= 0 ; i--) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, stack-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line"></span><br><span class="line">    push(&amp;stack, 1);</span><br><span class="line">    push(&amp;stack, 2);</span><br><span class="line">    push(&amp;stack, 3);</span><br><span class="line">    push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);</span><br><span class="line"></span><br><span class="line">    //pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">   // pop(&amp;stack);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列c语言实现"><a href="#队列c语言实现" class="headerlink" title="队列c语言实现"></a>队列c语言实现</h2><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表c简单实现"><a href="#哈希表c简单实现" class="headerlink" title="哈希表c简单实现"></a>哈希表c简单实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define NUM 5</span><br><span class="line"></span><br><span class="line">typedef struct HashList &#123;</span><br><span class="line">    int num;</span><br><span class="line">    char data[NUM]; // 修改为字符数组</span><br><span class="line">&#125; HashList;</span><br><span class="line"></span><br><span class="line">HashList* initList() &#123;</span><br><span class="line">    HashList* list = (HashList*)malloc(sizeof(HashList));</span><br><span class="line">    list-&gt;num = 0;</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        list-&gt;data[i] = 0; // 初始化所有元素为0</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ASCII码计算自动计算</span><br><span class="line">int hash(int data) &#123;</span><br><span class="line">    return data % NUM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(HashList* list, char data) &#123;</span><br><span class="line">    int index = hash(data);</span><br><span class="line">    printf(&quot;index = %d\n&quot;, index);</span><br><span class="line">    // 发生冲突</span><br><span class="line">    while (list-&gt;data[index] != 0) &#123; // 确保这个位置已经被占用</span><br><span class="line">        int count = 1; </span><br><span class="line">        index = hash(index + 1); // 线性查找</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;index = %d\n&quot;, index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    list-&gt;data[index] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    HashList* list = initList();</span><br><span class="line">    put(list, &#x27;A&#x27;);</span><br><span class="line">    put(list, &#x27;F&#x27;);</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        if (list-&gt;data[i] != 0) &#123; // 只打印已经使用的槽位</span><br><span class="line">            printf(&quot;%c\n&quot;, list-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借鉴： <a href="https://github.com/hunterhug/goa.c/blob/master/algorithm/dict.md">https://github.com/hunterhug/goa.c/blob/master/algorithm/dict.md</a></p><h5 id="go实现可变数组"><a href="#go实现可变数组" class="headerlink" title="go实现可变数组"></a>go实现可变数组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array 可变长数组</span></span><br><span class="line"><span class="keyword">type</span> Array <span class="keyword">struct</span> &#123;</span><br><span class="line">array []<span class="type">int</span>      <span class="comment">// 固定大小的数组，用满容量和满大小的切片来代替</span></span><br><span class="line"><span class="built_in">len</span>   <span class="type">int</span>        <span class="comment">// 真正长度</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="type">int</span>        <span class="comment">// 容量</span></span><br><span class="line">lock  sync.Mutex <span class="comment">// 为了并发安全使用的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make 新建一个可变长数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Make</span><span class="params">(<span class="built_in">len</span>, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> *Array &#123;</span><br><span class="line">s := <span class="built_in">new</span>(Array)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;len large than cap&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把切片当数组用</span></span><br><span class="line">array := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">cap</span>, <span class="built_in">cap</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元数据</span></span><br><span class="line">s.array = array</span><br><span class="line">s.<span class="built_in">cap</span> = <span class="built_in">cap</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append 增加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Append(element <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 并发锁</span></span><br><span class="line">a.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小等于容量，表示没多余位置了</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">len</span> == a.<span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="comment">// 没容量，数组要扩容，扩容到两倍</span></span><br><span class="line">newCap := <span class="number">2</span> * a.<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果之前的容量为0，那么新容量为1</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">cap</span> == <span class="number">0</span> &#123;</span><br><span class="line">newCap = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newArray := <span class="built_in">make</span>([]<span class="type">int</span>, newCap, newCap)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把老数组的数据移动到新数组</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a.array &#123;</span><br><span class="line">newArray[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换数组</span></span><br><span class="line">a.array = newArray</span><br><span class="line">a.<span class="built_in">cap</span> = newCap</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把元素放在数组里</span></span><br><span class="line">a.array[a.<span class="built_in">len</span>] = element</span><br><span class="line"><span class="comment">// 真实长度+1</span></span><br><span class="line">a.<span class="built_in">len</span> = a.<span class="built_in">len</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppendMany 增加多个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> AppendMany(element ...<span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> element &#123;</span><br><span class="line">a.Append(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取某个下标的元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 越界了</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">len</span> == <span class="number">0</span> || index &gt;= a.<span class="built_in">len</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;index over len&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.array[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len 返回真实长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cap 返回容量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Cap() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">cap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print 辅助打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(array *Array)</span></span> (result <span class="type">string</span>) &#123;</span><br><span class="line">result = <span class="string">&quot;[&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; array.Len(); i++ &#123;</span><br><span class="line"><span class="comment">// 第一个元素</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">result = fmt.Sprintf(<span class="string">&quot;%s%d&quot;</span>, result, array.Get(i))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = fmt.Sprintf(<span class="string">&quot;%s %d&quot;</span>, result, array.Get(i))</span><br><span class="line">&#125;</span><br><span class="line">result = result + <span class="string">&quot;]&quot;</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个容量为3的动态数组</span></span><br><span class="line">a := Make(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line">a.Append(<span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line">a.Append(<span class="number">9</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加多个元素</span></span><br><span class="line">a.AppendMany(<span class="number">8</span>, <span class="number">7</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合结构体</span></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">struct</span> &#123;</span><br><span class="line">m            <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// 用字典来实现，因为字段键不能重复</span></span><br><span class="line"><span class="built_in">len</span>          <span class="type">int</span>              <span class="comment">// 集合的大小</span></span><br><span class="line">sync.RWMutex                  <span class="comment">// 锁，实现并发安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个空集合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSet</span><span class="params">(<span class="built_in">cap</span> <span class="type">int64</span>)</span></span> *Set &#123;</span><br><span class="line">temp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;, <span class="built_in">cap</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;Set&#123;</span><br><span class="line">m: temp,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Add(item <span class="type">int</span>) &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line">s.m[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 实际往字典添加这个键</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="built_in">len</span>(s.m)       <span class="comment">// 重新计算元素数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Remove(item <span class="type">int</span>) &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合没元素直接返回</span></span><br><span class="line"><span class="keyword">if</span> s.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(s.m, item) <span class="comment">// 实际从字典删除这个键</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="built_in">len</span>(s.m)  <span class="comment">// 重新计算元素数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看是否存在元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Has(item <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">s.RLock()</span><br><span class="line"><span class="keyword">defer</span> s.RUnlock()</span><br><span class="line">_, ok := s.m[item]</span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看集合大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除集合所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Clear() &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line">s.m = <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 字典重新赋值</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="number">0</span>                <span class="comment">// 大小归零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合是够为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s.Len() == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将集合转化为列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> List() []<span class="type">int</span> &#123;</span><br><span class="line">s.RLock()</span><br><span class="line"><span class="keyword">defer</span> s.RUnlock()</span><br><span class="line">list := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, s.<span class="built_in">len</span>)</span><br><span class="line"><span class="keyword">for</span> item := <span class="keyword">range</span> s.m &#123;</span><br><span class="line">list = <span class="built_in">append</span>(list, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么使用空结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">other</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">b := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> a == b &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;right:%p\n&quot;</span>, &amp;a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(unsafe.Sizeof(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//other()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个容量为5的不可重复集合</span></span><br><span class="line">s := NewSet(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;list of all items&quot;</span>, s.List())</span><br><span class="line"></span><br><span class="line">s.Clear()</span><br><span class="line"><span class="keyword">if</span> s.IsEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">2</span>)</span><br><span class="line">s.Add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.Has(<span class="number">2</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;2 does exist&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Remove(<span class="number">2</span>)</span><br><span class="line">s.Remove(<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;list of all items&quot;</span>, s.List())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加并发锁，实现线程安全，然后往结构体<br>s *Set 里面的内置 map 添加该元素：item，元素作为字典的键，会自动去重。同时，集合大小重新生成。</p><p>s.m[item] &#x3D; struct{}{} 这行代码向 m 这个映射中添加一个 item 作为键，并将其值设置为 struct{}{}。<br>由于 m 是 map[int]struct{} 类型的，它的键是 int 类型，而值是空结构体 struct{} 类型，<br>它们不占用任何空间。<strong>这一步实际上是往字典添加一个键，而不需要关心值。</strong></p><h5 id="最大堆的建立"><a href="#最大堆的建立" class="headerlink" title="最大堆的建立"></a>最大堆的建立</h5><p>堆排序中的（递归）是制造最大堆的关键 其实也可以不用最大堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> length,<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">buildheap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">prinarry</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">prinarry</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">temp=*a;</span><br><span class="line">* a = *b;</span><br><span class="line">* b = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重点在这里如何交换使得成为最大堆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> largest = i;</span><br><span class="line"><span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left&lt;length &amp;&amp; a[left]&gt;a[largest])</span><br><span class="line">&#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right&lt;length &amp;&amp; a[right]&gt;a[largest])</span><br><span class="line">&#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (largest != i)</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[i], &amp;a[largest]);<span class="comment">//必须加&amp;</span></span><br><span class="line">heapsort(a, length, largest);<span class="comment">//这步递归是关键能确保整体保证是堆的性质</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">buildheap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span><span class="comment">//建立堆</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = (length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=(length<span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">heapsort(a, length, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arry[<span class="number">6</span>] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> length = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">0</span>]);</span><br><span class="line">buildheap(arry, length);</span><br><span class="line">prinarry(arry, length);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像不对劲 如果你期望的是排序后的数组（比如 120 100 90 50），你的代码缺少以下步骤：</p><p>交换堆顶和末尾元素：将最大堆的根节点（最大值）移动到数组末尾。<br>重新堆化剩余部分：对剩余的数组部分（即去掉最后一个元素的堆）重新堆化。<br>重复步骤：直到数组完全排序。</p><p>你的代码本身并没有严重的问题，但它仅仅完成了“构建最大堆”的功能，没有实现堆排序，因此输出的数组只是一个堆的结构（满足最大堆性质，但并非有序数组）。<br>如果你预期的结果是排序后的数组，那么确实还需要补充代码来完成堆排序的逻辑。</p><p>啊我靠</p><h5 id="go实现最大堆"><a href="#go实现最大堆" class="headerlink" title="go实现最大堆"></a>go实现最大堆</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个最大堆，一棵完全二叉树</span></span><br><span class="line"><span class="comment">// 最大堆要求节点元素都不小于其左右孩子</span></span><br><span class="line"><span class="keyword">type</span> Heap <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 堆的大小</span></span><br><span class="line">Size <span class="type">int</span></span><br><span class="line"><span class="comment">// 使用内部的数组来模拟树</span></span><br><span class="line"><span class="comment">// 一个节点下标为 i，那么父亲节点的下标为 (i-1)/2</span></span><br><span class="line"><span class="comment">// 一个节点下标为 i，那么左儿子的下标为 2i+1，右儿子下标为 2i+2</span></span><br><span class="line">Array []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个堆</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHeap</span><span class="params">(array []<span class="type">int</span>)</span></span> *Heap &#123;</span><br><span class="line">h := <span class="built_in">new</span>(Heap)</span><br><span class="line">h.Array = array</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大堆插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 堆没有元素时，使元素成为顶点后退出</span></span><br><span class="line"><span class="keyword">if</span> h.Size == <span class="number">0</span> &#123;</span><br><span class="line">h.Array[<span class="number">0</span>] = x</span><br><span class="line">h.Size++</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i 是要插入节点的下标</span></span><br><span class="line">i := h.Size</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果下标存在</span></span><br><span class="line"><span class="comment">// 将小的值 x 一直上浮</span></span><br><span class="line"><span class="keyword">for</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// parent为该元素父亲节点的下标</span></span><br><span class="line">parent := (i - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果插入的值小于等于父亲节点，那么可以直接退出循环，因为父亲仍然是最大的</span></span><br><span class="line"><span class="keyword">if</span> x &lt;= h.Array[parent] &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则将父亲节点与该节点互换，然后向上翻转，将最大的元素一直往上推</span></span><br><span class="line">h.Array[i] = h.Array[parent]</span><br><span class="line">i = parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将该值 x 放在不会再翻转的位置</span></span><br><span class="line">h.Array[i] = x</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆数量加一</span></span><br><span class="line">h.Size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大堆移除根节点元素，也就是最大的元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 没有元素，返回-1</span></span><br><span class="line"><span class="keyword">if</span> h.Size == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出根节点</span></span><br><span class="line">ret := h.Array[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为根节点要被删除了，将最后一个节点放到根节点的位置上</span></span><br><span class="line">h.Size--</span><br><span class="line">x := h.Array[h.Size]  <span class="comment">// 将最后一个元素的值先拿出来</span></span><br><span class="line">h.Array[h.Size] = ret <span class="comment">// 将移除的元素放在最后一个元素的位置上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对根节点进行向下翻转，小的值 x 一直下沉，维持最大堆的特征</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// a，b为下标 i 左右两个子节点的下标</span></span><br><span class="line">a := <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左儿子下标超出了，表示没有左子树，那么右子树也没有，直接返回</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= h.Size &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有右子树，拿到两个子节点中较大节点的下标</span></span><br><span class="line"><span class="keyword">if</span> b &lt; h.Size &amp;&amp; h.Array[b] &gt; h.Array[a] &#123;</span><br><span class="line">a = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父亲节点的值都大于或等于两个儿子较大的那个，不需要向下继续翻转了，返回</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= h.Array[a] &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将较大的儿子与父亲交换，维持这个最大堆的特征</span></span><br><span class="line">h.Array[i] = h.Array[a]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续往下操作</span></span><br><span class="line">i = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将最后一个元素的值 x 放在不会再翻转的位置</span></span><br><span class="line">h.Array[i] = x</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码太帅了 没有使用递归 用循环 构造了最大堆！ 学习思想</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统 只能由一个 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leet-code之旅</title>
      <link href="/2024/11/09/leetcode/leet-code/"/>
      <url>/2024/11/09/leetcode/leet-code/</url>
      
        <content type="html"><![CDATA[<h1 id="正式开启刷leet-code"><a href="#正式开启刷leet-code" class="headerlink" title="正式开启刷leet-code"></a>正式开启刷leet-code</h1><h3 id="第225-用两个队列实现栈"><a href="#第225-用两个队列实现栈" class="headerlink" title="第225.用两个队列实现栈"></a>第225.用两个队列实现栈</h3><p>问题：</p><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><p>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</p><h4 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">type MyStack struct &#123;</span><br><span class="line">    list1 := list.New()</span><br><span class="line">    list2 := list.New()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Pop()</span><br><span class="line">    MyStack.Top()</span><br><span class="line">    MyStack.empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">    this.list1.PushBack(x)</span><br><span class="line">    temp := x</span><br><span class="line">    this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">   temp = this.list2.Value</span><br><span class="line">   e = e.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">    temp = this.list2.Value</span><br><span class="line">    return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">    if this.list2.Value == nil</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyStack object will be instantiated and called as such:</span><br><span class="line"> * obj := Constructor();</span><br><span class="line"> * obj.Push(x);</span><br><span class="line"> * param_2 := obj.Pop();</span><br><span class="line"> * param_3 := obj.Top();</span><br><span class="line"> * param_4 := obj.Empty();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="虚伪的正确的代码："><a href="#虚伪的正确的代码：" class="headerlink" title="虚伪的正确的代码："></a>虚伪的正确的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;container/list&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">list1 *list.List</span><br><span class="line">list2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack &#123;</span><br><span class="line">list1: list.New(),</span><br><span class="line">list2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">this.list1.PushBack(x)</span><br><span class="line">temp := x</span><br><span class="line">this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果stack为空返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front()</span><br><span class="line">this.list2.Remove(temp)</span><br><span class="line">return temp.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果栈为空则返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front().Value(int)</span><br><span class="line">return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.list2.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Your MyStack object will be instantiated and called as such:</span><br><span class="line">* obj := Constructor();</span><br><span class="line">* obj.Push(x);</span><br><span class="line">* param_2 := obj.Pop();</span><br><span class="line">* param_3 := obj.Top();</span><br><span class="line">* param_4 := obj.Empty();</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>使用go语言内置的list包 也就是双向链表的操作<br>运用到了go语言的断言 <code>this.list2.Front().Value.(int)</code></p><p>但是 虽然通过了 但是思路应该是错了哈哈哈哈 ！ 这段代码并没有用到队列的性质而是双链表。。。。并没有遵守题目的规则<br>代码问题：</p><p>而只是使用了两个链表，其中 list2 实际上扮演了“栈”的角色。这样的话，list2 单独一个链表就能实现后进先出，不需要 list1 的辅助。</p><h4 id="真正的正确代码"><a href="#真正的正确代码" class="headerlink" title="真正的正确代码"></a>真正的正确代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;container/list&quot;</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">queue1 *list.List</span><br><span class="line">queue2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack&#123;</span><br><span class="line">queue1: list.New(),</span><br><span class="line">queue2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int) &#123;</span><br><span class="line">this.queue1.PushBack(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(top)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue2.PushBack(top.Value)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.queue1.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="第20题有效括号"><a href="#第20题有效括号" class="headerlink" title="第20题有效括号"></a>第20题有效括号</h3><p>问题：</p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><h4 id="解答过程"><a href="#解答过程" class="headerlink" title="解答过程"></a>解答过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">    // 创建一个栈来存储左括号</span><br><span class="line">    stack := make([]rune, 0)</span><br><span class="line">    // 括号的对应关系</span><br><span class="line">    pairs := map[rune]rune&#123;</span><br><span class="line">        &#x27;)&#x27;: &#x27;(&#x27;,</span><br><span class="line">        &#x27;&#125;&#x27;: &#x27;&#123;&#x27;,</span><br><span class="line">        &#x27;]&#x27;: &#x27;[&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    // 遍历字符串s</span><br><span class="line">    for _, char := range s &#123;</span><br><span class="line">        // 如果是右括号</span><br><span class="line">        if _, exists := pairs[char]; exists &#123;</span><br><span class="line">            // 取出栈顶元素，如果栈为空或者不匹配则返回false</span><br><span class="line">            if len(stack) == 0 || stack[len(stack)-1] != pairs[char] &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            // 否则弹出栈顶元素</span><br><span class="line">            stack = stack[:len(stack)-1]</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果是左括号，压入栈中</span><br><span class="line">            stack = append(stack, char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果栈为空，则所有括号正确匹配</span><br><span class="line">    return len(stack) == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>栈的问题</p><hr><h3 id="字节刷题（队列）相关："><a href="#字节刷题（队列）相关：" class="headerlink" title="字节刷题（队列）相关："></a>字节刷题（队列）相关：</h3><p>问题：</p><p>小R的随机播放顺序<br>问题描述<br>小有一个特殊的随机播放规则。他首先播放歌单中的第一首歌，播放后将其从歌<br>单中移除。如果歌单中还有歌曲，则会将当前第一首歌移到最后一首。这个过程会<br>一直重复，直到歌单中没有任何歌曲。<br>例如，给定歌单[5,3,2,1,4]，真实的播放顺序是[5,2,4,1,3]。<br>保证歌曲中的id两两不同。<br>测试样例<br>样例1：<br>输入：n&#x3D;5,a&#x3D;[5,3,2,1,4]输出：[5,2,4,1,3]<br>样2：<br>输入：n&#x3D;4,a&#x3D;[4,1,3,2]输出：[4,3,1,2]<br>样3：<br>输入：n&#x3D;6,a&#x3D;[1,2,3,4,5,6]输出：[1,3,5,2,6,4]</p><p>看完题之后的思路 ： 就是队列问题 如何操作栈 在文中也就是实现： 先出栈-》再执行出栈入栈-》再出栈 这是目前简单的思路<br>然后搜索Go语言队列的相关操作 用slice实现队列：或者 list实现队列</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func solution(n int, a []int) []int &#123;</span><br><span class="line">    result := []int&#123;&#125;  // 用于存储播放顺序</span><br><span class="line"></span><br><span class="line">    for len(a) &gt; 0 &#123;</span><br><span class="line">        // 播放第一首歌并加入到结果中</span><br><span class="line">        result = append(result, a[0])</span><br><span class="line">        // 移除播放的歌曲</span><br><span class="line">        a = a[1:]</span><br><span class="line">        </span><br><span class="line">        // 如果歌单还有剩余，将当前第一首歌移到最后</span><br><span class="line">        if len(a) &gt; 0 &#123;</span><br><span class="line">            a = append(a[1:], a[0])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(5, []int&#123;5, 3, 2, 1, 4&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;5, 2, 4, 1, 3&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(4, []int&#123;4, 1, 3, 2&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;4, 3, 1, 2&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(6, []int&#123;1, 2, 3, 4, 5, 6&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;1, 3, 5, 2, 6, 4&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到题解我蒙了：我在思考的时候确实想如何实现这个队列并且如何实现添加元素并且删除元素  </p><p>但是 在这道题中，Go 切片的特性其实已经很好地帮你实现了这些操作。切片的 append 和切片操作符 a[1:] 直接完成了队列的“入队”和“出队”需求。只是在简化的问题上，利用 Go 自带的切片操作让解决方案更简洁、易懂。</p><hr><h4 id="12-2-日"><a href="#12-2-日" class="headerlink" title="12.2 日"></a>12.2 日</h4><h5 id="重刷两数之和"><a href="#重刷两数之和" class="headerlink" title="重刷两数之和"></a>重刷两数之和</h5><h6 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    k := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        other := target - v</span><br><span class="line">        <span class="keyword">if</span> _ , ok := <span class="keyword">map</span>[other]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;i, <span class="keyword">map</span>[nums[i]]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[nums[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="更正后："><a href="#更正后：" class="headerlink" title="更正后："></a>更正后：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    k := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        other := target - v</span><br><span class="line">        <span class="keyword">if</span> idx , ok := k[other]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;i, idx&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k[v] = i </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h5><h6 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    k := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j:=i; j&lt;<span class="built_in">len</span>(nums); j++&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[j] &#123;</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; </span><br><span class="line">                k[i] = nums[i]</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目要求：<br>题目需要在原地删除重复项，使用 O(1) 额外空间，返回去重后数组的长度。去重后的元素必须保留在数组的前部，后续位置可以随意。<br>代码中存在的问题：</p><p>额外空间不符合要求：你使用了 k 数组存储去重后的结果，违背了 O(1) 额外空间的限制。<br>逻辑问题：双重循环实际上是在尝试复制和比较元素，但逻辑上没有保证正确的去重。<br>continue 和 break 的混乱：循环控制没有明确目的，导致部分逻辑跳过了关键步骤。<br>返回值错误：你返回的是辅助数组 k 的长度，而不是修改后数组 nums 的有效长度。</p><h6 id="正确解法："><a href="#正确解法：" class="headerlink" title="正确解法："></a>正确解法：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">1</span>; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[k] != nums [i] &#123;</span><br><span class="line">            k++</span><br><span class="line">            nums[k] = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27 移除元素"></a>27 移除元素</h5><h6 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := length; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> val == nums[length] &#123;</span><br><span class="line">            <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">        k = nums[length]</span><br><span class="line">        length ++</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不出意外又是错误的代码<br>k 被赋值：<br>k &#x3D; nums[length]<br>然而，k 在后续的代码中并没有被用于任何地方，它没有被打印、返回、存储或进一步处理。只是简单地在 if 语句内被赋值。</p><p>k 的作用无效： k 是在 if 语句中声明并赋值的，但它没有发挥任何作用。Go 编译器会在编译时检查到这一点，并给出警告，因为声明了一个变量却没有用到。</p><h6 id="正确代码："><a href="#正确代码：" class="headerlink" title="正确代码："></a>正确代码：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] != val &#123;</span><br><span class="line">            nums[length] = nums[i]</span><br><span class="line">            length++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路是 把不相等的元素按照顺序放到开头 而我是想覆盖相同的元素 处理不了这个撮箕</p><p>28 找出字符串中的第一个匹配项下标</p><p>题目： </p><p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。<br>示例 2：</p><p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;   </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(haystack); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j&lt;<span class="built_in">len</span>(needle); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> needle[j] == haystack[i]&#123;</span><br><span class="line">                num++</span><br><span class="line">                i++</span><br><span class="line">                 <span class="keyword">if</span> num == <span class="built_in">len</span>(needle)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-<span class="built_in">len</span>(needle)</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">       &#125;   </span><br><span class="line"> &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只通过了一个用例， 你要反思了 只通过一个用例，说明了你的想法是错的</p><p>暴力解法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123; <span class="comment">// 空字符串直接返回 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="built_in">len</span>(haystack)-<span class="built_in">len</span>(needle); i++ &#123;</span><br><span class="line">        j := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j &lt; <span class="built_in">len</span>(needle) &amp;&amp; haystack[i+j] == needle[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="built_in">len</span>(needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> i <span class="comment">// 完全匹配，返回起始索引</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// 未找到匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多多练习， haystack[i+j] &#x3D;&#x3D; needle[j] 这里是很巧妙的地方，同时比对了两个字符串， i的位置就是起始位置， 如果整个字符串都在内部匹配完成了，说明i就是起始位置<br>记录需要对比的字符串长度</p><hr><h5 id="58题：-最后一个单词的长度"><a href="#58题：-最后一个单词的长度" class="headerlink" title="58题： 最后一个单词的长度"></a>58题： 最后一个单词的长度</h5><p>示例 1：</p><p>输入：s &#x3D; “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为 5。<br>示例 2：</p><p>输入：s &#x3D; “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为 4。<br>示例 3：</p><p>输入：s &#x3D; “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为 6 的“joyboy”。</p><p>我的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s)<span class="number">-1</span>; i&gt;<span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> s[i] != <span class="string">&#x27; &#x27;</span>&#123;</span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是错了 但是错的不太离谱，简单的呗GPT加了一点就过了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123; <span class="comment">// 修正条件为 i &gt;= 0</span></span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> &#123; <span class="comment">// 避免索引越界</span></span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="comment">// 如果没有找到任何单词，返回 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>但是在其中话是有一个有意思的事情</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s)<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> s[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp;  i &gt;= <span class="number">0</span>&#123;</span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码我是这么写的 跟上面的没什么区别，但是没有通过 我又询问到底是为什么</p><p>关键在于顺序 以防止越界  for s[i] !&#x3D; ‘ ‘ &amp;&amp;  i &gt;&#x3D; 0</p><p>内层循环条件：</p><p>for s[i] !&#x3D; ‘ ‘ &amp;&amp; i &gt;&#x3D; 0 {<br>当 i 等于 0 时，s[i] 可能会访问索引 0 的内容，然后才进行 i &gt;&#x3D; 0 的检查。由于条件的顺序，s[i] 的访问可能在 i &lt; 0 时执行，导致索引越界。也就是说：</p><p>问题在于：</p><p>在执行 s[i] !&#x3D; ‘ ‘ 这个条件时，i 可能会变成负数（比如 i &#x3D;&#x3D; 0 时，接下来你做 i–，i 会变成 -1）。<br>但是，i &gt;&#x3D; 0 的条件是后面的检查，也就是说，在 i– 之后，s[i] !&#x3D; ‘ ‘ 已经执行了，导致 i &#x3D;&#x3D; -1 时，程序尝试访问 s[-1]，而 Go 语言数组下标不能为负数，这样会导致 索引越界 错误。</p><hr><hr><h4 id="21-合并两个有序链表："><a href="#21-合并两个有序链表：" class="headerlink" title="21 合并两个有序链表："></a>21 合并两个有序链表：</h4><p>l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]<br>示例 2：</p><p>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p><p>我写的又臭又长的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    list3 := &amp;ListNode&#123;</span><br><span class="line">    Val: <span class="number">0</span>,</span><br><span class="line">    Next: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">if</span> list1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> list2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> list1.Val &lt;= list2.Val &#123;</span><br><span class="line">        <span class="keyword">if</span> list1.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> list2.Next != <span class="literal">nil</span>&#123;</span><br><span class="line">                   list3.Val = list2.Val </span><br><span class="line">                   list2 = list2.Next </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        list3.Val = list1.Val</span><br><span class="line">        list3 = list3.Next</span><br><span class="line">        list1 = list1.Next</span><br><span class="line">        &#125;  <span class="keyword">if</span> list1.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> list1.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">                list3.Val = list1.Val</span><br><span class="line">                list1 = list1.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        list3.Val = list2.Val</span><br><span class="line">        list3 = list3.Next</span><br><span class="line">        list2 = list2.Next</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> list1.Val &gt;= list2.Val &#123;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> list3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑惑： </p><p>你说得对，list3 :&#x3D; &amp;ListNode{} 确实只初始化了一个节点，但这个节点的作用是 哨兵节点 (dummy node)，用来简化链表操作和边界条件处理。</p><p>哨兵节点的主要特点是：</p><p>它本身并不存储有效数据（值通常是默认值，比如 0）。<br>它的作用是作为链表的起点，使链表构造和返回操作更加简单和一致。<br>以下是对你的疑问的详细解释：</p><ol><li>为什么哨兵节点只初始化一个节点却能构造完整链表？<br>哨兵节点的作用只是提供链表的起点，后续节点是通过动态创建并连接到它的 Next 指针上构造的。例如：</li></ol><p>list3 :&#x3D; &amp;ListNode{}  &#x2F;&#x2F; 初始化哨兵节点<br>current :&#x3D; list3      &#x2F;&#x2F; current 指向哨兵节点</p><p>current.Next &#x3D; &amp;ListNode{Val: 1} &#x2F;&#x2F; 创建第一个有效节点<br>current &#x3D; current.Next           &#x2F;&#x2F; 移动指针到新节点</p><p>current.Next &#x3D; &amp;ListNode{Val: 2} &#x2F;&#x2F; 创建第二个有效节点<br>current &#x3D; current.Next           &#x2F;&#x2F; 移动指针到新节点<br>这段代码最终形成的链表结构是：</p><p>scss<br>复制代码<br>哨兵节点 (值: 0) -&gt; 节点1 (值: 1) -&gt; 节点2 (值: 2)<br>返回值时，通过 list3.Next 跳过哨兵节点，直接指向第一个有效节点。</p><p>正确思维：</p><p>期望行为：应该创建一个新节点并将其连接到 current.Next。  我没有理解怎么初始化一个链表，并为后续创建新的结点添加值</p><p>emm 正解</p><h4 id="正确代码：-1"><a href="#正确代码：-1" class="headerlink" title="正确代码："></a>正确代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := ListNode&#123;&#125; <span class="comment">// 用哨兵节点简化代码逻辑</span></span><br><span class="line">    cur := &amp;dummy <span class="comment">// cur 指向新链表的末尾</span></span><br><span class="line">    <span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> list1.Val &lt; list2.Val &#123;</span><br><span class="line">            cur.Next = list1 <span class="comment">// 把 list1 加到新链表中</span></span><br><span class="line">            list1 = list1.Next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 注：相等的情况加哪个节点都是可以的</span></span><br><span class="line">            cur.Next = list2 <span class="comment">// 把 list2 加到新链表中</span></span><br><span class="line">            list2 = list2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拼接剩余链表</span></span><br><span class="line">    <span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">        cur.Next = list1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur.Next = list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中直接使用 list1 或 list2 而不是 list1.Val 是因为它要把整个节点连接到新链表中，而不仅仅是节点的值。</p><p>区别<br>list1.Val 仅获取当前节点的值。</p><p>如果只使用 Val，你只能获得一个值，无法直接将这个值插入链表中，还需要手动创建一个新节点。<br>list1 是指针，代表当前节点。</p><p>直接使用 list1 表示把当前节点（包括其 Val 和 Next 指针）插入到新链表中，效率更高且代码更简单。</p><hr><hr><p>今天又重新做了一下20题 有效括号</p><p>刚开始我在想，电脑应该怎么区分左括号和右括号这两个是怎么合并的？ 绞尽脑汁。 最终思想就是遍历字符串， 将左括号放入栈中 将栈顶元素和当前元素作比较 如果相同弹出括号，成功的标志是栈中元素为空</p><hr><p>232 用两个栈实现队列</p><p>[“MyQueue”, “push”, “push”, “peek”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br>输出：<br>[null, null, null, 1, 1, false]</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    Rear *MyQueue</span><br><span class="line">    Head *MyQueue</span><br><span class="line">    size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyQueue &#123;</span><br><span class="line">    Stack1 := []<span class="type">int</span></span><br><span class="line">    Stack2 := []<span class="type">int</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Push(x <span class="type">int</span>)  &#123;</span><br><span class="line">    Stack1 := []<span class="type">int</span></span><br><span class="line">    Stack2 := []<span class="type">int</span></span><br><span class="line">    Stack1 = <span class="built_in">append</span>(Stack1,x)</span><br><span class="line">    legth := <span class="built_in">len</span>(Stack1)</span><br><span class="line">    v := Stack1[l<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    Stack1 = Stack1(:<span class="built_in">len</span>(Stack1)<span class="number">-1</span>)</span><br><span class="line">    Stack2 = <span class="built_in">append</span>(Stack2,)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Peek();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>看到代码有点不知所措了，在每个地方应该放入什么 两个栈实现队列：思路我是有的 把数字放入其中一个栈中，然后在弹出来，放入第二个栈中，然后在第二个栈中弹出来就是队列</p><p>思路是对的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    Stack1 []<span class="type">int</span></span><br><span class="line">    Stack2 []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyQueue &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Push(x <span class="type">int</span>)  &#123;</span><br><span class="line">    this.Stack1 = <span class="built_in">append</span> (this.Stack1,x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) != <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(this.Stack1) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    length1 := <span class="built_in">len</span>(this.Stack1)<span class="number">-1</span></span><br><span class="line">    val := this.Stack1[length1]</span><br><span class="line">    this.Stack1 = this.Stack1[:length1]</span><br><span class="line">    this.Stack2 = <span class="built_in">append</span>(this.Stack2,val)</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    length2 := <span class="built_in">len</span>(this.Stack2)<span class="number">-1</span></span><br><span class="line">    result := this.Stack2[length2]</span><br><span class="line">    this.Stack2 = this.Stack2[:length2]</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) != <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(this.Stack1) &gt;<span class="number">0</span> &#123;</span><br><span class="line">            </span><br><span class="line">    length1 := <span class="built_in">len</span>(this.Stack1)<span class="number">-1</span></span><br><span class="line">    val := this.Stack1[length1]</span><br><span class="line">    this.Stack1 = this.Stack1[:length1]</span><br><span class="line">    this.Stack2 = <span class="built_in">append</span>(this.Stack2,val)</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    length2 := <span class="built_in">len</span>(this.Stack2) <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this.Stack2[length2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Peek();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新写了一遍 用例没有完全通过 </p><p>[null,null,null,null,null,1,null,5,2,3,4]</p><p>预期结果<br>[null,null,null,null,null,1,null,2,3,4,5]</p><p>有两个地方出错导致没有通过  if len(this.Stack1) !&#x3D; 0  条件判断句 改成 &#x3D;&#x3D;0 就通过了 思考为什么</p><hr><p>383.赎金信<br>参考两数之和的哈希表用法</p><p>我写出了以下代码 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span> ; i&lt;<span class="built_in">len</span>(ransomNote); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[ransomNote[i]]; ok&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        m[ransomNote[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k:=<span class="number">1</span>; k&lt;<span class="built_in">len</span>(magazine); k++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[magazine[k]]; ok &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> k == <span class="built_in">len</span>(magazine) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是没有通过，应该是情况考虑错了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(magazine); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[magazine[i]]; ok&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        m[magazine[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k:=<span class="number">0</span>; k&lt;<span class="built_in">len</span>(ransomNote); k++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[ransomNote[k]]; ok &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终修改成这样 题目中话有一个条件 字母无法重复使用！！！这点给忘记给忘记了<br>问了这一点！ 关键就是对于字符的统计！</p><p>正确代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 用一个 map 记录 magazine 中每个字符出现的次数</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(magazine); i++ &#123;</span><br><span class="line">        m[magazine[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 ransomNote 中的每个字符是否在 magazine 中有足够的次数</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ransomNote); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> m[ransomNote[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            m[ransomNote[i]]-- <span class="comment">// 使用一个字符</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 如果次数不足，无法构造</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 所有字符都能满足</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的疑惑：我理解前两个a会增到2 但是第三个字符是b的时候为什么会从0开始计算起而不是2</p><p>这是因为在 Go 的 map 中，每个键（key）是独立的，互相之间没有关联。</p><p>在你的例子中，当处理第三个字符 b 时：</p><p>之前已经对 a 进行了计数，所以 m[‘a’] &#x3D; 2。<br>但是 b 是一个新的键，之前并没有在 map 中出现过。<br>当访问 m[‘b’] 时，由于 map 默认返回未初始化键的值为类型的 零值（对于 int 类型来说，零值是 0），所以 m[‘b’] &#x3D; 0。<br>然后执行 m[‘b’]++，将其从 0 增加到 1。</p><hr><p>141.环形链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[*ListNode]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        m[head]++</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[head]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又没有一次性通过 条件感太差了！</p><p>啊居然自己改对了！！！</p><p>调整了一下顺序，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[*ListNode]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        m[head]++</span><br><span class="line">        head = head.Next</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[head]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在其中出现的错误： map中的地址应该是结构体指针 而不是 *int </p><hr><p>如何在go中使用中序遍历</p><p>94题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125; <span class="comment">// 用于存储中序遍历的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义递归函数</span></span><br><span class="line">    <span class="keyword">var</span> inorder <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span></span><br><span class="line">    inorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123; <span class="comment">// 递归终止条件：当前节点为空</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.Left)           <span class="comment">// 遍历左子树</span></span><br><span class="line">        result = <span class="built_in">append</span>(result, node.Val) <span class="comment">// 访问当前节点</span></span><br><span class="line">        inorder(node.Right)          <span class="comment">// 遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorder(root) <span class="comment">// 从根节点开始中序遍历</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>inorder &#x3D; func(node *TreeNode) {<br>if node &#x3D;&#x3D; nil { &#x2F;&#x2F; 递归终止条件：当前节点为空<br>return<br>} 这块使用我不太清楚 我还以为是对原函数递归</p><hr><p>933.最近的请求次数</p><p>写一个 RecentCounter 类来计算特定时间范围内最近的请求。</p><p>请你实现 RecentCounter 类：</p><p>RecentCounter() 初始化计数器，请求数为 0 。<br>int ping(int t) 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t] 内发生的请求数。<br>保证 每次对 ping 的调用都使用比之前更大的 t 值。</p><p>输入：<br>[“RecentCounter”, “ping”, “ping”, “ping”, “ping”]<br>[[], [1], [100], [3001], [3002]]<br>输出：<br>[null, 1, 2, 3, 3]</p><p>解释：<br>RecentCounter recentCounter &#x3D; new RecentCounter();<br>recentCounter.ping(1);     &#x2F;&#x2F; requests &#x3D; [1]，范围是 [-2999,1]，返回 1<br>recentCounter.ping(100);   &#x2F;&#x2F; requests &#x3D; [1, 100]，范围是 [-2900,100]，返回 2<br>recentCounter.ping(3001);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001]，范围是 [1,3001]，返回 3<br>recentCounter.ping(3002);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</p><p>读题读了一会才读懂，最后反应过来应该就是返回 在范围内的ping次数 需要用一个切片（其实应该是队列思想 入队 出队不符合条件的 返回符合条件的数量）<br>（这在go语言中就可以用切片来简化操作 返回 符合条件的ping次数 也就是 队列中剩下的长度 len（））</p><p>正确解答</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RecentCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> RecentCounter &#123;</span><br><span class="line">    <span class="keyword">return</span> RecentCounter &#123;</span><br><span class="line">        count: []<span class="type">int</span>&#123;&#125;, </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RecentCounter)</span></span> Ping(t <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    this.count = <span class="built_in">append</span>(this.count,t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点怎么移除不符合条件的 一个个对比</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.count)&gt;<span class="number">0</span> &amp;&amp; this.count[<span class="number">0</span>]&lt;t<span class="number">-3000</span> &#123;</span><br><span class="line">        this.count = this.count[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * param_1 := obj.Ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>1.学会初始化结构体<br>2.学会使用切片思想实现 队列 栈等 加强对切片的操作</p><hr><p>12.17日 开始执行树和递归</p><p>104 二叉树的最大深度<br>110 平衡二叉树</p><p>104代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> l, r = maxDepth(root.Left), maxDepth(root.Right)</span><br><span class="line"><span class="keyword">if</span> l &gt; r &#123;</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码我是抄的 我对递归的思想还是不太理解</p><p>递归的 隐式深度记录 是通过调用栈实现的：</p><p>每次递归调用时，程序会进入一个新的函数调用，并等待其返回值。<br>当递归调用到底（即遇到叶子节点或 nil 节点）时，递归开始返回。<br>每一层递归通过返回值，将子树的深度信息逐层传递回上一层。<br>可以理解为：</p><p>每个函数调用相当于“记住”当前节点的状态，等待左右子树的深度计算完成后，才计算当前节点的深度并返回。</p><p>递归的返回值 自然累加 深度的方式，不需要额外的变量来显式记录深度。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字节关于框架学习</title>
      <link href="/2024/11/08/go/Dance_Frame/"/>
      <url>/2024/11/08/go/Dance_Frame/</url>
      
        <content type="html"><![CDATA[<h1 id="字节内部课程学习"><a href="#字节内部课程学习" class="headerlink" title="字节内部课程学习"></a>字节内部课程学习</h1><h3 id="一-走进RPC框架"><a href="#一-走进RPC框架" class="headerlink" title="一.走进RPC框架"></a>一.走进RPC框架</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>本地函数调用 压栈弹出</p><p>RPC调用  网上购物 {（付款操作）</p><p>远程调用 中间隔着网路  不能用函数指针了 是两个进程 机器id找到函数运行</p><p>解决问题 1. 函数映射</p><ol start="2"><li>数据转换成字节流 （客户端转换成字节流 传送给 服务端）</li><li>网络传输（高效稳定传输数据）</li></ol><p>}</p><p><img src="/study_photo/1.png" alt="示例图片"></p><p><strong>过程</strong>：User本地调用 打包参数 -》 RPC -》 对端-》解压-》调用真正业务逻辑 然后在返回 整个流程</p><p>IDL文件（接口描述文件）</p><p><img src="/study_photo/2.png" alt="image-20241107104049573"></p><p>Caller（调用段）和 生成代码 -》 encoder编码 -》字节流 -》打包传送给对端</p><p><strong>好处</strong></p><p><img src="/study_photo/3.png" alt="image-20241107104333574"></p><p><img src="/study_photo/4.png" alt="image-20241107111602308"></p><p><img src="/study_photo/5.png" alt="image-20241107111758336"></p><h4 id="2-编解码层："><a href="#2-编解码层：" class="headerlink" title="2.编解码层："></a>2.编解码层：</h4><p><img src="/study_photo/6.png" alt="image-20241107111909320"></p><p>编解码层：</p><p><img src="/study_photo/7.png" alt="image-20241107111950413"></p><p>二进制编码</p><p><img src="/study_photo/8.png" alt="image-20241107112146078"></p><p>左侧是IDL中写的统一的 -》字节流 有额外的内存开销</p><p><img src="/study_photo/10.png" alt="image-20241107112827203"></p><p><img src="/study_photo/11.png" alt="image-20241107112953295"></p><p><strong>多路复用</strong>：同一个链接内 可以有多个请求流通过</p><p>协议解析：</p><p><img src="/study_photo/12.png" alt="image-20241107113245207"></p><h4 id="4-网络通信层："><a href="#4-网络通信层：" class="headerlink" title="4.网络通信层："></a>4.网络通信层：</h4><p><img src="/study_photo/13.png" alt="image-20241107113347859"></p><p>SCOEKT API   （ip+端口）</p><p>一端关闭套接字    如果另一端如果尝试去读 可能就会返回（End Of File）也就是 EOF 在项目中我好像遇到过这个问题 用postman测试的时候返回了EOF错误和nil</p><p>网络库</p><p><img src="/study_photo/14.png" alt="image-20241107113810046"></p><h3 id="二-RPC关键指标分析与企业实践"><a href="#二-RPC关键指标分析与企业实践" class="headerlink" title="二.RPC关键指标分析与企业实践"></a>二.RPC关键指标分析与企业实践</h3><p>稳定性 易用性 扩展性 观测性 高性能</p><p>稳定性：</p><p><img src="/study_photo/15.png" alt="image-20241107114134948"></p><p><strong>过程：</strong>a调用b b调用c c如果响应慢 b就会一直等待 a也就超时了 a就会频繁调用b b堆积大量请求就会宕机</p><p>熔断起保护作用</p><p>稳定性：请求成功了率</p><p><img src="/study_photo/16.png" alt="image-20241107114404973"></p><p>1.均匀调用服务的每个节点</p><ol start="2"><li>重试几次</li></ol><p><img src="/study_photo/17.png" alt="image-20241107114611581"></p><p>备份请求： 左侧正常 1失败  2是重试请求  总时间 t1＋t2</p><p>​                    右侧 t3 tct99（这个值 在这个时间内应该可以返回值）如果在时间内没返回 就发送2请求 总时间就是 t4</p><h4 id="1-注册中间件"><a href="#1-注册中间件" class="headerlink" title="1.注册中间件"></a>1.注册中间件</h4><p><img src="/study_photo/18.png" alt="image-20241107114931005"></p><h4 id="2-易用性："><a href="#2-易用性：" class="headerlink" title="2.易用性："></a>2.易用性：</h4><p><img src="/study_photo/19.png" alt="image-20241107115019715"></p><p>自动生成代码工具 ： 减少重复性工作</p><h4 id="3-扩展性"><a href="#3-扩展性" class="headerlink" title="3.扩展性"></a>3.扩展性</h4><p><img src="/study_photo/20.png" alt="image-20241107115236618"></p><p>用户请求 经过中间件处理-》和远端交互 -》 也通过中间件处理-》服务器</p><h4 id="4-观测性："><a href="#4-观测性：" class="headerlink" title="4.观测性："></a>4.观测性：</h4><p><img src="/study_photo/21.png" alt="image-20241107115409542"></p><p>日志观察 监控面板qbs 链路跟踪（服务通过请求为什么超时了 耗费的时间是多少）</p><p>linux的top工具类似原理</p><h4 id="5-高性能："><a href="#5-高性能：" class="headerlink" title="5.高性能："></a>5.高性能：</h4><p><img src="/study_photo/22.png" alt="image-20241107115628087"></p><p>高吞吐：在单位时间内尽可能多的处理更多请求</p><p>低延迟： 一次请求发出去延迟尽可能地低（重要）</p><p>​</p><h4 id="6-本章总结："><a href="#6-本章总结：" class="headerlink" title="6.  本章总结："></a>6.  本章总结：</h4><p><img src="/study_photo/23.png" alt="image-20241107115938337"></p><p>字节实践：</p><p><img src="/study_photo/24.png" alt="image-20241107120230033"></p><p>组件 结构 远端交互层 网络库  代码生成工具 （最左侧）</p><p>为什么自研网络库？</p><p>gonet</p><p><img src="/study_photo/25.png" alt="image-20241107120515080"></p><p>Netpoll</p><p><img src="/study_photo/26.png" alt="image-20241107120603540"></p><p><img src="/study_photo/27.png" alt="image-20241107120656906"></p><p>交互方式pingpang（一发一回） 编解码 应用层协议</p><p>优化：</p><p><img src="/study_photo/28.png" alt="image-20241107120826363"></p><p><img src="/study_photo/29.png" alt="image-20241107120948515"></p><p>你应该想这些是怎么实现的？</p><p><img src="/study_photo/30.png" alt="image-20241107121448901"></p><p><img src="/study_photo/31.png" alt="image-20241107121741751"></p><h3 id="三-走进HTTP协议"><a href="#三-走进HTTP协议" class="headerlink" title="三.走进HTTP协议"></a>三.走进HTTP协议</h3><h4 id="1-再谈http协议"><a href="#1-再谈http协议" class="headerlink" title="1.再谈http协议"></a>1.再谈http协议</h4><p>HTTP 超文本传输协议</p><p><img src="/study_photo/32.png" alt="image-20241108133154991"></p><p>http协议将人话以计算机语言传输过去</p><p><img src="/study_photo/33.png" alt="image-20241108133257828"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求行</span><br><span class="line">：分隔 原数据</span><br><span class="line"></span><br><span class="line">包的字节数</span><br><span class="line">大空行</span><br><span class="line"></span><br><span class="line">我们想说的话</span><br><span class="line"></span><br><span class="line">下面是回复</span><br></pre></td></tr></table></figure><p><img src="/study_photo/34.png" alt="image-20241108133725032"></p><p><img src="/study_photo/35.png" alt="image-20241108133847415"></p><p>上述功能代码：</p><p><img src="/study_photo/36.png" alt="image-20241108134149368"></p><p>处理流程:</p><p><img src="/study_photo/37.png" alt="image-20241108134229285"></p><p>H1的不足 H2也没完全解决    UDP解决对头阻塞</p><p><img src="/study_photo/38.png" alt="image-20241108134628306"></p><h3 id="四-HTTP框架实现"><a href="#四-HTTP框架实现" class="headerlink" title="四.HTTP框架实现"></a>四.HTTP框架实现</h3><h4 id="1-分层设计的好处"><a href="#1-分层设计的好处" class="headerlink" title="1.分层设计的好处"></a>1.分层设计的好处</h4><p><img src="/study_photo/166.png" alt="image-20241109154338484"></p><p>高内聚 低耦合 易复用 高扩展性</p><p><img src="/study_photo/167.png" alt="image-20241109154510026"></p><p>应用层</p><p>中间件层 预处理</p><p>路由层</p><p>协议层</p><p>中间件设计：</p><p>洋葱模型</p><p><img src="/study_photo/168.png" alt="image-20241121185257019"></p><p><img src="/study_photo/169.png" alt="image-20241121185641849"></p><p>路由设计： map[string]handlers 静态路由有效 动态不太行</p><p>前缀匹配树构建路由：</p><p>啊啊啊啊：前两天刚看 7_days_golang 构建动态路由的方法</p><p>这里就讲解了 啊啊啊</p><p><img src="/study_photo/170.png" alt="image-20241121190300522"></p><p>参数路由：</p><p>协议层设计</p><p>网络层设计</p><p><img src="/study_photo/171.png" alt="image-20241121202157512"></p><h5 id="性能修炼之道"><a href="#性能修炼之道" class="headerlink" title="性能修炼之道"></a>性能修炼之道</h5><p>针对网络库的优化</p><p>netpoll  （中大包性能高 时延低）</p><p>go net（流式友好，小包性能高）</p><p>存下全部Header</p><p>拷贝身体</p><p>针对协议的优化</p><p>Headers 解析</p><p>找到Header Line边界 &#x2F;r&#x2F;n</p><p>SIMD</p><p>Sonic</p><h4 id="五-微服务架构："><a href="#五-微服务架构：" class="headerlink" title="五.微服务架构："></a>五.微服务架构：</h4><p>单体架构 -》 垂直应用架构 -》 分布式架构 -》 SOA架构 -》 微服务架构</p><p>单体架构：</p><p>优势： 性能最高 冗余小</p><p>劣势： 1.debug困难 2.模块相互影响 3.模块</p><p>垂直应用架构：</p><p>优点： 业务独立开发维护</p><p>缺点 ： 存在冗余</p><p>分布式架构：</p><p><img src="/study_photo/173.png" alt="image-20241122175120662"></p><p>SOA架构：</p><p><img src="/study_photo/174.png" alt="image-20241122175312029"></p><p>服务注册中心： 服务注册</p><p>劣势： 整个系统设计是中心化的</p><p>​需要从上至下设计</p><p>​重构困难</p><p>微服务架构：</p><p><img src="/study_photo/175.png" alt="image-20241122175442902"></p><p>开发效率高</p><p>但是运维难度大</p><p>安全性</p><p><img src="/study_photo/176.png" alt="image-20241122175636816"></p><p><img src="/study_photo/177.png" alt="image-20241122175816476"></p><p>服务： 相同逻辑 的 运行实体</p><p>实例 ： 每一个运行实体为一个实例</p><p><img src="/study_photo/178.png" alt="image-20241122180306396"></p><p>逻辑划分称一个（集群） 集群包含实例</p><p>有状态 无状态服务： 是否存储了可持续化数据</p><h5 id="服务间通信："><a href="#服务间通信：" class="headerlink" title="服务间通信："></a>服务间通信：</h5><p><img src="/study_photo/179.png" alt="image-20241122180825079"></p><p>HTTP RPC</p><p>目标服务地址：</p><p>hardcode</p><p>服务A调用服务B（指定一个目标服务地址会有什么问题？）</p><p>ip地址不会固定</p><p><img src="/study_photo/180.png" alt="image-20241122181602662"></p><p>只有一个实例可以接受请求 别的接收不到</p><p>ip也是会变化的</p><p>如果用DNS域名来访问</p><p>DNS缓存机制： 导致延时</p><p>负载均衡问题：无法指定请求某个ip回应</p><p>不支持探活检查</p><p>域名无法配置端口</p><p><img src="/study_photo/181.png" alt="image-20241122182118324"></p><p>负载均衡算法</p><p>若要  下线某个实例：</p><p><img src="/study_photo/182.png" alt="image-20241122182354705"></p><p>流量会不会走到第三个实例上面</p><p>服务1 和 服务2 压力变大 可以在开启一个实例</p><p><img src="/study_photo/183.png" alt="image-20241122182554893"></p><p>统一网关入口</p><h4 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h4><p>租用了一台公网ip</p><p>现状 找一个物理机 ifconfig将网卡配上这个ip 起server监听即可</p><p>应用多 起多个server监听不同的端口</p><p>基于ip＋端口  基于某种算法 将报文转发给后端服务器</p><p><img src="/study_photo/184.png" alt="image-20241123181002063"></p><h5 id="常见调度算法"><a href="#常见调度算法" class="headerlink" title="常见调度算法"></a>常见调度算法</h5><p>RR轮询：</p><p>加权RR轮询：</p><p>最小连接</p><p>五元组hash</p><p>一致性hash</p><p><img src="/study_photo/185.png" alt="image-20241123181248969"></p><p>FULLNAT</p><p>纯用户态协议栈</p><p>无缓存 零拷贝 大页内存 （减少 cache miss）</p><p><img src="/study_photo/186.png" alt="image-20241123181625438"></p><p>7层负载均衡</p><p><img src="/study_photo/187.png" alt="image-20241123181812859"></p><p>NGINX：</p><p>最灵活的高性能Web 7层反向代理</p><p><img src="/study_photo/188.png" alt="image-20241123182129083"></p><h5 id="网络接入实践与课程总结"><a href="#网络接入实践与课程总结" class="headerlink" title="网络接入实践与课程总结"></a>网络接入实践与课程总结</h5><p><img src="/study_photo/189.png" alt="image-20241123190541804"></p><p>：</p><p><img src="/study_photo/190.png" alt="image-20241123190953261"></p><p>七层负载均衡</p><p><img src="/study_photo/191.png" alt="image-20241123191212670"></p><p>配置https访问</p><p><img src="/study_photo/192.png" alt="image-20241123191142306"></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发布博客出现的问题</title>
      <link href="/2024/11/06/github/github_actions/"/>
      <url>/2024/11/06/github/github_actions/</url>
      
        <content type="html"><![CDATA[<p>每一次用push推送到githubpage都会出现构建部署错误 我问了一下ai原因 这才有点明白到底是为什么</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>为什么会有这种差异？<br>GitHub Pages 和 本地环境的差异：</p><p>在本地执行 hexo d 时，你的本地环境会根据 package.json 中的依赖来安装所有的主题和插件，确保所有必要的资源都存在。<br>但是 GitHub Pages 仅仅依赖仓库中已经推送的文件（通常是 public&#x2F; 文件夹和 ._config.yml），它不会自动运行 npm、yarn 或 pnpm 来安装依赖。换句话说，GitHub Pages 并不会在部署过程中安装缺少的主题或插件。<br>依赖没有正确推送：</p><p>你在本地运行 hexo d 时，可能已经正确地安装了 butterfly 主题，并且该主题存在于本地的 _config.yml 中和 node_modules 文件夹中。<br>然而，在推送到 GitHub 上时，你没有将 node_modules 中的 butterfly 主题或相关配置文件推送到 GitHub 仓库。GitHub Pages 需要能够访问这些主题文件，而它不会在部署过程中下载和安装这些依赖。<br>GitHub Pages 配置问题：</p><p>如果你直接使用 GitHub Pages 作为部署平台，GitHub 并不会自动安装你的 Hexo 依赖，因此它不能像本地环境一样找到 butterfly 主题。<br>GitHub Pages 需要使用一个可以通过静态文件夹来部署的版本，而 Hexo 本地运行时通常会将主题内容放在 node_modules 中，这些内容并不会自动推送到 GitHub，除非你特别将它们包含在仓库中。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用github-actions<br>并且在google查找到的方法添加 .nojekyll文件 让github站点不适用jekyll</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main  # 监听主分支的推送</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout repository</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Setup Node.js</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;16&#x27;</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Generate and Deploy</span><br><span class="line">        run: |</span><br><span class="line">          hexo generate</span><br><span class="line">          hexo deploy</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PATH: $&#123;&#123; secrets.HEXO_DEPLOY_PATH &#125;&#125;  # 设置部署路径</span><br></pre></td></tr></table></figure><p>多看源码 基础真的很重要 多看官方文档能解决很多问题</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github参与开源应该做什么</title>
      <link href="/2024/11/05/github/github/"/>
      <url>/2024/11/05/github/github/</url>
      
        <content type="html"><![CDATA[<h1 id="第一次参与开源项目应该做些什么"><a href="#第一次参与开源项目应该做些什么" class="headerlink" title="第一次参与开源项目应该做些什么"></a>第一次参与开源项目应该做些什么</h1><p>借鉴Moment老哥文档</p><p><a href="https://juejin.cn/post/7354233858063925267">https://juejin.cn/post/7354233858063925267</a></p><h4 id="第一步fork"><a href="#第一步fork" class="headerlink" title="第一步fork"></a>第一步fork</h4><p>fork到自己的仓库下 且选择fork所有分支 这样就可以有修改项目的权限<br>通过Pull Request方式 commits合到上游项目</p><h4 id="第二步克隆项目"><a href="#第二步克隆项目" class="headerlink" title="第二步克隆项目"></a>第二步克隆项目</h4><p>git clone …</p><h4 id="第三步更新本地分支代码"><a href="#第三步更新本地分支代码" class="headerlink" title="第三步更新本地分支代码"></a>第三步更新本地分支代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;原始仓库的URL&gt;</span><br><span class="line">git fetch upstream</span><br><span class="line">git checkout main</span><br><span class="line">git rebase upstream/main</span><br></pre></td></tr></table></figure><p>等等指令在此省略 详细的等到具体运用中再做增加</p><p>创建新的分支并在新的分支上作出修改 回到fork的仓库中找到pullRequest<br>NewRequest并把自己更改的分支上传到作者的仓库也就完成了一次Request</p><h4 id="写入你想更改的地方"><a href="#写入你想更改的地方" class="headerlink" title="写入你想更改的地方"></a>写入你想更改的地方</h4><p>提交你的更改 </p><h4 id="开一个PR"><a href="#开一个PR" class="headerlink" title="开一个PR"></a>开一个PR</h4><p>在完成 push 操作后，我们打开 GitHub，可以看到一个黄色的提示框，告诉我们可以开一个 Pull Request 了</p><p>参考：</p><p><a href="https://link.juejin.cn/?target=https://github.com/xun082/create-neat/pull/83">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fxun082%2Fcreate-neat%2Fpull%2F83</a><br>一定要参与一次实践，才懂得如何去做。只有错过了，才能保证下一次的完美运行。</p><hr><p>最后希望自己早入加入开源大家庭中，加油！ </p><ul><li><pre><code>                     2024 11.5日</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>北京之旅</title>
      <link href="/2024/11/04/%E7%94%9F%E6%B4%BB/hello-world/"/>
      <url>/2024/11/04/%E7%94%9F%E6%B4%BB/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="开源社"><a href="#开源社" class="headerlink" title="开源社"></a>开源社</h2><p>在偶然一次发现中 开源社举办了第九届中国开源年会，我很是激动，心中迅速萌发了去北京参加的冲动并和小伙伴赵冰<br>决定这周五来一次说走就走的旅行~~~</p><h2 id="到达北京"><a href="#到达北京" class="headerlink" title="到达北京"></a>到达北京</h2><p>在周六的早上到达会场 扫了入场的码 领到了活动给的一些礼品 7点多我俩就到达了会场，刚开始觉得平平无奇，后来直到大会开始，陆陆续续的大家都来到了会场，开源社的<br>老哥，老姐们开始了自己的演讲，我发现这真的不是一个普通大会，很多人报着开源的理念 一直维持着开源社，让开源社越来越大<br>虽然是第一次参加，但是我对于这种氛围是非常的喜欢，各位有着自己想法的人都在开源社散发光辉，有为抗癌人士专门发布app的<br>小胰宝等其他的产品，这令我深受触动，把科技真真正正的融合到了生活当中，使人们都能享受科技带来的便捷！大会中的每一个人的演讲都令我感到激动！但是对我印象的最深刻的就是<strong>yihong0618</strong>这个id，伊洪老师的演讲令我眼前一亮心里一跳哈哈哈哈<br>简直太爽啦！！！</p><h2 id="yihong0618"><a href="#yihong0618" class="headerlink" title="yihong0618"></a>yihong0618</h2><p>请大家自己去看伊洪老师的github，你真的能从中学到很多，在火车上我一直再看伊洪老师的github<br>每一件事是写的那么的真诚，有很多我也感同身受，生活的迷茫原来真的不是自己才有，面临各种压力，各种抉择！做好自己。<br>老师的仓库里也有非常多的实用的产品大家可以自己去看！！</p><p>[github] <a href="https://github.com/yihong0618">https://github.com/yihong0618</a></p><p>在伊洪老师的演讲中，令我觉得钦佩的是，每一天的记录自己，我太喜欢这种感觉了，发布到github上，我也便想向这么做<br>在4日赶回来我便从网上学习搭建博客，坚持记录每一天</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次旅程，说走就走，哈哈哈，这才是大学生嘛，遇见了开源社的大家，我希望从今的每一天，慢慢的融入到开源社这个大家庭</p><p>-感谢冰哥陪我这次旅行</p><pre><code>                                                                    2024年11.4日</code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/picture/beijing_photo/beijing3.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">北京</div>  <p>中关村</p>  <a href='/Gallery/beijing'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/Music/index.html"/>
      <url>/Music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>字节姑关于框架学习</title>
      <link href="/archives/Dance_Frame.html"/>
      <url>/archives/Dance_Frame.html</url>
      
        <content type="html"><![CDATA[<h1 id="字节内部课程学习"><a href="#字节内部课程学习" class="headerlink" title="字节内部课程学习"></a>字节内部课程学习</h1><h3 id="一-走进RPC框架"><a href="#一-走进RPC框架" class="headerlink" title="一.走进RPC框架"></a>一.走进RPC框架</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>本地函数调用 压栈弹出</p><p>RPC调用  网上购物 {（付款操作）</p><p>远程调用 中间隔着网路  不能用函数指针了 是两个进程 机器id找到函数运行</p><p>解决问题 1. 函数映射</p><ol start="2"><li>数据转换成字节流 （客户端转换成字节流 传送给 服务端）</li><li>网络传输（高效稳定传输数据）</li></ol><p>}</p><p><img src="/study_photo/1.png" alt="示例图片"></p><p><strong>过程</strong>：User本地调用 打包参数 -》 RPC -》 对端-》解压-》调用真正业务逻辑 然后在返回 整个流程</p><p>IDL文件（接口描述文件）</p><p><img src="/study_photo/2.png" alt="image-20241107104049573"></p><p>Caller（调用段）和 生成代码 -》 encoder编码 -》字节流 -》打包传送给对端</p><p><strong>好处</strong></p><p><img src="/study_photo/3.png" alt="image-20241107104333574"></p><p><img src="/study_photo/4.png" alt="image-20241107111602308"></p><p><img src="/study_photo/5.png" alt="image-20241107111758336"></p><h4 id="2-编解码层："><a href="#2-编解码层：" class="headerlink" title="2.编解码层："></a>2.编解码层：</h4><p><img src="/study_photo/6.png" alt="image-20241107111909320"></p><p>编解码层：</p><p><img src="/study_photo/7.png" alt="image-20241107111950413"></p><p>二进制编码</p><p><img src="/study_photo/8.png" alt="image-20241107112146078"></p><p>左侧是IDL中写的统一的 -》字节流 有额外的内存开销</p><p><img src="/study_photo/10.png" alt="image-20241107112827203"></p><p><img src="/study_photo/11.png" alt="image-20241107112953295"></p><p><strong>多路复用</strong>：同一个链接内 可以有多个请求流通过</p><p>协议解析：</p><p><img src="/study_photo/12.png" alt="image-20241107113245207"></p><h4 id="4-网络通信层："><a href="#4-网络通信层：" class="headerlink" title="4.网络通信层："></a>4.网络通信层：</h4><p><img src="/study_photo/13.png" alt="image-20241107113347859"></p><p>SCOEKT API   （ip+端口）</p><p>一端关闭套接字    如果另一端如果尝试去读 可能就会返回（End Of File）也就是 EOF 在项目中我好像遇到过这个问题 用postman测试的时候返回了EOF错误和nil</p><p>网络库</p><p><img src="/study_photo/14.png" alt="image-20241107113810046"></p><h3 id="二-RPC关键指标分析与企业实践"><a href="#二-RPC关键指标分析与企业实践" class="headerlink" title="二.RPC关键指标分析与企业实践"></a>二.RPC关键指标分析与企业实践</h3><p>稳定性 易用性 扩展性 观测性 高性能</p><p>稳定性：</p><p><img src="/study_photo/15.png" alt="image-20241107114134948"></p><p><strong>过程：</strong>a调用b b调用c c如果响应慢 b就会一直等待 a也就超时了 a就会频繁调用b b堆积大量请求就会宕机</p><p>熔断起保护作用</p><p>稳定性：请求成功了率</p><p><img src="/study_photo/16.png" alt="image-20241107114404973"></p><p>1.均匀调用服务的每个节点</p><ol start="2"><li>重试几次</li></ol><p><img src="/study_photo/17.png" alt="image-20241107114611581"></p><p>备份请求： 左侧正常 1失败  2是重试请求  总时间 t1＋t2</p><p>​                    右侧 t3 tct99（这个值 在这个时间内应该可以返回值）如果在时间内没返回 就发送2请求 总时间就是 t4</p><h4 id="1-注册中间件"><a href="#1-注册中间件" class="headerlink" title="1.注册中间件"></a>1.注册中间件</h4><p><img src="/study_photo/18.png" alt="image-20241107114931005"></p><h4 id="2-易用性："><a href="#2-易用性：" class="headerlink" title="2.易用性："></a>2.易用性：</h4><p><img src="/study_photo/19.png" alt="image-20241107115019715"></p><p>自动生成代码工具 ： 减少重复性工作</p><h4 id="3-扩展性"><a href="#3-扩展性" class="headerlink" title="3.扩展性"></a>3.扩展性</h4><p><img src="/study_photo/20.png" alt="image-20241107115236618"></p><p>用户请求 经过中间件处理-》和远端交互 -》 也通过中间件处理-》服务器</p><h4 id="4-观测性："><a href="#4-观测性：" class="headerlink" title="4.观测性："></a>4.观测性：</h4><p><img src="/study_photo/21.png" alt="image-20241107115409542"></p><p>日志观察 监控面板qbs 链路跟踪（服务通过请求为什么超时了 耗费的时间是多少）</p><p>linux的top工具类似原理</p><h4 id="5-高性能："><a href="#5-高性能：" class="headerlink" title="5.高性能："></a>5.高性能：</h4><p><img src="/study_photo/22.png" alt="image-20241107115628087"></p><p>高吞吐：在单位时间内尽可能多的处理更多请求</p><p>低延迟： 一次请求发出去延迟尽可能地低（重要）</p><p>​</p><h4 id="6-本章总结："><a href="#6-本章总结：" class="headerlink" title="6.  本章总结："></a>6.  本章总结：</h4><p><img src="/study_photo/23.png" alt="image-20241107115938337"></p><p>字节实践：</p><p><img src="/study_photo/24.png" alt="image-20241107120230033"></p><p>组件 结构 远端交互层 网络库  代码生成工具 （最左侧）</p><p>为什么自研网络库？</p><p>gonet</p><p><img src="/study_photo/25.png" alt="image-20241107120515080"></p><p>Netpoll</p><p><img src="/study_photo/26.png" alt="image-20241107120603540"></p><p><img src="/study_photo/27.png" alt="image-20241107120656906"></p><p>交互方式pingpang（一发一回） 编解码 应用层协议</p><p>优化：</p><p><img src="/study_photo/28.png" alt="image-20241107120826363"></p><p><img src="/study_photo/29.png" alt="image-20241107120948515"></p><p>你应该想这些是怎么实现的？</p><p><img src="/study_photo/30.png" alt="image-20241107121448901"></p><p><img src="/study_photo/31.png" alt="image-20241107121741751"></p><h3 id="三-走进HTTP协议"><a href="#三-走进HTTP协议" class="headerlink" title="三.走进HTTP协议"></a>三.走进HTTP协议</h3><h4 id="1-再谈http协议"><a href="#1-再谈http协议" class="headerlink" title="1.再谈http协议"></a>1.再谈http协议</h4><p>HTTP 超文本传输协议</p><p><img src="/study_photo/32.png" alt="image-20241108133154991"></p><p>http协议将人话以计算机语言传输过去</p><p><img src="/study_photo/33.png" alt="image-20241108133257828"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求行</span><br><span class="line">：分隔 原数据</span><br><span class="line"></span><br><span class="line">包的字节数</span><br><span class="line">大空行</span><br><span class="line"></span><br><span class="line">我们想说的话</span><br><span class="line"></span><br><span class="line">下面是回复</span><br></pre></td></tr></table></figure><p><img src="/study_photo/34.png" alt="image-20241108133725032"></p><p><img src="/study_photo/35.png" alt="image-20241108133847415"></p><p>上述功能代码：</p><p><img src="/study_photo/36.png" alt="image-20241108134149368"></p><p>处理流程:</p><p><img src="/study_photo/37.png" alt="image-20241108134229285"></p><p>H1的不足 H2也没完全解决    UDP解决对头阻塞</p><p><img src="/study_photo/38.png" alt="image-20241108134628306"></p><h3 id="四-HTTP框架实现"><a href="#四-HTTP框架实现" class="headerlink" title="四.HTTP框架实现"></a>四.HTTP框架实现</h3><h4 id="1-分层设计的好处"><a href="#1-分层设计的好处" class="headerlink" title="1.分层设计的好处"></a>1.分层设计的好处</h4><p><img src="/study_photo/166.png" alt="image-20241109154338484"></p><p>高内聚 低耦合 易复用 高扩展性</p><p><img src="/study_photo/167.png" alt="image-20241109154510026"></p><p>应用层</p><p>中间件层 预处理</p><p>路由层</p><p>协议层</p><p>中间件设计：</p><p>洋葱模型</p><p><img src="/study_photo/168.png" alt="image-20241121185257019"></p><p><img src="/study_photo/169.png" alt="image-20241121185641849"></p><p>路由设计： map[string]handlers 静态路由有效 动态不太行</p><p>前缀匹配树构建路由：</p><p>啊啊啊啊：前两天刚看 7_days_golang 构建动态路由的方法</p><p>这里就讲解了 啊啊啊</p><p><img src="/study_photo/170.png" alt="image-20241121190300522"></p><p>参数路由：</p><p>协议层设计</p><p>网络层设计</p><p><img src="/study_photo/171.png" alt="image-20241121202157512"></p><h5 id="性能修炼之道"><a href="#性能修炼之道" class="headerlink" title="性能修炼之道"></a>性能修炼之道</h5><p>针对网络库的优化</p><p>netpoll  （中大包性能高 时延低）</p><p>go net（流式友好，小包性能高）</p><p>存下全部Header</p><p>拷贝身体</p><p>针对协议的优化</p><p>Headers 解析</p><p>找到Header Line边界 &#x2F;r&#x2F;n</p><p>SIMD</p><p>Sonic</p><h4 id="五-微服务架构："><a href="#五-微服务架构：" class="headerlink" title="五.微服务架构："></a>五.微服务架构：</h4><p>单体架构 -》 垂直应用架构 -》 分布式架构 -》 SOA架构 -》 微服务架构</p><p>单体架构：</p><p>优势： 性能最高 冗余小</p><p>劣势： 1.debug困难 2.模块相互影响 3.模块</p><p>垂直应用架构：</p><p>优点： 业务独立开发维护</p><p>缺点 ： 存在冗余</p><p>分布式架构：</p><p><img src="/study_photo/173.png" alt="image-20241122175120662"></p><p>SOA架构：</p><p><img src="/study_photo/174.png" alt="image-20241122175312029"></p><p>服务注册中心： 服务注册</p><p>劣势： 整个系统设计是中心化的</p><p>​需要从上至下设计</p><p>​重构困难</p><p>微服务架构：</p><p><img src="/study_photo/175.png" alt="image-20241122175442902"></p><p>开发效率高</p><p>但是运维难度大</p><p>安全性</p><p><img src="/study_photo/176.png" alt="image-20241122175636816"></p><p><img src="/study_photo/177.png" alt="image-20241122175816476"></p><p>服务： 相同逻辑 的 运行实体</p><p>实例 ： 每一个运行实体为一个实例</p><p><img src="/study_photo/178.png" alt="image-20241122180306396"></p><p>逻辑划分称一个（集群） 集群包含实例</p><p>有状态 无状态服务： 是否存储了可持续化数据</p><h5 id="服务间通信："><a href="#服务间通信：" class="headerlink" title="服务间通信："></a>服务间通信：</h5><p><img src="/study_photo/179.png" alt="image-20241122180825079"></p><p>HTTP RPC</p><p>目标服务地址：</p><p>hardcode</p><p>服务A调用服务B（指定一个目标服务地址会有什么问题？）</p><p>ip地址不会固定</p><p><img src="/study_photo/180.png" alt="image-20241122181602662"></p><p>只有一个实例可以接受请求 别的接收不到</p><p>ip也是会变化的</p><p>如果用DNS域名来访问</p><p>DNS缓存机制： 导致延时</p><p>负载均衡问题：无法指定请求某个ip回应</p><p>不支持探活检查</p><p>域名无法配置端口</p><p><img src="/study_photo/181.png" alt="image-20241122182118324"></p><p>负载均衡算法</p><p>若要  下线某个实例：</p><p><img src="/study_photo/182.png" alt="image-20241122182354705"></p><p>流量会不会走到第三个实例上面</p><p>服务1 和 服务2 压力变大 可以在开启一个实例</p><p><img src="/study_photo/183.png" alt="image-20241122182554893"></p><p>统一网关入口</p><h4 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h4><p>租用了一台公网ip</p><p>现状 找一个物理机 ifconfig将网卡配上这个ip 起server监听即可</p><p>应用多 起多个server监听不同的端口</p><p>基于ip＋端口  基于某种算法 将报文转发给后端服务器</p><p><img src="/study_photo/184.png" alt="image-20241123181002063"></p><h5 id="常见调度算法"><a href="#常见调度算法" class="headerlink" title="常见调度算法"></a>常见调度算法</h5><p>RR轮询：</p><p>加权RR轮询：</p><p>最小连接</p><p>五元组hash</p><p>一致性hash</p><p><img src="/study_photo/185.png" alt="image-20241123181248969"></p><p>FULLNAT</p><p>纯用户态协议栈</p><p>无缓存 零拷贝 大页内存 （减少 cache miss）</p><p><img src="/study_photo/186.png" alt="image-20241123181625438"></p><p>7层负载均衡</p><p><img src="/study_photo/187.png" alt="image-20241123181812859"></p><p>NGINX：</p><p>最灵活的高性能Web 7层反向代理</p><p><img src="/study_photo/188.png" alt="image-20241123182129083"></p><h5 id="网络接入实践与课程总结"><a href="#网络接入实践与课程总结" class="headerlink" title="网络接入实践与课程总结"></a>网络接入实践与课程总结</h5><p><img src="/study_photo/189.png" alt="image-20241123190541804"></p><p>：</p><p><img src="/study_photo/190.png" alt="image-20241123190953261"></p><p>七层负载均衡</p><p><img src="/study_photo/191.png" alt="image-20241123191212670"></p><p>配置https访问</p><p><img src="/study_photo/192.png" alt="image-20241123191142306"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/beijing.html"/>
      <url>/Gallery/beijing.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="true 220 5">      <div class="gallery-items">[{"url":"/picture/beijing_photo/beijing1.jpg","alt":""},{"url":"/picture/beijing_photo/beijing2.jpg","alt":""},{"url":"/picture/beijing_photo/beijing3.jpg","alt":""},{"url":"/picture/beijing_photo/beijing4.jpg","alt":""},{"url":"/picture/beijing_photo/beijing5.jpg","alt":""},{"url":"/picture/beijing_photo/beijing6.jpg","alt":""},{"url":"/picture/beijing_photo/beijing7.jpg","alt":""},{"url":"/picture/beijing_photo/beijing8.jpg","alt":""},{"url":"/picture/beijing_photo/beijing9.jpg","alt":""},{"url":"/picture/beijing_photo/beijing10.jpg","alt":""},{"url":"/picture/beijing_photo/beijing11.jpg","alt":""},{"url":"/picture/beijing_photo/beijing12.jpg","alt":""},{"url":"/picture/beijing_photo/beijing13.jpg","alt":""},{"url":"/picture/beijing_photo/beijing14.jpg","alt":""},{"url":"/picture/beijing_photo/beijing15.jpg","alt":""},{"url":"/picture/beijing_photo/beijing16.jpg","alt":""},{"url":"/picture/beijing_photo/beijing17.jpg","alt":""},{"url":"/picture/beijing_photo/beijing18.jpg","alt":""}]</div>    </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>11.26日字节直播总结</title>
      <link href="/archives/Dance_live2.html"/>
      <url>/archives/Dance_live2.html</url>
      
        <content type="html"><![CDATA[<h1 id="字节结营直播答疑"><a href="#字节结营直播答疑" class="headerlink" title="字节结营直播答疑"></a>字节结营直播答疑</h1><p>revue 项目</p><p><img src="/about_Dance/1.png" alt="image-20241126190953519"></p><p><img src="/about_Dance/2.png" alt="image-20241126191031196"></p><p>性能优化     ci&#x2F;cd流程 （ star法则来描述一件事情)</p><p>准备找实习 写好简历</p><p><img src="/about_Dance/3.png" alt="image-20241126191500892"></p><p>zt：</p><p>服务端： 计算机基础知识（字节：计算机网络 tcp&#x2F;ip  腾讯：操作系统 阿里： 组成原理）</p><p>技术： （数据结构 高阶算法 链表 堆栈 树（面试重点））</p><p>leetcode 100 150 200</p><p>项目： 烂大街的（入门） 改进一些项目（做优化 项目存在的意义 解决了什么问题？ 带来了什么？ 项目亮点在哪里）</p><p>实习经历：（做了什么需求 需求是（谁给的 自己还是别人？）通过实现了什么？ 解决了什么？ 团队收益还是小组收益？）</p><p>专业能力： 小厂一门语言 ＋数据库存储 会就ok  大数据 架构数据 微服务层面</p><p><img src="/about_Dance/4.png" alt="image-20241126192005590"></p><p>八股扎实稳固 算法 中等难度题很快弄出来</p><p>项目亮点：能让面试官和你聊下去 如何提升亮点和竞争力  开源社区！</p><p>抄项目 然后手写 尝试自己理解      前端（vue）（react）</p><p><img src="/about_Dance/5.png" alt="image-20241126192541252"></p><p>数据结构 计算机基础知识  面试官想看你的亮点（你牛逼在哪里？）</p><p>做过什么会什么？</p><p>服务端是一些思维 而不是纠结你是用什么语言</p><p>从0-1 有没有调研 各行各业的优秀作业</p><p>合作项目</p><p>责任意识</p><p>技术探索：遇到什么问题 怎么解决的？</p><p>业务理解能力 项目受众是谁 项目模块 最重要是哪个模块 怎么优化这个模块</p><p><img src="/about_Dance/6.png" alt="image-20241126193100190"></p><p><img src="/about_Dance/7.png" alt="image-20241126193341747"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“开源社区新手入门该参与什么内容，有哪些社区比较活跃”</span><br><span class="line">可以看看类似于开源之夏这类的活动往年都是做什么的</span><br></pre></td></tr></table></figure><p>多逛github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">“在github中新手怎么找项目”</span><br><span class="line">，你用vue就去看VUE文档仓库，看看有没有错别字，有的话修一下</span><br></pre></td></tr></table></figure><p>项目的含金量 和自己从0-1实现</p><p>组件多 中间件多 新奇的做法等 可以被称为含金量（）</p><p>核心能力 技术深度 在广度的前提下 一定要有一个深度</p><p>项目一样 面试官能问什么？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">老哥们 大二第一次找实习的话一般要什么程度我正在跟着别人做一个项目 但是不知道什么时候才够格去投简历”</span><br><span class="line">看看面经别人被问了什么你能不能回答</span><br></pre></td></tr></table></figure><p><img src="/about_Dance/8.png" alt="image-20241126193803102"></p><p>平地起项目 是有条件的： 大厂实习 项目经历&gt;&#x3D;3 等经历 否则不要平地起</p><p>对于项目的理解一定是从头到尾的 对项目改造 新增功能 优化 才能体现你的亮点</p><p>思考 ： 多人协作是否有沟通 是否涉及复杂逻辑</p><p>新颖的想法！ 创造力！</p><p>投简历的方式</p><p>如何面对八股 算法</p><p>找开源项目：熟悉流程 寻找错别字熟悉流程哈哈哈 看issue bug（解决issue）</p><p>知乎 蔚来 比亚迪 从小厂到大厂 循序渐进</p><p><img src="/about_Dance/9.png" alt="image-20241126195807918"></p><p>字节  99%go</p><p>语言是基础无所谓</p><p>培养独立解决问题的能力 做出一个合格的项目 （不断回顾自己的项目 查找不足）</p><p>后端开发实习生（简历）</p><p>数据库的课（掘金的）</p><p>《Redis深度历险：核心原理和应用实践》</p><p>服务端开源： 不建议新手就去找开源 学习成本很大 2~3段实习之后尝试开源</p><p><img src="/about_Dance/10.png" alt="image-20241126200922693"></p><p>知名项目源码： 前提一定要熟悉使用这个项目的源码 项目的使用环境 如何启动它</p><p>例如：熟练使用docker ， kubernets istio了，再去看源码 i   <strong>写出一个对源码理解的文章</strong></p><p>对于源码：一步一步慢慢来 该学的东西就学 不要纠结没用的例如学历 没法改变就不去改变</p><p>.md .sh 依赖那些中间件 中间件是否具备？ 如何去不使用中间件如何启动这个项目 分析目录结构（单体 还是微服务）包的作用 模块之间的耦合关系  利用isue 项目常见报错解决方式</p><p>组队开发的群聊看看能不能找到</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>青训营直播总结</title>
      <link href="/archives/Dance_live.html"/>
      <url>/archives/Dance_live.html</url>
      
        <content type="html"><![CDATA[<p>听了前端文杰老哥分享</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>计算机基础很重要必须要持续学习： 例如：计算机原理，操作系统等，在工作中有些人问题你需要定位到它的问题出在了那里，这个问题的对应着是哪个方面的问题<br>学习ai提示词，提高学习效率，练好基本功，多写代码，多用大模型 前期多学习如何编码而不是太多关于工程化的问题</p><h3 id="建议："><a href="#建议：" class="headerlink" title="建议："></a>建议：</h3><p>解决问题:事实是，就业环境中大概率没人把你当学生般保护着，别人没有义务要解决你的问题(不合理，不科学)，请务必提升自己解决问题的能力。</p><p>学习:工作中，很难找到手把手教你做事的团队，多数时候都是靠自学，没有课本，没有老师，没有标准答案，全凭自己，所以务必提升独立学习能力;</p><p>二极化:世界不是非黑即白，代码也是，职业也是，接受、包容多样性吧，多从不同角度思考问题，从不同渠道了解解决问题的方法，学会更体系化地思考;</p><p>LLM:非常值得花很多时间学习，用好这个工具，提升你个人效率;但它不是魔法，不要幻想着学会了就能怎么这么样; (目前只停留在问题的复制粘贴 效率很低)</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>学习数据库</title>
      <link href="/archives/Database.html"/>
      <url>/archives/Database.html</url>
      
        <content type="html"><![CDATA[<hr><p>参考书籍： 数据库设计</p><hr><p>我先从事务入手：</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>概念</strong> ： 与单个用户或者程序执行，完成读取或者更新数据库内容的一个或一串操作</p><p>应用程序的一次执行就是一个事务或者多个事务</p><p>示例：</p><p>简单事务： 更新x员工的工资（涉及：数据库的读和写，和非数据库操作）</p><p>复杂事务：删除x的员工记录，并把x员工的事务交付给其他人去做。 （过程中若并非所有的操作都被执行，那么数据库的引用完整性将遭到破坏）（数据库也处于不一致状态）</p><p>尽管一致性暂时遭到破坏，但是数据库总是可以从一种一致状态转换到另一种一致的状态</p><h3 id="数据库最终的结果"><a href="#数据库最终的结果" class="headerlink" title="数据库最终的结果"></a>数据库最终的结果</h3><ol><li>COMMIT：执行成功，事务最终被提交 （数据库也达到了一种新的状态）</li><li>ABORTED：事务没有执行成功 （事务被撤销）则数据库必须要还原事务开始之前的一致状态</li><li>已经提交的事务不能被撤销，只能通过（补偿事务）进行覆盖 消除事务产生的影响</li><li>DBMS将在程序正确结束后自动执行COMMIT操作，若不能成功执行则 ROBACK</li><li>PARTIALLY COMITTED：若在最后一条语句被执行时产生了 破坏了可串行化或违反了完整约束 因此事务必须被撤销 或者系统出现故障，事务更新的事务没有被安全的写到二级存储设备上（部分提交） 以上两种情况最终都会进入</li><li>FAILED（失败状态） 事务无法被提交，或者事务处于ACTIVE状态就被撤销 则 处于FAILED状态</li></ol><h3 id="事务性质"><a href="#事务性质" class="headerlink" title="事务性质"></a>事务性质</h3><p>ACID</p><ol><li>原子性：</li><li>一致性：</li><li>隔离性：</li><li>持久性：</li></ol><p>事务的隔离级别<br>事务隔离级别控制了事务之间的可见性和并发行为。常见的隔离级别包括：</p><ul><li>读未提交（Read Uncommitted）：在这个隔离级别下，一个事务可以读取其他事务尚未提交的数据。这可能导致脏读（读取了未提交的数据）、不可重复读（同一查询在事务执行期间返回不同结果）和幻读（事务在同一查询中看到不同的数据行）等问题。读未提交的隔离级别最不严格，可能会引发数据不一致问题</li><li>读已提交（Read Committed）：在这个隔离级别下，一个事务只能读取已经提交的数据，避免了脏读问题。但是，不可重复读和幻读问题仍然可能出现。因为其他事务可能在事务进行期间提交新的数据，导致不同时间点的查询结果不一致。</li><li>可重复读（Repeatable Read）：可重复读隔离级别确保在同一事务内，同一个查询的结果保持一致。这意味着一个事务中的查询不会受到其他事务的修改影响。这可以防止脏读和不可重复读问题，但幻读问题仍然可能出现，因为其他事务可能插入新数据，导致新数据行的出现。</li><li>串行化（Serializable）：串行化是最严格的隔离级别，它确保每个事务都在独立的时间段内执行，防止了并发问题。事务按照顺序一个接一个地执行，这可以解决脏读、不可重复读和幻读问题。然而，串行化可能会对性能产生较大的影响，因为事务需要依次执行。</li></ul><p>事务的隔离级别可以解决脏读、幻读、不可重复读的问题。</p><ol><li>脏读： 脏读指的是在一个事务中读取了另一个事务未提交的数据。假设事务 A 修改了某一行数据，但还没有提交。同时，事务 B 尝试读取了事务 A 修改的数据。如果事务 A 最终回滚了，那么事务 B 读取的数据就是不存在的，这就是脏读。脏读会导致不准确的数据展示，因为<strong>读取的数据可能是临时的未经验证的。</strong>、</li><li>不可重复读：不可重复读是指在同一个事务内，多次读取同一数据时，得到不同的结果。这可能是因为在事务执行期间，其他事务修改了数据。例如，事务 A 在读取某一行数据后，事务 B 修改了这行数据，并提交了。现在事务 A 再次读取相同的数据，注重数据：<strong>发现数据已经不同了</strong>，造成了不一致的现象。</li><li>幻读： 幻读是指在同一个事务内，多次查询同一范围的数据时，得到不同的结果。这与不可重复读类似，但幻读关注的是数据的数量变化。例如，事务 A 在查询某个范围内的所有数据时，事务 B 插入了新数据，并提交了。现在事务 A 再次查询同一范围的数据，注重：<strong>发现数据行的数量增加了</strong>，这就是幻读。</li></ol><hr><p>22.2 并发控制 </p><p>讲解了数据库中的一些问题 幻读等</p><p>[点击这里查看PDF文件] (<a href="https://github.com/Whuichenggong/Knowledge-network/blob/main/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%BB%9C.pdf">https://github.com/Whuichenggong/Knowledge-network/blob/main/docs/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BD%91%E7%BB%9C.pdf</a>)</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统学习</title>
      <link href="/archives/Distributed.html"/>
      <url>/archives/Distributed.html</url>
      
        <content type="html"><![CDATA[<p><code>go build -buildmode=plugin ../mrapps/wc.go</code><br>这个指令是什么意思 :</p><p>这个命令的作用是编译 ..&#x2F;mrapps&#x2F;wc.go 文件，并将其生成一个 Go 插件文件。生成的插件文件通常是一个 .so（共享库文件）文件，它可以在运行时被其他 Go 程序通过 plugin 包加载和调用。</p><p>例如：</p><p>你可以在主程序中使用 plugin 包动态加载 wc.so 插件，并调用插件中的函数。</p><p><code>go run mrsequential.go wc.so pg*.txt：</code></p><p>go run：用于编译并运行 Go 程序。它会在内存中临时编译指定的 Go 文件，并立即执行。</p><p>mrsequential.go：这是要执行的 Go 源文件，Go 编译器会先编译这个文件并运行它。这个文件应该包含 main 函数，通常是程序的入口点。</p><p>wc.so：这是一个 Go 插件文件（共享库）。它通常是通过 go build -buildmode&#x3D;plugin 命令生成的。该文件包含 Go 代码，可能定义了一个插件接口，在运行时可以被主程序（mrsequential.go）动态加载和调用。wc.so 可能提供某些功能，mrsequential.go 将加载并使用这些功能。</p><p>pg*.txt：这是一个通配符表达式，表示所有以 pg 开头，后面跟任意字符，且以 .txt 结尾的文件。例如，pg1.txt, pg42.txt, pgfile.txt 都会被匹配并作为参数传递给程序。</p><p><code>more mr-out-0</code> 将会输出很多文本 这是因为：</p><p>mrsequential.go 将其输出保留在文件 mr-out-0 中。输入来自名为 pg-xxx.txt 的文本文件</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言进阶</title>
      <link href="/archives/Go_Advanced.html"/>
      <url>/archives/Go_Advanced.html</url>
      
        <content type="html"><![CDATA[<h1 id="字节青训营学习"><a href="#字节青训营学习" class="headerlink" title="字节青训营学习"></a>字节青训营学习</h1><h3 id="一-入门篇学习"><a href="#一-入门篇学习" class="headerlink" title="一.入门篇学习"></a>一.入门篇学习</h3><p>实战篇：</p><h4 id="1-猜数字游戏"><a href="#1-猜数字游戏" class="headerlink" title="1.猜数字游戏"></a>1.猜数字游戏</h4><p>运用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">”math/rand“</span><br><span class="line"></span><br><span class="line">maxNum := 100</span><br><span class="line">调用 Intn（maxNum）</span><br><span class="line">//注意这并不能使每一次都用都产生不同的值</span><br><span class="line"></span><br><span class="line">需要加 时间戳 才能每次产生不同的值</span><br><span class="line">应该是：</span><br><span class="line">maxNum := 100</span><br><span class="line">ran.Seed(time.Now().UnixNano())</span><br><span class="line">然后调用</span><br><span class="line"> ran.Intn（maxNum）</span><br><span class="line"> </span><br><span class="line"> 用 &quot;bufio&quot;</span><br><span class="line"> 这个特别的包以后可以用到</span><br><span class="line"> </span><br><span class="line"> 这里读取一行输入用的是</span><br><span class="line"> reader := bufo.NewReader(os.Stdin)//调用这个可以更加灵活</span><br><span class="line"> input， err := reader.ReadString(&#x27;\n&#x27;)</span><br><span class="line"> if err != nil&#123;...&#125;</span><br><span class="line"> </span><br><span class="line"> input = strings.TrimSuffix(intput,&quot;\n&quot;)//去掉换行符</span><br><span class="line"> </span><br><span class="line"> guess,err := strconv.Atoi(input)//转换成数字</span><br><span class="line"> </span><br><span class="line"> 菜值逻辑 </span><br></pre></td></tr></table></figure><h4 id="2-在线词典介绍"><a href="#2-在线词典介绍" class="headerlink" title="2.在线词典介绍"></a>2.在线词典介绍</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">go run simpledict/v4/main.go hello</span><br><span class="line">//意思是查询hello这个功能</span><br><span class="line">//会输出以下内容</span><br><span class="line">hello UK:[&#x27;he&#x27;lau]US:[ha&#x27;lo]</span><br><span class="line">int.喂；哈罗</span><br><span class="line">n.引人注意的呼声</span><br><span class="line">V.向人呼（喂</span><br><span class="line"></span><br><span class="line">调用第三方api</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成请求</p><p><a href="https://curlconverter.com/">https://curlconverter.com/</a></p><p>写入curl 自动生成代码</p><p>示例：</p><p><img src="/study_photo/39.png" alt="image-20241104201754858"></p><p>会输出一些列bilibili的东西</p><p>json序列化</p><p><img src="/study_photo/40.png" alt="image-20241104202957339"></p><p>衍生出以下</p><p><img src="/study_photo/41.png" alt="image-20241104203014855"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request ：= DicRequest&#123;Trans Type：&quot;en2zh&quot;,Source:&quot;good&quot;&#125;</span><br><span class="line">buf, err := json.Marshal(request)//序列化request 变成byte数组</span><br><span class="line">if~~~</span><br><span class="line">var data = bytes.NewReader(buf) //因为buf返回的是bytes数组所以我们应该 bytes.NewReader</span><br></pre></td></tr></table></figure><p>解析response 进行反序列化</p><p>json转golang 结构体</p><p><a href="https://oktools.net/json2go">https://oktools.net/json2go</a></p><p>反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = json.Unmarshal(bodytext,&amp;dictResponse)//传入结构体</span><br><span class="line"></span><br><span class="line">fmt.Println(&quot;%#v&quot;,dicResponse)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Go进阶"><a href="#Go进阶" class="headerlink" title="Go进阶"></a>Go进阶</h3><h4 id="1-并发编程"><a href="#1-并发编程" class="headerlink" title="1.并发编程"></a>1.并发编程</h4><p>并发：多线程在一个核运行 时间碎片</p><p>并行： 多核</p><p><img src="/study_photo/42.png" alt="image-20241109132249854"></p><p>并行是并发的手段</p><h4 id="2-协程"><a href="#2-协程" class="headerlink" title="2.协程"></a>2.协程</h4><p><img src="/study_photo/43.png" alt="image-20241109132406297"></p><p>协程：轻量级线程 线程本身重量级 Goroutine：可以实现上万个携程</p><p>例子:协程</p><p><img src="/study_photo/44.png" alt="image-20241109132554426"></p><p>go关键字开启协程</p><p>通过通信来共享内存</p><p><img src="/study_photo/45.png" alt="image-20241109132746410"></p><p>channel</p><p>make创建channel</p><p><img src="/study_photo/46.png" alt="image-20241109132925436"></p><p>有缓冲：</p><p>无缓冲：进行通信时（两个goroutine同步）也称同步通道</p><p>示例：</p><p><img src="/study_photo/47.png" alt="image-20241109133236164"></p><p>先make创建通道 把数字放入第一个通道里</p><p>然后b把src做平方运算</p><p>并发安全 Lock</p><p><img src="/study_photo/48.png" alt="image-20241109134052647"></p><p>Lock（）临界区</p><p><img src="/study_photo/49.png" alt="image-20241109134621688"></p><h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3.依赖管理"></a>3.依赖管理</h4><p>1.GOPATH</p><p>bin pkg src（项目源码）</p><p>无法实现package 的多版本控制</p><p>2.vendor存放依赖副本 也有弊端</p><p>3.go module 管理 解决了问题</p><p><img src="/study_photo/51.png" alt="image-20241109135629389"></p><p>indirect关键词</p><p><img src="/study_photo/52.png" alt="image-20241109140344112"></p><p>b（选择最低兼容版本）</p><h4 id="4-依赖分发"><a href="#4-依赖分发" class="headerlink" title="4.依赖分发"></a>4.依赖分发</h4><p>Github         SVN               …</p><p>​          Developer</p><p>无法保证构建稳定性</p><p>无法保证依赖可用性</p><p>增加第三方压力</p><p>Go proxy （）缓存内容版本 从proxy拉取依赖 减少第三方压力</p><p>Proxy1 -》 proxy2 -》 Direct  依次进行</p><h4 id="5-工具-go-get"><a href="#5-工具-go-get" class="headerlink" title="5.工具 go get"></a>5.工具 go get</h4><p>go mod       <strong>init tidy download</strong></p><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><p>事故：</p><p><img src="/study_photo/59.png" alt="image-20241111092419264"></p><p>测试的重要性：避免事故的最后一道屏障</p><p>单元测试 mock测试   回归测试 集成测试</p><h5 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h5><p><img src="/study_photo/60.png" alt="image-20241111092633595"></p><p>保证代码整体覆盖率</p><p>提升效率</p><h5 id="2-规则"><a href="#2-规则" class="headerlink" title="2. 规则"></a>2. 规则</h5><p><img src="/study_photo/61.png" alt="image-20241111092852792"></p><h5 id="3例子："><a href="#3例子：" class="headerlink" title="3例子："></a>3例子：</h5><p><img src="/study_photo/62.png" alt="image-20241111093035601"></p><p>go test 【flags】 【packages】</p><h5 id="4-assert"><a href="#4-assert" class="headerlink" title="4.assert"></a>4.assert</h5><p><img src="/study_photo/63.png" alt="image-20241111093202556"></p><h5 id="5-覆盖率"><a href="#5-覆盖率" class="headerlink" title="5.覆盖率"></a>5.覆盖率</h5><p><img src="/study_photo/64.png" alt="image-20241111093237237"></p><p><img src="/study_photo/65.png" alt="image-20241111093252039"></p><p>提升覆盖率</p><p><img src="/study_photo/66.png" alt="image-20241111093436343"></p><p>对各个分支测试 使函数代码都经过完备的测试 提升覆盖率 减少事故</p><p><img src="/study_photo/67.png" alt="image-20241111093526971"></p><h5 id="6-依赖"><a href="#6-依赖" class="headerlink" title="6.依赖"></a>6.依赖</h5><p><img src="/study_photo/68.png" alt="image-20241111093723869"></p><h5 id="7-文件处理"><a href="#7-文件处理" class="headerlink" title="7.文件处理"></a>7.文件处理</h5><p><img src="/study_photo/69.png" alt="image-20241111093855592"></p><p>一旦文件被别人篡改 在特定场景下就无法运行！</p><h5 id="8-Mock"><a href="#8-Mock" class="headerlink" title="8.Mock"></a>8.Mock</h5><p><img src="/study_photo/70.png" alt="image-20241111094015817"></p><p>replacement 打桩函数</p><p><img src="/study_photo/71.png" alt="image-20241111094459861"></p><p>通过mock 不对 文件有强依&#x2F;study_photo&#x2F;70.png</p><p><img src="/study_photo/72.png" alt="image-20241111094758462"></p><p>优化：</p><p><img src="/study_photo/73.png" alt="image-20241111094944759"></p><p>fastrand</p><h4 id="10-项目实践"><a href="#10-项目实践" class="headerlink" title="10.项目实践"></a>10.项目实践</h4><p><img src="/study_photo/75.png" alt="image-20241111095222107"></p><p><img src="/study_photo/76.png" alt="image-20241111095416063"></p><p><img src="/study_photo/77.png" alt="image-20241111095526585"></p><p><img src="/study_photo/78.png" alt="image-20241111100016448"></p><p>话题id -》 获取所有post</p><p><img src="/study_photo/79.png" alt="image-20241111100134049"></p><p><img src="/study_photo/80.png" alt="image-20241111100208797"></p><p>初始化话题内存索引</p><p><img src="/study_photo/81.png" alt="image-20241111100306256"></p><hr><p>逻辑层：</p><p><img src="/study_photo/82.png" alt="image-20241111100415573"></p><p><img src="/study_photo/83.png" alt="image-20241111121526603"></p><p><img src="/study_photo/83.png" alt="image-20241111121719613"></p><p>并行处理</p><p><img src="/study_photo/84.png" alt="image-20241111121901723"></p><p><img src="/study_photo/85.png" alt="image-20241111122045428"></p><h3 id="三-高质量编程与实践"><a href="#三-高质量编程与实践" class="headerlink" title="三.高质量编程与实践"></a>三.高质量编程与实践</h3><p>如何编写更简洁和跟清晰的代码</p><p>熟悉GO程序性能分析工具</p><p>常用Go语言程序优化手段</p><p>了解工程性能优化的原则和流程</p><p>:性能调优    性能分析工具     性能调优案例</p><p>算法效率</p><h4 id="1-高质量编程"><a href="#1-高质量编程" class="headerlink" title="1.高质量编程"></a>1.高质量编程</h4><p>正确可靠 简洁清晰</p><p>各种边界条件是否考虑完备</p><p>异常情况处理 稳定性保证</p><p>易读易维护</p><p>团队合作保证容易读 维护 使其增加和调整更加快速 更加清晰</p><p>主要是给人看 让人可以看懂  对已有的功能改善 优化 容易添加功能</p><h4 id="2-编码规范"><a href="#2-编码规范" class="headerlink" title="2.编码规范"></a>2.编码规范</h4><p>代码格式</p><p>注释</p><p>命名规范</p><p>控制流程</p><p>错误和异常处理</p><p><img src="/study_photo/87.png" alt="image-20241112171014037"></p><p>不需要注释实现接口的方法 这种注释可以删除</p><p><img src="/study_photo/88.png" alt="image-20241112171126665"></p><h5 id="1-gofmt"><a href="#1-gofmt" class="headerlink" title="1.gofmt"></a>1.gofmt</h5><p>推荐使用gofmt 自动格式化代码为官方统一风格</p><h5 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h5><p>注释应该解释代码的作用</p><p>注释应该解释代码如何做的</p><p>注释应该解释代码实现的原因</p><p>注释应该解释代码什么情况会错</p><p><img src="/study_photo/89.png" alt="image-20241112171511567"></p><p>下面的根本不需要注释没有什么必要 函数名字已经说明了</p><p><img src="/study_photo/90.png" alt="image-20241112171655993"></p><p>最后一条语句是很难理解的  如果没有注释   一定要会看英文呵呵</p><p><img src="/study_photo/91.png" alt="image-20241112171909248"></p><p><img src="/study_photo/92.png" alt="image-20241112172349471"></p><p><img src="/study_photo/93.png" alt="image-20241112172623038"></p><p><img src="/study_photo/94.png" alt="image-20241112172638016"></p><p>此时的t就减少了很多东西</p><p><img src="/study_photo/95.png" alt="image-20241112172953450"></p><p>例如http中调用 Server 是 http.Server</p><p>若用 ServerHTTP   http.ServerHTTP这样感觉就变得冗余了没有必要</p><p><img src="/study_photo/96.png" alt="image-20241112173231246"></p><p>避免if else嵌套 包含同样语句可以去掉 重复语句</p><p><img src="/study_photo/97.png" alt="image-20241112173423686"></p><p>这样看起来比较复杂</p><p><img src="/study_photo/98.png" alt="image-20241112173532576"></p><p>调整后：</p><p><img src="/study_photo/99.png" alt="image-20241112173605956"></p><p>控制流程 ： 线性原理 尽量走直线 避免复杂的嵌套分支</p><h5 id="3-错误和异常处理"><a href="#3-错误和异常处理" class="headerlink" title="3.错误和异常处理"></a>3.错误和异常处理</h5><p><img src="/study_photo/100.png" alt="image-20241112173840011"></p><p><img src="/study_photo/101.png" alt="image-20241112173902743"></p><p><img src="/study_photo/102.png" alt="image-20241112174134842"></p><h4 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h4><h5 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h5><p>1.依靠数据而不是猜测<br>2.定位到最大瓶颈（也就是影响最大的部分），<br>3.不要过早优化<br>4.不要过度优化</p><h5 id="性能调优工具：pprof"><a href="#性能调优工具：pprof" class="headerlink" title="性能调优工具：pprof"></a>性能调优工具：pprof</h5><h5 id="pprof：可视化和性能分析数据的工具"><a href="#pprof：可视化和性能分析数据的工具" class="headerlink" title="pprof：可视化和性能分析数据的工具"></a>pprof：可视化和性能分析数据的工具</h5><p><img src="/study_photo/103.png" alt="image-20241112174134842"></p><h6 id="pprof实战项目："><a href="#pprof实战项目：" class="headerlink" title="pprof实战项目："></a>pprof实战项目：</h6><p>下载项目 并且运行：</p><p>GIthub：<a href="https://github.com/wolfogre/go-pprof-practice">https://github.com/wolfogre/go-pprof-practice</a></p><p><code>go run main.go</code></p><p>等待编译 等待一段时间</p><p>输入：<a href="http://localhost:6060/debug/pprof/">http://localhost:6060/debug/pprof/</a> 在浏览器中</p><p><img src="/study_photo/104.png" alt="image-20241112174134842"></p><p>此时的cpu 内存状态：</p><p><img src="/study_photo/111.png" alt="image-20241112174134842"></p><p><img src="/study_photo/112.png" alt="image-20241112174134842"></p><p><img src="/study_photo/113.png" alt="image-20241112174134842"></p><p>以下输出：<br><img src="/study_photo/114.png" alt="image-20241112174134842"></p><p><img src="/study_photo/115.png" alt="image-20241112174134842"></p><p>思考： 什么情况下 Flat &#x3D;&#x3D; Cum Flat&#x3D;&#x3D;0</p><p>分别为1. 函数中没有调用其他函数 都是本函数使用的时间<br>2. 函数中只有其他函数调用并且时间占用也很少可以忽略不计</p><p>在查看到tiger中有一部分占用了很大的时间 把相关的代码注释后</p><p>内存方面并没有解决什么</p><p>Heap：堆内存分析：</p><p>在终端使用这个指令<br><code>go tool pprof -http=:8080 &quot;http://localhost:6060/debug/pprof/heap&quot;</code><br>…没有下载工具先放一下</p><p>先截屏</p><p>锁：<br><code>go tool pprof -http=:8080 &quot;http://localhost:6060/debug/pprof/mutex&quot;</code></p><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><h5 id="GO语言优化"><a href="#GO语言优化" class="headerlink" title="GO语言优化"></a>GO语言优化</h5><p>内存管理优化</p><p>编译器优化</p><p>什么是性能优化 ，为什么要做性能优化？</p><p>：提升软件系统处理能力，减少不必要的消耗</p><p>：用户体验，让用户刷抖音不卡顿</p><p>：资源高效利用，成低成本，提高效率</p><p>业务代码：处理用户请i去</p><p>SDK：go的SDK</p><p>基础库：</p><p>这两部分提供抽象逻辑（数据结构 网络库 io库）</p><p>语言运行时： gc 调度器（go语言）</p><p>OS</p><p>性能分析工具：pprof</p><p>依靠数据而非猜测</p><p>优化最大瓶颈</p><p>Go的SDK</p><p>接口 命令 APIs</p><p>测试 来 驱动开发</p><p>隔离： 通过选择控制是否开启优化</p><p>可观测：</p><p>静态分析：</p><h5 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h5><p>基于追踪的垃圾回收</p><p>GC</p><p>动态内存 malloc</p><p>自动内存回收： 避免手动内存管理 专注于实现业务逻辑</p><p>保证内存使用的正确性和安全性</p><p>为新对象分配空间</p><p>偷懒了：实在不知道怎么记了 留着以后学的更深入一些再看吧</p><p><img src="/study_photo/149.png" alt="image-20241112174134842"></p><p><img src="/study_photo/150.png" alt="image-20241112174134842"></p><p><img src="/study_photo/151.png" alt="image-20241112174134842"></p><p><img src="/study_photo/152.png" alt="image-20241112174134842"></p><p><img src="/study_photo/153.png" alt="image-20241112174134842"></p><p><img src="/study_photo/154.png" alt="image-20241112174134842"></p><p><img src="/study_photo/155.png" alt="image-20241112174134842"></p><p><img src="/study_photo/156.png" alt="image-20241112174134842"></p><p><img src="/study_photo/157.png" alt="image-20241112174134842"></p><p><img src="/study_photo/158.png" alt="image-20241112174134842"></p><p><img src="/study_photo/159.png" alt="image-20241112174134842"></p><h4 id="四-数据库"><a href="#四-数据库" class="headerlink" title="四.数据库"></a>四.数据库</h4><h5 id="数据库database-sql"><a href="#数据库database-sql" class="headerlink" title="数据库database&#x2F;sql"></a>数据库database&#x2F;sql</h5><p><img src="/study_photo/160.png" alt="image-20241112174134842"></p><p><img src="/study_photo/161.png" alt="image-20241112174134842"></p><p>GORM ： 业务需求驱动开发</p><p><img src="/study_photo/162.png" alt="image-20241112174134842"></p><p><strong>基本用法</strong></p><p><img src="/study_photo/163.png" alt="image-20241112174134842"></p><p><img src="/study_photo/164.png" alt="image-20241112174134842"></p><p><strong>规定</strong></p><p><img src="/study_photo/165.png" alt="image-20241112174134842"></p><p>数据库约束</p><p>Select实现级联删除</p><h4 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h4><h5 id="1-经典排序算法"><a href="#1-经典排序算法" class="headerlink" title="1.经典排序算法"></a>1.经典排序算法</h5><p>为什么要用数据结构和算法：</p><p><img src="/study_photo/img_7.png" alt="image-20241112173840011"></p><p>最快的排序算法：<br>Go ： introsort </p><p>1.19的默认排序算法：如何设计的 生产环境和课本上的排序算法有什么区别</p><h6 id="1-插入排序：（洗牌）"><a href="#1-插入排序：（洗牌）" class="headerlink" title="1.插入排序：（洗牌）"></a>1.插入排序：（洗牌）</h6><p><img src="/study_photo/img_8.png" alt="image-20241112173840011"></p><p>时间复杂度：最好O（n）有序 平均O（n^2） 最坏 （n^2）</p><p>缺点：太慢 优点：最好</p><h6 id="2。快速排序："><a href="#2。快速排序：" class="headerlink" title="2。快速排序："></a>2。快速排序：</h6><p><img src="/study_photo/img_9.png" alt="image-20241112173840011"></p><p>时间复杂度；最好 O（n<em>logn） 平均O（n</em>logn）最坏O（n^2）</p><p>缺点 最坏太慢 优点 平均的挺好</p><h5 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3.堆排序"></a>3.堆排序</h5><p><img src="/study_photo/img_10.png" alt="image-20241112173840011"></p><p><img src="/study_photo/img_11.png" alt="image-20241112173840011"></p><h4 id="网络与部署"><a href="#网络与部署" class="headerlink" title="网络与部署"></a>网络与部署</h4><p>《负载均衡 高并发网关原理与实践》</p><p>协议基础</p><p>协议分析（自学）</p><p>熟悉tcp&#x2F;ip 熟悉计算机网络</p><p>抖音视频 加载出来 会有什么交互（网络是如何交互的）（为什么刷抖音又快又稳）（计算机网络要解决什么问题 发现什么问题）</p><p>应用层：  域名解析（DNS） 图片下载 视频下载（HTTP）评论API&#x2F;HTTP</p><p>网络接入 网络传输</p><p>手机要先访问抖音服务器</p><p><img src="/study_photo/116.png" alt="image-20241116152733233"></p><p>终端（pc pad） 通过 4g &#x2F;wifi 通过有线网络 接入 四大运营商网络 -》 接通抖音的机房（服务器） 还用通过光缆（海底） 接通 美国网络</p><h5 id="网络接入-（路由）"><a href="#网络接入-（路由）" class="headerlink" title="网络接入 （路由）"></a>网络接入 （路由）</h5><p>交换机&#x2F;逻辑交换机&#x2F;网络虚拟化</p><p>路由一定对称吗？</p><p>路由是工作在哪一层协议？</p><p>路由协议（ip层） 本身不是ip层 动态路由协议（传输层协议bgp）（基于tcp udp）可能 不是很简单</p><p>路由改的是ip地址吗？</p><p>不是改ip地址 而是mac地址 路由是为了找到目标ip</p><p>怎么找下一跳（网络中间节点）的MAC 通过 ARP协议 跨网段 不能发送ARP</p><p>同网段可以发送ARP 否则需要一级一级的发送  免费ARP：（）新加入机器（向其中发送免费ARP ： 防止ip冲突 在同一局域网里有两个同一个ip ）</p><p>ARP：本质是查找下一跳MAC 而不是目标请求地址</p><p>ARP 代理： 中间设备抢先应答 （）</p><p><img src="/study_photo/117.png" alt="image-20241116154311845"></p><p><img src="/study_photo/118.png" alt="image-20241116154131510"></p><p>IP协议</p><p>唯一标识</p><p>为什么Mac（2层）（以太网） 地址不能代替ip协议 ： IP协议把MAC地址问题 解决了</p><p>ipv4不够用 怎么解决：如果不支持ipv6 ， 用NAT（原理 内部用户 通过NAT）</p><p><img src="/study_photo/119.png" alt="image-20241116155224812"></p><p>问题2 ： （NAT ip＋端口）一起改变 解决第二个问题</p><h4 id="网络打通视频怎么下载"><a href="#网络打通视频怎么下载" class="headerlink" title="网络打通视频怎么下载"></a>网络打通视频怎么下载</h4><p><img src="/study_photo/120.png" alt="image-20241116155401344"></p><p><img src="/study_photo/121.png" alt="image-20241116155543012"></p><p>也就是服务的封装与拆解</p><p>如何把域名映射到ip （DNS基于UDP协议（端口＋校验））</p><p><img src="/study_photo/122.png" alt="image-20241116155905523"></p><p>避免分片</p><p>丢包丢了UDP也不知道</p><h4 id="TCP连接-三次握手"><a href="#TCP连接-三次握手" class="headerlink" title="TCP连接 三次握手"></a>TCP连接 三次握手</h4><p>TCP连接状态</p><p>如果拔了网线，连接会断吗（没有什么关系）</p><p>keep-alive ：保活机制（不会一定断开在一定场景下）</p><h4 id="TCP传输"><a href="#TCP传输" class="headerlink" title="TCP传输"></a>TCP传输</h4><p><img src="/study_photo/123.png" alt="image-20241116160324196"></p><p>很复杂的协议</p><p>Timewait？（） 状态复杂</p><p>TCP丢包</p><p>滑动窗口</p><p>流量控制</p><h4 id="网络传输-HTTP-HTTP1-1"><a href="#网络传输-HTTP-HTTP1-1" class="headerlink" title="网络传输 HTTP&#x2F;HTTP1.1"></a>网络传输 HTTP&#x2F;HTTP1.1</h4><p><img src="/study_photo/124.png" alt="image-20241116161839691"></p><p>HTTPS 解密 出来仍然是HTTP</p><p>防止中间者偷听一些东西  加密之后中间人听不懂</p><p>SSL&#x2F;TLS握手 非对称加密 对称加密</p><p><img src="/study_photo/125.png" alt="image-20241116162211539"></p><h5 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h5><p>网络提速</p><p>HTTP 2.0 （多路复用） 并行下载 并行访问</p><p>一次性加载了多个图片 （并行请求 一次性发送了）</p><p><img src="/study_photo/126.png" alt="image-20241117194455726"></p><p>多路复用：</p><p><img src="/study_photo/127.png" alt="image-20241117194604452"></p><p>TCP （丢包 其他包等待（对头阻塞））</p><p><img src="/study_photo/128.png" alt="image-20241117194853572"></p><p><strong>协议优化：</strong></p><p>TCP本身协议不可插拔</p><p>UDP（基于UDP扩展）</p><p>kernel （windows mac 安卓 ios ）是否都要去实现呢？</p><p>Google实现在了用户态（方便）</p><p>RTT</p><p>QUIC（实现了UDP的扩展）(弱网优势) （解决了队头堵塞）（优化了HTTp2.0的多路复用）</p><p><strong>路径优化</strong></p><p><img src="/study_photo/129.png" alt="image-20241117195324763"></p><p>服务器集合（数据中心）</p><p>POP接入（核心机房） 边缘机房（靠近用户（上海电信 上海移动……））</p><p><strong>同运营商访问</strong> （访问客户端ip  电信 解析到 电信）</p><p>电信 访问 电信</p><p>移动 访问 移动</p><p>若要使两者跨网访问（丢包率较高）</p><p>路径优化（CDN） 网络提速-静态资源 （边缘机房（缓存）直接从缓存中取出资源 如果找不到 -》 核心机房）</p><p>动态API （播放 &#x2F; 评论接口）（因为信息不一样）</p><p><img src="/study_photo/130.png" alt="image-20241117195852655"></p><p>DSA（路径优化算法） 直连最快</p><p>机房延迟探测 （做成表（通过算法 找到最优路径））</p><h5 id="网络提速的优化之路"><a href="#网络提速的优化之路" class="headerlink" title="网络提速的优化之路"></a>网络提速的优化之路</h5><p>几天就挂了怎么办？？</p><p>抖音稳定性如何调高？</p><p><img src="/study_photo/131.png" alt="image-20241117200255063"></p><p><img src="/study_photo/132.png" alt="image-20241117200401223"></p><p>专线： 内部字节机房-》没有走外部internet（如果走internet 如果从北京 访问 上海 可能会造成中间去到江苏再回到上海这样会很慢 并且丢包等）-》自己拉线连接两个机房（通过交换机等）（这样速度更快）</p><p>b -》 c  外网：机房内部专线以外的网络通过internet连接 （如果专线挂了）需要走外网容灾 微服务可能跨机房</p><p><img src="/study_photo/133.png" alt="image-20241117200824142"></p><p>全局容灾系统 ：  A机房不可用了 （自动容灾） 探测机房b的容量可以承载 a机房的容量</p><p>自动降级&#x2F;容灾</p><p>云到端 SDK告诉端，不要访问，崩了的A机房   云控   什么场景云控控制不到（Web服务器 字节搜索&#x2F;百度搜索 ）</p><p>故障明确</p><p>沟通： 明确是什么业务 什么接口故障</p><p>故障体现在哪？ 其他目标是否访问正常（业务A有故障 接口A有问题 其他的是否有问题？）</p><p>是否是修改导致的异常？（如果是就回退）</p><p>如果你上传导致的错误（找是谁 ）</p><p>先止损 再 排查（debug）</p><p>如何止损</p><p>分段排查</p><p><img src="/study_photo/134.png" alt="image-20241117202312571"></p><h5 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h5><p><img src="/study_photo/135.png" alt="image-20241117202359378"></p><p>最后一个是抓包工具</p><p>误判断 摘除了 好的服务器</p><p>线上debug（p0级别事故）</p><p><img src="/study_photo/136.png" alt="image-20241117202838541"></p><p>抓包：</p><p>快速发包（路由对称）实际路由并不是对称的（找下一跳） 故障预防真的很重要</p><h5 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h5><p><img src="/study_photo/137.png" alt="image-20241117203250586"></p><p><img src="/study_photo/138.png" alt="image-20241117203354461"></p><h4 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h4><p>输入网页到内容加载出来 中间都经历了什么 （TCP握手 SSL 域名解析）</p><p>浏览器抓包</p><p>看第一条请求了什么</p><p><img src="/study_photo/139.png" alt="image-20241118125748346"></p><p>网络卡 还是服务器满 还是什么？</p><p>企业接入：</p><p>域名系统 自建DNS服务器 HTTPS 接入全站加速 四层负载均衡 七层负载均衡</p><p>example公司  Host -》 ip映射</p><p>问题： 流量和负载 名称冲突 时效性（）</p><h5 id="使用域名系统"><a href="#使用域名系统" class="headerlink" title="使用域名系统"></a>使用域名系统</h5><p>使用域名系统 替换hosts</p><p><img src="/study_photo/140.png" alt="image-20241118130222229"></p><p>域名购买  购买二级域名 example.com  域名备案防止从事非法运动</p><p>建设外部网站：</p><p><img src="/study_photo/141.png" alt="image-20241118130420184"></p><p>自建DNS：</p><p>取代云厂商</p><p><img src="/study_photo/142.png" alt="image-20241118130700240"></p><p>先访问 本地DNS服务器 -》 根 -》 顶级 -》权威-》本地缓存</p><h5 id="DNS查询过程"><a href="#DNS查询过程" class="headerlink" title="DNS查询过程"></a>DNS查询过程</h5><p><img src="/study_photo/143.png" alt="image-20241118130854468"></p><h5 id="权威DNS系统架构"><a href="#权威DNS系统架构" class="headerlink" title="权威DNS系统架构"></a>权威DNS系统架构</h5><p><img src="/study_photo/144.png" alt="image-20241118131553232"></p><h5 id="接入HTTPS协议"><a href="#接入HTTPS协议" class="headerlink" title="接入HTTPS协议"></a>接入HTTPS协议</h5><p>HTTP明文传输 被抓去后 信息很容易被暴露出来</p><p>加密算法：</p><p>对称加密： 一份密钥</p><p>非对称加密 ： 公钥和私钥 （公钥加密私钥解密 或者  对调）（锁头和钥匙）</p><p>SSL 通信过程：</p><p><img src="/study_photo/145.png" alt="image-20241118174903171"></p><p>证书链：</p><p>公钥是不是可信的 会不会被劫持？</p><p>数字签名</p><p>外网访问站点一定是一帆风顺的吗：</p><p>1.源站（网站） 容量第 可承载的并发请求数低 容易打跨</p><p>2.报文经过的网络设备越多 出问题概率越大 丢包 劫持</p><p>3.自主选择网络链路长 时延高</p><p>整体看来：就是响应慢 卡顿</p><p>优化：</p><p>增加后端机器扩容 静态内容</p><p>全站加速：</p><p>静态加速：CDN</p><p>cpu访问 （缓存）</p><p>动态加速：</p><p><img src="/study_photo/146.png" alt="image-20241118175913629"></p><p>DCDN原理 ：</p><p>RTT： 用户到核心</p><p>用户到边缘</p><p>边缘到汇聚</p><p>汇聚到核心</p><h5 id="全站加速"><a href="#全站加速" class="headerlink" title="全站加速"></a>全站加速</h5><p><img src="/study_photo/147.png" alt="image-20241118180340066"></p><p><img src="/study_photo/148.png" alt="image-20241118180356658"></p><h4 id="消息队列-kafka"><a href="#消息队列-kafka" class="headerlink" title="消息队列 kafka"></a>消息队列 kafka</h4><p>用户行为： 搜索 点赞 评论 收藏</p><p>使用场景： 搜索服务， 直播服务 订单服务 支付服务</p><p>如何使用Kafka： 创建集群 新增topic 编写生产者逻辑 编写消费之逻辑</p><p><img src="/study_photo/196.png" alt="image-20241125172137241"></p><p><img src="/study_photo/197.png" alt="image-20241125172850441"></p><p>Kafka架构：</p><p>Zookeeper</p><p>Producer 批量发送</p><pre><code>      数据压缩</code></pre><p>Broker 数据存储 消息文件结构</p><p>磁盘结构</p><p>​操作系统：</p><p><img src="/study_photo/198.png" alt="image-20241125174036284"></p><p>顺序写： 提高写入效率</p><p><img src="/study_photo/199.png" alt="image-20241125174650570"></p><p>Broker 偏移量索引文件</p><p>二分查找</p><p><img src="/study_photo/200.png" alt="image-20241125174726467"></p><p>Broker 时间戳索引文件</p><p>传统数据拷贝：</p><p>操作系统层面： 数据的内存拷贝（开销很大）</p><p><img src="/study_photo/201.png" alt="image-20241125175012153"></p><p>Broker零拷贝</p><p><img src="/study_photo/202.png" alt="image-20241125175137912"></p><p>Consumer-消息接收端</p><p><img src="/study_photo/203.png" alt="image-20241125175549378"></p><p>通过手动分配 哪一个Consumer消费哪一个Partition 完全由业务决定</p><p>缺点</p><p>不能自动容灾</p><p>优点：</p><p>快</p><p>自动分配 High-level</p><p><img src="/study_photo/204.png" alt="image-20241125180033073"></p><p><img src="/study_photo/205.png" alt="image-20241125180233648"></p><h4 id="存储与数据库"><a href="#存储与数据库" class="headerlink" title="存储与数据库"></a>存储与数据库</h4><p>数据的持久化</p><p>1.校验数据的合法行</p><p>（名字是否存在） （修改内存 用高效的数据结构组织数据）（写入存储介质 以寿命 性能友好写入硬件）（）</p><p><img src="/study_photo/206.png" alt="image-20241126175430987"></p><p>什么是存储系统？</p><p>一个提供了 读写 控制类接口 能够安全有效的 把 数据持久化的软件 称为 存储系统</p><p>user Medium Memory Network(把原有的单机 升级到分布式系统) 还可能与这些有关</p><p>特点：</p><p>性能敏感 容易受硬件影响  代码既简单又复杂（考虑到多种异常情况）</p><p>存储器层级结构：</p><p>Persistent Memory</p><p>数据怎么从应用到存储介质</p><p><img src="/study_photo/207.png" alt="image-20241126180440273"></p><p>数据拷贝 消耗cpu 如果cpu全部用来拷贝 软件性能就会降低（减少拷贝的使用） Disk（）</p><p>RAID技术： 单机存储怎么做到 高性能&#x2F;高性价比&#x2F;高可靠性</p><p>背景： 大容量磁盘价格》 多块小容量磁盘</p><p>单块磁盘的写入性能 《 多块磁盘的并发写入性能</p><p>RAID0</p><p>多块磁盘的简单组合</p><p>数据条带化存储 调高磁盘带宽</p><p>没有额外的容错设计</p><p>RAID1</p><p>一块磁盘对应一块额外镜像盘</p><p>真是空间利用率50%</p><p>容错能力强</p><p>上面是两个极端</p><p>RAID 0 + 1</p><p>RAID 0 和 RAID 1</p><h5 id="数据库和存储系统不一样吗？"><a href="#数据库和存储系统不一样吗？" class="headerlink" title="数据库和存储系统不一样吗？"></a>数据库和存储系统不一样吗？</h5><p>关系型数据库（是存储系统）</p><p>非关系型数据库</p><p>关系是什么： 关系模型（EFCodd）&#x3D; 集合 反映了事务间的关系</p><p>关系代数 &#x3D; 运算的抽象查询语句</p><p>SQL &#x3D; 一种DSL （方便人类阅读的 关系代数表达式）</p><p>关系型数据库：结构化数据友好 支持事务（ACID）支持复杂的查询语言（sql 全集 子集）</p><p>非关系型数据库（也是存储系统）： 半结构化数据友好 可能支持事务（ACID） 可能支持复杂查询语言</p><p>数据库 vs 经典存储 - 结构化数据管理</p><p><img src="/study_photo/208.png" alt="image-20241126181756913"></p><h5 id="事务能力："><a href="#事务能力：" class="headerlink" title="事务能力："></a>事务能力：</h5><p>要么全做 要么全不做</p><p>数据状态是一致的</p><p>可以隔离多个并发事务 避免影响</p><p>事务一旦提交成功 数据保持持久性</p><h5 id="复杂查询能力："><a href="#复杂查询能力：" class="headerlink" title="复杂查询能力："></a>复杂查询能力：</h5><p>复杂查询： 请查询出以xiao开头 密码提示问题小于10个字的人 并按照性别分组统计人数</p><p><img src="/study_photo/209.png" alt="image-20241126182318775"></p><p>左边灵活简介 右边复杂</p><h4 id="支流产品剖析"><a href="#支流产品剖析" class="headerlink" title="支流产品剖析"></a>支流产品剖析</h4><h5 id="单机存储系统"><a href="#单机存储系统" class="headerlink" title="单机存储系统"></a>单机存储系统</h5><p>单个计算机节点上的存储软件系统 一般不涉及网络交互</p><p>key-value存储 本地文件系统</p><p>本地文件系统</p><p>一切皆文件：</p><p>文件系统管理单元： 文件</p><p>文件系统接口： 文件系统繁多 Ext2 遵循VFS统一抽象接口</p><p>linux 文件系统的两大数据结构 ：Index Node   Directory Entry</p><ol><li>innode 记录文件元数据 如id 大小 权限 磁盘位置</li><li>innode 是一个文件的唯一标识  会被存储到磁盘上</li><li>innode总数在格式化文件系统时就固定了</li></ol><p>​1：1</p><p>1.Directory Entry</p><p>记录文件名 innode指针 层级关系</p><p>dentry时内存结构 与innode 关系时N：1</p><p>key-value存储</p><p><img src="/study_photo/210.png" alt="image-20241126183518576"></p><p>put(k,v) get(k)</p><p>LSM-Tree 某种程度上牺牲读性能 追求写入性能（）</p><p>拳头产品： RocksDB</p><p>分布式存储：</p><p>在单机存储基础上实现了分布式协议，实际大量网络交互</p><p>分布式文件系统  分布式对象存储系统</p><p>HDFS ：</p><p>核心：</p><p>支持海量数据存储（使用普通硬件堆叠）</p><p>高容错性</p><p>弱POSIX语义</p><p>使用普通x86服务器-极高性价比高</p><p>DataNode</p><p>Ceph- （分布式存储）开源分布式存储系统里的【万金油】 里面的算法很好</p><p>一切皆对象；</p><p>数据写入采用主备复制模型</p><p>数据分布模型采用CRUSH算法</p><p>单机数据库</p><p>单个计算机节点上的数据库系统</p><p>事务在单机内执行 通过网络交互实现分布式事务</p><p>关系数据库</p><p>商业产品Oracle</p><p>开源产品 MySQL PostgreSQL</p><p><img src="/study_photo2/1.png" alt="image-20241127101722363"></p><p><img src="/study_photo2/2.png" alt="image-20241127101919309"></p><p>Page  <em>Redo Log</em>  临时文件</p><p>内存 与 磁盘之间的交互</p><p><img src="/study_photo2/3.png" alt="image-20241127102206620"></p><p>非关系型数据库 没有准则 交互方式各不相同</p><p>schema相对灵活</p><p>SQL查询语言的统治地位很重视</p><p><img src="/study_photo2/4.png" alt="image-20241127102716222"></p><p>模糊搜索</p><p><img src="/study_photo2/5.png" alt="image-20241127102924660"></p><p>Query： match 编程语言 好 难度  模糊匹配到小明的帖子 ES天然能够做 模糊搜索 还能自动算出关联程度 传统关系型无法做到这一点</p><p>分布式数据库（引入分布式架构）：</p><p>容量 弹性 性价比 解决单机时代遇到的问题</p><p>解决容量问题：</p><p><img src="/study_photo2/6.png" alt="image-20241127103344147"></p><p>存储池 动态扩缩容</p><p>弹性问题：</p><p><img src="/study_photo2/7.png" alt="image-20241127103713521"></p><p>随着业务的变化而变化 1t如何搬到200g？</p><p>池化！</p><p>性价比问题</p><p><img src="/study_photo2/8.png" alt="image-20241127103908948"></p><p>硬件disk不需要怎么准备 什么不够用Storge Pool 分布式存储池来解决这个问题</p><p>磁盘池化 内存池化（降低成本）</p><p>单写vs多写     从磁盘弹性到内存弹性    分布式事务优化</p><h5 id="新技术演进"><a href="#新技术演进" class="headerlink" title="新技术演进"></a>新技术演进</h5><p>软件架构变更（依赖于操作系统内核） AI增强（智能存储格式转换） 新硬件革命（存储介质变更 计算单元变更 网络硬件变更）</p><p><img src="/study_photo2/9.png" alt="image-20241127104445468"></p><p>cpu中断 使性能降低 与之替换的是用轮询替换</p><p><img src="/study_photo2/10.png" alt="image-20241127104706603"></p><p>数据存储格式的转换 左边是二维表由 多个行与列 行存 列存 （优势 劣势）</p><p>ai决策-》行列混存（动态性强）</p><p><img src="/study_photo2/11.png" alt="image-20241127104909837"></p><p><img src="/study_photo2/12.png" alt="image-20241127105517074"></p><p>硬件反推软件变革</p><h5 id="课后作业-1"><a href="#课后作业-1" class="headerlink" title="课后作业"></a>课后作业</h5><p><img src="/study_photo2/13.png" alt="image-20241127105647523"></p><p>材料引用</p><p><img src="/study_photo2/14.png" alt="image-20241127105742332"></p><h4 id="深入理解RDBMS（关系型数据库）"><a href="#深入理解RDBMS（关系型数据库）" class="headerlink" title="深入理解RDBMS（关系型数据库）"></a>深入理解RDBMS（关系型数据库）</h4><p>存储系统:</p><p>块存储 文件存储 对象存储 key-value存储</p><p>数据库系统：</p><p>大型关系数据库 非关系型数据库</p><p>抖音红包雨</p><p>从抖音账号扣除1个亿</p><p><img src="/study_photo2/15.png" alt="image-20241127110101367"></p><p>事务ACID</p><p><img src="/study_photo2/16.png" alt="image-20241127110324168"></p><p>红包雨与ACID</p><p><img src="/study_photo2/17.png" alt="image-20241127110453611"></p><p>事务要同时成功与同时失败</p><p>账户的钱不能为复数</p><p><img src="/study_photo2/18.png" alt="image-20241127110554045"></p><p>操作一定要是合法的</p><p>隔离性问题 ： 两个操作同时进行 有相互影响的关系</p><p><img src="/study_photo2/19.png" alt="image-20241127110756892"></p><p>刚开始抢了一个亿（成功） 但是服务器挂了</p><p><img src="/study_photo2/20.png" alt="image-20241127111019483"></p><p><strong>高并发</strong></p><p>10亿人 同时抢红包 一定 数据要有处理高并发的能力 每秒处理事务的请求</p><p><strong>高可靠</strong></p><p>在关键时间和结点上 保证后台服务可靠</p><p>从 纸 到 磁盘文件</p><p>第一个数据库 网状数据库（W.Bachman）</p><p>​             Collage</p><p>English   computer  Maths</p><p>多对多</p><p>没有交叉</p><p>结点 网络结构 父节点可以有多个子节点</p><p>层次模型（IBM）</p><p>用树形结构描述实体 与 网状结构相似 但是并不交叉树状</p><p>每个子节点只有一个父节点</p><p>（1对多）</p><p>关系模型（IBM）（EFCodd博士）</p><p><img src="/study_photo2/21.png" alt="image-20241127113215926"></p><h5 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h5><p>一条SQL的一生 ：</p><p>解析SQL（语法解析器） 语法树AST  优化器 Plan Executor（执行器） 写入数据 写入日志</p><p><img src="/study_photo2/22.png" alt="image-20241127150742531"></p><p>分析</p><p><img src="/study_photo2/23.png" alt="image-20241127151110898"></p><p>为什么还要优化器？（Optimizer）  类比于 （高德地图路线优化） 快 慢 红绿灯</p><p>基于规则的优化</p><p>条件简化……</p><p>Scan优化</p><p><img src="/study_photo2/24.png" alt="image-20241127151708954"></p><p>基于代价优化：</p><p>时间是代价 最少时间到目的地</p><p>io cpu NET MEM也是代价</p><p>火山模型：</p><p><img src="/study_photo2/25.png" alt="image-20241127152543557"></p><p>向量化：</p><p>每次返回是一批数据 而不是一行数据</p><p>优点：</p><p>函数调用次数降低为1&#x2F;N</p><p>CPU cache命中率更高</p><p>可以利用CPU提供SIMD机制 一次加法（可以操作多个数据）</p><p>编译执行：</p><h5 id="存储引擎-InnoDB"><a href="#存储引擎-InnoDB" class="headerlink" title="存储引擎-InnoDB"></a>存储引擎-InnoDB</h5><p>内存态（做一点内存缓存）</p><p><img src="/study_photo2/26.png" alt="image-20241127153304028"></p><p>存储引擎-Buffer Pool</p><p>instance0</p><p>instance1</p><p>HashMap管理</p><p>LRU 算法</p><p>保留最近最常使用的保存在内存 其他的 淘汰</p><p>内存放不下？ 放磁盘  从磁盘访问数据</p><p><img src="/study_photo2/27.png" alt="image-20241127153706131"></p><p>存储引擎-Page</p><p>B+Tree索引 B树的扩展（二分查找树）</p><p><img src="/study_photo2/28.png" alt="image-20241127154133896"></p><h5 id="事务引擎："><a href="#事务引擎：" class="headerlink" title="事务引擎："></a>事务引擎：</h5><p>原子性   与   Undo Log</p><p>同步失败或成功</p><p>如何将数据库回退到修改之前的状态？</p><p>Undo日志：</p><p>逻辑日志 进行事务回滚 保证原子性</p><p><img src="/study_photo2/29.png" alt="image-20241127154501380"></p><p>isolation 与 锁</p><p>如果两个操作同时发生 发生冲突怎么办</p><p>锁机制</p><p>Share Lock 共享锁 读读 两个人都有共享锁</p><p>Exclusice Lock 写锁 读写 一个有写锁另一个不能有</p><p>读写   -》  MVCC数据的多版本</p><p><img src="/study_photo2/30.png" alt="image-20241127154917696"></p><p>一致性：</p><p>对数据的修改 永久保存</p><p>方案一 事务提交前页面写盘</p><p>随机io 写放大</p><p>方案二 WAL</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Go语法学习</title>
      <link href="/archives/Go_Program.html"/>
      <url>/archives/Go_Program.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">whatAmI := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;I&#x27;m a bool&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;I&#x27;m an int&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Don&#x27;t know type %T\n&quot;</span>, t)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">whatAmI(<span class="literal">true</span>)</span><br><span class="line">whatAmI(<span class="number">1</span>)</span><br><span class="line">whatAmI(<span class="string">&quot;hey&quot;</span>)</span><br></pre></td></tr></table></figure><p>这是一个函数whatAmI，它接受一个interface{}类型的参数。interface{}是 Go 语言中的一种空接口，可以存储任何类型的值。<br>这个switch语句实际上是一个类型switch，它检查接口变量i的具体类型，而不是它的值。根据i的类型，switch将执行不同的case分支。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If you specify the index with `:`, the elements in</span></span><br><span class="line"><span class="comment">// between will be zeroed.</span></span><br><span class="line">b = [...]<span class="type">int</span>&#123;<span class="number">100</span>, <span class="number">3</span>: <span class="number">400</span>, <span class="number">500</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;idx:&quot;</span>, b)</span><br></pre></td></tr></table></figure><p>3: 400 指定了下标为 3 的位置的值是 400。<br>这意味着索引 1 和 2 的值将被初始化为 0（因为:操作符指定了一个新的下标，并初始化之前未指定的下标对应的元素为 0）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="type">string</span></span><br><span class="line">fmt.Println(<span class="string">&quot;uninit:&quot;</span>, s, s == <span class="literal">nil</span>, <span class="built_in">len</span>(s) == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>uninit: [] true true</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">twoD := <span class="built_in">make</span>([][]<span class="type">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">innerLen := i + <span class="number">1</span></span><br><span class="line">twoD[i] = <span class="built_in">make</span>([]<span class="type">int</span>, innerLen)</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; innerLen; j++ &#123;</span><br><span class="line">twoD[i][j] = i + j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;2d: &quot;</span>, twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2d:  [[0] [1 2] [2 3 4]]</p><p>12.3日</p><p>map操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   m[<span class="string">&quot;k1&quot;</span>] = <span class="number">7</span></span><br><span class="line">m[<span class="string">&quot;k2&quot;</span>] = <span class="number">13</span></span><br><span class="line">fmt.Println(<span class="string">&quot;map:&quot;</span>, m)</span><br><span class="line">fmt.Println(<span class="string">&quot;len:&quot;</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="comment">//clear(m)</span></span><br><span class="line">val, prs := m[<span class="string">&quot;k2&quot;</span>] <span class="comment">//k2的值， 一个是判断k2是否存在于m中的bool值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;val：&quot;</span>, val, <span class="string">&quot;prs:&quot;</span>, prs)</span><br><span class="line">n := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;foo&quot;</span>: <span class="number">1</span>, <span class="string">&quot;bar&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;&quot;</span>, n)</span><br><span class="line"><span class="keyword">if</span> maps.Equal(n, n2) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;n == n2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用变长参数函数（variadic function），即可以接收任意数量参数的函数。<br>这里的 … 标记表示 nums 参数是可变长的，可以接收零个或多个 int 类型的参数</p><p>nums 被当作切片使用，可以进行切片相关的操作，例如使用 len(nums) 获取长度，或者用 range 遍历切片元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(nums ...<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Print(nums, <span class="string">&quot; &quot;</span>)</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"><span class="comment">// Within the function, the type of `nums` is</span></span><br><span class="line"><span class="comment">// equivalent to `[]int`. We can call `len(nums)`,</span></span><br><span class="line"><span class="comment">// iterate over it with `range`, etc.</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">total += num</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(total)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Variadic functions can be called in the usual way</span></span><br><span class="line"><span class="comment">// with individual arguments.</span></span><br><span class="line">sum(<span class="number">1</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you already have multiple args in a slice,</span></span><br><span class="line"><span class="comment">// apply them to a variadic function using</span></span><br><span class="line"><span class="comment">// `func(slice...)` like this.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种调用nums的方法使用 nums 切片，通过 sum(nums...) 的方式将切片中的每个元素作为单独的参数传递给 sum 函数。</span></span><br><span class="line">nums := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">sum(nums...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误示范</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">allArticles</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">articles := Articles&#123;</span><br><span class="line">Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">Desc:    <span class="string">&quot;Test Descrption&quot;</span>,</span><br><span class="line">Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;endpoint hit: allArticles&quot;</span>)</span><br><span class="line">json.NewEncoder(w).Encode(articles)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的问题是 Articles 类型实际上是一个切片（[]Article），而你试图将一个单独的 Article 结构体实例赋值给 articles 变量。根据 Go 语言的语法，Articles 类型需要的是一个 Article 类型的切片。</p><p>要解决这个问题，你需要将 Article 实例放入一个切片中。可以将你的代码修改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">articles := Articles&#123;</span><br><span class="line">&#123;</span><br><span class="line">Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">Desc:    <span class="string">&quot;Test Descrption&quot;</span>,</span><br><span class="line">Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">CopyInsert</span><br><span class="line">这里的修改是把 Article 结构体实例用 &#123;&#125; 包围起来，表示这是一个切片中的一个元素。</span><br><span class="line"></span><br><span class="line">最终的 allArticles 函数应如下所示：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Article的实例</span></span><br><span class="line">    newArticle := Article&#123;</span><br><span class="line">        Title:   <span class="string">&quot;Test Title&quot;</span>,</span><br><span class="line">        Desc:    <span class="string">&quot;Test Description&quot;</span>,</span><br><span class="line">        Content: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Articles切片并添加上面的实例</span></span><br><span class="line">    articles := Articles&#123;newArticle&#125;</span><br></pre></td></tr></table></figure><hr><p>go fmt </p><p>包的导入者将使用名称来引用其内容，因此包中的导出名称可以使用该事实来避免重复。 （不要使用 import . 表示法，它可以简化必须在正在测试的包外部运行的测试，但应该避免。）<br>例如，bufio 包中的缓冲读取器类型称为 Reader，而不是 BufReader，因为用户将其视为 bufio.Reader，这是一个清晰、简洁的名称。此外，由于导入的实体始终使用其包名称进行寻址，<br>因此 bufio.Reader 不会与 io.Reader 冲突。类似地，<br>创建ring.Ring新实例的函数（Go中构造函数的定义）通常被称为NewRing，但由于Ring是包导出的唯一类型，并且由于包被称为ring，所以它是称为“New”，包的客户端将其视为“ring.New”。使用包结构来帮助您选择好的名称。</p><p>另一个简短的例子是once.Do; Once.Do(setup) 读起来很好，<br>并且不会通过编写 Once.DoOrWaitUntilDone(setup) 来改进。长名称不会自动使内容更具可读性。有用的文档注释通常比超长的名称更有价值。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSeq</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    i := <span class="number">0</span> <span class="comment">// i 是一个局部变量，用于 intSeq 函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="comment">// 返回一个匿名函数，这个函数可以访问 intSeq 函数的局部变量 i。</span></span><br><span class="line">        i++    <span class="comment">// 每次调用这个匿名函数时，i 的值都会增加。</span></span><br><span class="line">        <span class="keyword">return</span> i <span class="comment">// 返回增加后的 i 的值。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果 ：<br>1<br>2<br>3<br>1</p><p>这是因为闭包允许匿名函数捕获并记住 i 变量的状态。<br>这就是闭包的 “魔力” 所在，即使外部函数已经返回，内部函数仍然能够访问和修改外部函数的变量。</p><p>stack :&#x3D; []rune{} 与 make :&#x3D; []string{} 的区别：<br>stack :&#x3D; []rune{}：这段代码创建了一个 rune 类型的切片（空切片）。rune 是 Go 中专门用来表示单个字符的类型，适用于你处理字符（尤其是 Unicode 字符）时，能够确保每个元素是一个完整的 Unicode 字符。</p><p>make :&#x3D; []string{}：这段代码创建了一个 string 类型的切片。每个元素是一个字符串，字符串通常用于表示一系列字符构成的文本数据。</p><hr><p>在 Go 程序中，通过 <code>os.Args</code> 可以访问命令行参数，而 <code>go run main.go file1.txt file2.txt</code> 的执行过程如下：</p><hr><p>为什么·go语言 &gt; go run main.go file1.txt file2.txt 在这里执行之后可以读取到文件1 2</p><h3 id="1-命令行参数的解析"><a href="#1-命令行参数的解析" class="headerlink" title="1. 命令行参数的解析"></a><strong>1. 命令行参数的解析</strong></h3><ul><li><p><strong>命令：</strong> <code>go run main.go file1.txt file2.txt</code></p><ul><li><code>go run</code> 会编译并执行 <code>main.go</code>。</li><li>命令行中，<code>main.go</code> 后面的 <code>file1.txt</code> 和 <code>file2.txt</code> 被传递给程序作为命令行参数。</li></ul></li><li><p>在程序中，<code>os.Args</code> 是一个字符串切片（<code>[]string</code>），包含了命令行中的参数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.Args[<span class="number">0</span>] <span class="comment">// 包含程序的名字，如 &quot;main.go&quot;</span></span><br><span class="line">os.Args[<span class="number">1</span>] <span class="comment">// 第一个参数 &quot;file1.txt&quot;</span></span><br><span class="line">os.Args[<span class="number">2</span>] <span class="comment">// 第二个参数 &quot;file2.txt&quot;</span></span><br></pre></td></tr></table></figure><p><strong>例子：</strong><br>假如命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>则：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(os.Args) </span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[main file1.txt file2.txt]</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-打开文件进行读取"><a href="#2-打开文件进行读取" class="headerlink" title="2. 打开文件进行读取"></a><strong>2. 打开文件进行读取</strong></h3><p>你的代码解析命令行参数后，会尝试打开这些文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files := os.Args[<span class="number">1</span>:] <span class="comment">// 获取命令行参数列表（除程序本身外的部分）</span></span><br></pre></td></tr></table></figure><ul><li><code>files</code> 现在是一个切片：<code>[&quot;file1.txt&quot;, &quot;file2.txt&quot;]</code>。</li></ul><p>然后通过循环处理每个文件：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> files &#123;</span><br><span class="line">    f, err := os.Open(arg) <span class="comment">// 打开文件</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">&quot;dup2: %v\n&quot;</span>, err) <span class="comment">// 错误处理</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close() <span class="comment">// 确保文件被正确关闭</span></span><br><span class="line">    countLines(f, counts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中：</p><ol><li><p>**<code>os.Open(arg)</code>**：</p><ul><li>打开文件（如 <code>file1.txt</code>），返回一个文件指针 <code>*os.File</code>。</li><li>如果文件打开失败（文件不存在或权限问题），返回错误并跳过。</li></ul></li><li><p>**<code>countLines(f, counts)</code>**：</p><ul><li>将文件指针传递给 <code>countLines</code>，扫描文件的内容并统计每行的出现次数。</li></ul></li></ol><hr><h3 id="3-执行结果的输出"><a href="#3-执行结果的输出" class="headerlink" title="3. 执行结果的输出"></a><strong>3. 执行结果的输出</strong></h3><p>统计完成后，程序会输出所有出现次数大于 1 的行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line, n := <span class="keyword">range</span> counts &#123;</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%d\t%s\n&quot;</span>, n, line)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这会将文件中所有重复的行及其出现次数打印到控制台。</p><hr><h3 id="4-为什么能够读取多个文件"><a href="#4-为什么能够读取多个文件" class="headerlink" title="4. 为什么能够读取多个文件"></a><strong>4. 为什么能够读取多个文件</strong></h3><p>这是因为你的代码通过 <code>for _, arg := files</code> 遍历了 <code>os.Args[1:]</code> 中的所有文件，并依次处理它们。程序对每个文件重复以下流程：</p><ol><li>打开文件。</li><li>按行扫描内容，统计出现次数。</li><li>将结果合并到 <code>counts</code> 映射中。</li></ol><p>这样，即使你提供多个文件，程序依然可以逐个读取并处理它们。</p><hr><h3 id="运行流程示例"><a href="#运行流程示例" class="headerlink" title="运行流程示例"></a><strong>运行流程示例</strong></h3><p>假设有以下文件内容：</p><h4 id="file1-txt"><a href="#file1-txt" class="headerlink" title="file1.txt:"></a><code>file1.txt</code>:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><h4 id="file2-txt"><a href="#file2-txt" class="headerlink" title="file2.txt:"></a><code>file2.txt</code>:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">world</span><br><span class="line">hello</span><br><span class="line">go</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>程序会：</p><ol><li>读取 <code>file1.txt</code>：<ul><li>统计结果：<code>&#123;&quot;hello&quot;: 2, &quot;world&quot;: 1&#125;</code>。</li></ul></li><li>读取 <code>file2.txt</code>，继续更新 <code>counts</code>：<ul><li>最终统计结果：<code>&#123;&quot;hello&quot;: 3, &quot;world&quot;: 2, &quot;go&quot;: 1&#125;</code>。</li></ul></li><li>打印重复行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3   hello</span><br><span class="line">2   world</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>你可以读取多个文件是因为程序通过 <code>os.Args</code> 获取了命令行中的文件名列表，并通过循环逐个打开和读取文件的内容。这种设计使得你的程序能够动态处理任意数量的文件，而无需修改代码。</p><hr><h3 id="12-14-日-更考完4级"><a href="#12-14-日-更考完4级" class="headerlink" title="12.14 日 更考完4级"></a>12.14 日 更考完4级</h3><h4 id="一-Errors"><a href="#一-Errors" class="headerlink" title="一.Errors"></a>一.Errors</h4><ol><li>“errors” 包  使用给定的错误消息构造一个基本错误值。</li></ol><p>errors.New(“can’t work with 42”)</p><p>nil 表示没有错误</p><ol start="2"><li>哨兵错误是一个预先声明的变量，用于表示特定的错误情况。</li></ol><p>var ErrOutOfTea &#x3D; fmt.Errorf(“no more tea available”)<br>var ErrPower &#x3D; fmt.Errorf(“can’t boil water”)</p><ol start="3"><li>更高级别的错误来包装错误以添加上下文</li></ol><p>最简单的方法是使用 fmt.Errorf 中的 %w 动词。包装错误创建一个逻辑链（A 包装 B，B 包装 C 等），可以使用 error.Is 和 error.As 等函数进行查询。</p><p>return fmt.Errorf(“making tea: %w”, ErrPower)</p><ol start="4"><li>if 行中使用内联错误检查</li></ol><p>if r, e :&#x3D; f(i); e !&#x3D; nil {<br>fmt.Println(“f failed:”, e)<br>} else {<br>fmt.Println(“f worked:”, r)<br>}</p><ol start="5"><li>error.Is 检查给定错误（或其链中的任何错误）是否与特定错误值匹配。</li></ol><p>if errors.Is(err, ErrOutOfTea) {<br>fmt.Println(“We should buy new tea!”)<br>} else if errors.Is(err, ErrPower) {<br>fmt.Println(“Now it is dark.”)<br>} else {<br>fmt.Printf(“unknown error: %s\n”, err)<br>}</p><p>将err和我们自定义的哨兵错误或者特定错误做对比</p><p>二.自定义错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> argError <span class="keyword">struct</span> &#123;</span><br><span class="line">    arg     <span class="type">int</span></span><br><span class="line">    message <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *argError)</span></span> Error() <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d - %s&quot;</span>, e.arg, e.message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Error 方法并没有直接调用，但 &amp;argError{arg, “can’t work with it”} 被返回为 error 类型时，Error 方法已经在幕后实现了对错误消息的封装。</p><p>error.As 是errors.Is 的更高级版本。它检查给定错误（或其链中的任何错误）是否与特定错误类型匹配，并转换为该类型的值，返回 true。如果没有匹配，则返回 false。</p><h4 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h4><p>轻量级的执行线程</p><p>go f(s)。这个新的 goroutine 将与调用的 goroutine 同时执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(from <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">        fmt.Println(from, <span class="string">&quot;:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">go</span> f(<span class="string">&quot;goroutine&quot;</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>启动一个 goroutine 来进行匿名函数调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(msg <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(msg)</span><br><span class="line">    &#125;(<span class="string">&quot;going&quot;</span>)</span><br></pre></td></tr></table></figure><p>goroutine 是由 Go 运行时同时运行的。</p><h4 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h4><p>通道是连接并发 goroutine 的管道。您可以将值从一个 Goroutine 发送到通道，并将这些值接收到另一个 Goroutine。</p><p>messages :&#x3D; make(chan string)</p><p>通道 &lt;- 语法将值发送到通道</p><p>go func() { messages &lt;- “ping” }()</p><p>msg :&#x3D; &lt;-messages</p><p>&lt;-channel 语法从通道接收值。在这里，我们将收到上面发送的“ping”消息并将其打印出来。</p><p>发送和接收会阻塞，直到发送者和接收者都准备好为止。此属性允许我们在程序结束时等待“ping”消息，而无需使用任何其他同步。</p><p>通道缓冲：</p><p>messages :&#x3D; make(chan string, 2) 字符串通道，最多缓冲 2 个值 因此我们可以将这些值发送到通道中，而无需相应的并发接收。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> messages := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">messages &lt;- <span class="string">&quot;buffered&quot;</span></span><br><span class="line">messages &lt;- <span class="string">&quot;channel&quot;</span></span><br><span class="line"></span><br><span class="line"> fmt.Println(&lt;-messages)</span><br><span class="line"> fmt.Println(&lt;-messages)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="断言和switch用法"><a href="#断言和switch用法" class="headerlink" title="断言和switch用法:"></a>断言和switch用法:</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">t = functionOfSomeType()</span><br><span class="line"><span class="keyword">switch</span> t := t.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;unexpected type %T\n&quot;</span>, t)     <span class="comment">// %T prints whatever type t has</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;boolean %t\n&quot;</span>, t)             <span class="comment">// t has type bool</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;integer %d\n&quot;</span>, t)             <span class="comment">// t has type int</span></span><br><span class="line"><span class="keyword">case</span> *<span class="type">bool</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;pointer to boolean %t\n&quot;</span>, *t) <span class="comment">// t has type *bool</span></span><br><span class="line"><span class="keyword">case</span> *<span class="type">int</span>:</span><br><span class="line">    fmt.Printf(<span class="string">&quot;pointer to integer %d\n&quot;</span>, *t) <span class="comment">// t has type *int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型断言用于从接口类型值中提取其底层的具体类型。如果断言成功，程序可以安全地将该接口值转换为目标类型并使用。</p><p>value, ok :&#x3D; x.(T)</p><p>x 是一个接口类型的变量。<br>T 是目标类型（可以是具体类型或其他接口类型）。<br>如果 x 的动态类型是 T：<br>value 是 x 转换为 T 后的值。<br>ok 为 true。<br>如果 x 的动态类型不是 T：<br>value 是 T 的零值。<br>ok 为 false，表示断言失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125; = <span class="number">42</span> <span class="comment">// 空接口存储了一个 int 值</span></span><br><span class="line"></span><br><span class="line">value, ok := x.(<span class="type">int</span>) <span class="comment">// 断言 x 是 int 类型</span></span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;x is an int, value: %d\n&quot;</span>, value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;x is not an int&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空interface<br>空interface(interface{})不包含任何的method，正因为如此，所有的类型都实现了空interface。空interface对于描述起不到任何的作用(因为它不包含任何的method），但是空interface在我们需要存储任意类型的数值的时候相当有用，因为它可以存储任意类型的数值。它有点类似于C语言的void*类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义a为空接口</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">5</span></span><br><span class="line">s := <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="comment">// a可以存储任意类型的数值</span></span><br><span class="line">a = i</span><br><span class="line">a = s</span><br></pre></td></tr></table></figure><p>一个函数把interface{}作为参数，那么他可以接受任意类型的值作为参数，如果一个函数返回interface{},那么也就可以返回任意类型的值。是不是很有用啊！</p><p>Go并发</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>7_days_golang学习</title>
      <link href="/archives/Goalng_Framework.html"/>
      <url>/archives/Goalng_Framework.html</url>
      
        <content type="html"><![CDATA[<h2 id="通过学习项目-7-days-golang搭建各种自己的框架了解一些网络工作原理和知识"><a href="#通过学习项目-7-days-golang搭建各种自己的框架了解一些网络工作原理和知识" class="headerlink" title="通过学习项目 7_days_golang搭建各种自己的框架了解一些网络工作原理和知识"></a>通过学习项目 7_days_golang搭建各种自己的框架了解一些网络工作原理和知识</h2><p>学习geektutu源代码：<a href="https://github.com/geektutu/7days-golang">https://github.com/geektutu/7days-golang</a></p><p>跟着学习的项目代码已经放在: <a href="https://github.com/Whuichenggong/Study_Go">https://github.com/Whuichenggong/Study_Go</a></p><h3 id="1-gee-go"><a href="#1-gee-go" class="headerlink" title="1.gee.go"></a>1.gee.go</h3><p>关键代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义了类型HandlerFunc，这是提供给框架用户的，用来定义路由映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Engine中，添加了一张路由映射表router</span></span><br><span class="line"><span class="comment">// key 由请求方法和静态路由地址构成，例如GET-/、GET-/hello、POST-/hello</span></span><br><span class="line"><span class="comment">// 如果请求方法不同,可以映射不同的处理方法(Handler)，value 是用户映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">key := method + pattern</span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户调用(*Engine).GET()方法时，会将路由和处理方法注册到映射表 router 中，(*Engine).Run()方法，是 ListenAndServe 的包装。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine实现的 ServeHTTP 方法的作用就是，解析请求的路径，查找路由映射表，如果查到，就执行注册的处理方法。如果查不到，就返回 404 NOT FOUND 。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;404 Not Found: %s\n&quot;</span>, req.URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-go-mod代码"><a href="#2-go-mod代码" class="headerlink" title="2.go.mod代码"></a>2.go.mod代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module github.com/Whuichenggong</span><br><span class="line"></span><br><span class="line">go 1.22.1</span><br><span class="line"></span><br><span class="line">require gee v0.0.0</span><br><span class="line"></span><br><span class="line">replace gee =&gt; ./gee</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>replace gee &#x3D;&gt; .&#x2F;gee</p><p>这是一个替换指令，它告诉 Go 工具链用本地相对路径 .&#x2F;gee 中的 gee 包替换远程需要的 gee 包。<br>这意味着，尽管 require 指令可能指向一个特定的远程版本或分支，<br>这个 replace 指令实际上将使用当前目录下的 gee 文件夹中的代码。</p><h4 id="2-1初始化-Go-模块："><a href="#2-1初始化-Go-模块：" class="headerlink" title="2.1初始化 Go 模块："></a>2.1初始化 Go 模块：</h4><p>如果你的项目还没有被初始化为 Go 模块，你需要先在项目的根目录下运行以下命令来初始化它：</p><p><code>go mod init &lt;module-name&gt;</code></p><p>替换 <module-name> 为你的模块名称。例如，如果你的项目名称是 example，你会运行：</p><p><code>go mod init example</code></p><h3 id="3-main-go"><a href="#3-main-go" class="headerlink" title="3.main.go"></a>3.main.go</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net/http&quot;</span><br><span class="line"></span><br><span class="line">&quot;gee&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">r := gee.New()</span><br><span class="line">r.GET(&quot;/&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;URL.Path = %q\n&quot;, req.URL.Path)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(&quot;/hello&quot;, func(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">for k, v := range req.Header &#123;</span><br><span class="line">fmt.Fprintf(w, &quot;Header[%q] = %q\n&quot;, k, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Run(&quot;:9999&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="新增："><a href="#新增：" class="headerlink" title="新增："></a>新增：</h5><p>测试 POST 请求<br>启动服务器后，测试 POST 请求可以使用以下工具：</p><p>方法 1: 使用 curl<br>执行以下命令发送 POST 请求：</p><p>curl -X POST <a href="http://localhost:8080/submit">http://localhost:8080/submit</a></p><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">key := method + pattern</span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.Method + req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">http.NotFound(w, req)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>func main() {<br>engine :&#x3D; New()</p><pre><code>// 注册一个 POST 路由engine.POST(&quot;/submit&quot;, func(w http.ResponseWriter, req *http.Request) &#123;    // 读取请求体数据    body, err := ioutil.ReadAll(req.Body)    if err != nil &#123;        http.Error(w, &quot;Failed to read request body&quot;, http.StatusInternalServerError)        return    &#125;    // 响应请求体内容    fmt.Fprintf(w, &quot;Received: %s&quot;, string(body))&#125;)// 启动服务器engine.Run(&quot;:8080&quot;)</code></pre><p>}<br>测试：<br>启动程序后，用 curl 发送 POST 请求并附带数据：</p><p>b<br>curl -X POST -d “data&#x3D;HelloWorld” <a href="http://localhost:8080/submit">http://localhost:8080/submit</a><br>服务器返回：</p><p>kotlin</p><p>Received: data&#x3D;HelloWorld</p><h4 id="ServeHTTP好像有点问题"><a href="#ServeHTTP好像有点问题" class="headerlink" title="ServeHTTP好像有点问题"></a>ServeHTTP好像有点问题</h4><p>main.go<br>附带了对代码的理解</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先定义了类型HandlerFunc，这是提供给框架用户的，用来定义路由映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(http.ResponseWriter, *http.Request)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Engine中，添加了一张路由映射表router</span></span><br><span class="line"><span class="comment">// key 由请求方法和静态路由地址构成，例如GET-/、GET-/hello、POST-/hello</span></span><br><span class="line"><span class="comment">// 如果请求方法不同,可以映射不同的处理方法(Handler)，value 是用户映射的处理方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码的作用将HTTP请求的路由和对应的处理函数注册到路由表中的核心方法</span></span><br><span class="line"><span class="comment">// pattern路由路径</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line"><span class="comment">//将HTTp方法和路径拼接成唯一一个键 作为路由表的router的键</span></span><br><span class="line">key := method + pattern</span><br><span class="line"><span class="comment">//将处理函数 handler 存入路由表中，关联到对应的路由键。</span></span><br><span class="line">engine.router[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户调用 addRoute(&quot;GET&quot;, &quot;/home&quot;, someHandlerFunc) 在 engine.router 映射表中，会存储一个键值对：</span></span><br><span class="line"><span class="comment">// 调用engine.GET(&quot;/home&quot;, someHandlerFunc)： 实际是 等价 engine.addRoute(&quot;GET&quot;, &quot;/home&quot;, someHandlerFunc)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码隐藏了调用ServeHTTP</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine实现的 ServeHTTP 方法的作用就是，解析请求的路径，查找路由映射表，如果查到，就执行注册的处理方法。如果查不到，就返回 404 NOT FOUND 。</span></span><br><span class="line"><span class="comment">// 不需要显式调用 ServeHTTP</span></span><br><span class="line"><span class="comment">// 在 Go 的 HTTP 框架中，ServeHTTP 是 http.Handler 接口的约定方法。当你把 Engine 作为服务器的处理器传递时，它会被 ListenAndServe 自动调用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">key := req.URL.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := engine.router[key]; ok &#123;</span><br><span class="line">handler(w, req)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;404 Not Found: %s\n&quot;</span>, req.URL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>在 ServeHTTP 中，当前只从 req.URL.Path 获取路径，<br>而没有结合 req.Method，会导致不同的 HTTP 方法（如 GET 和 POST）冲突或无法正确匹配。<br>addRoute 方法仅使用了路径（pattern）和方法（method）拼接为路由键，例如：GET&#x2F;home。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">    key := method + <span class="string">&quot;-&quot;</span> + pattern <span class="comment">// 区分 HTTP 方法和路径</span></span><br><span class="line">    engine.router[key] = handler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改的这段代码<br>原来只使用了路径（req.URL.Path）作为路由键。例如：</p><p>请求路径 &#x2F;hello 的键为 &#x2F;hello。<br>不区分 GET &#x2F;hello 和 POST &#x2F;hello，它们会共用同一个路由键 &#x2F;hello。<br>建议的代码<br>使用 HTTP 方法和路径 拼接成路由键。例如：</p><p>GET &#x2F;hello 的键为 GET-&#x2F;hello。<br>POST &#x2F;hello 的键为 POST-&#x2F;hello。<br>这样可以区分不同方法对应的路由处理函数。</p><p>与gin框架启动很相似</p><hr><p>对Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter。<br>但是这两个对象提供的接口粒度太细，比如我们要构造一个完整的响应，需要考虑消息头(Header)和消息体(Body)，而 Header 包含了状态码(StatusCode)，<br>消息类型(ContentType)等几乎每次请求都需要设置的信息。因此，如果不进行有效的封装， 那么框架的用户将需要写大量重复，繁杂的代码<br>且容易出错。针对常用场景，能够高效地构造出 HTTP 响应是一个好的框架必须考虑的点。</p><p>代码要学会封装 否则代码整洁度看起来还是会差很多的 对于别人理解一会更方便</p><p>为什么要添加context  对于框架来说，还需要支撑额外的功能。例如，将来解析动态路由&#x2F;hello&#x2F;:name，参数:name的值放在哪呢？<br>再比如，框架需要支持中间件，那中间件产生的信息放在哪呢？</p><p>contxet保留了你想寻找的一些东西<br>拓展性和复杂性留在内部<br>对外简化了接口。</p><p>Context 的作用是为每个 HTTP 请求提供一个上下文对象，<br>方便操作请求和响应，并提供了一些简化开发的工具方法。<br>通过 Context 统一管理 HTTP 请求和响应的逻辑。</p><p>可以把 Context 看作是：</p><p>一个请求的容器： 它封装了与 HTTP 请求相关的所有信息，并提供了一些方法让你更轻松地操作这些信息。</p><p>开发者和 HTTP 请求的桥梁： 开发者通过 Context 与客户端通信，包括读取请求信息和发送响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(c *Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// 获取查询参数</span></span><br><span class="line">name := c.Query(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 JSON 响应</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">        c.JSON(http.StatusOK, H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello &quot;</span> + name&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        c.String(http.StatusBadRequest, <span class="string">&quot;Name is required&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>深入框架原理：<br>阅读 Gin、Echo 等框架的源码，了解它们如何设计和扩展 Context。</li></ol><p>尝试扩展功能：<br>在 Context 上添加自定义方法，比如记录日志、追踪请求 ID 等。</p><ol start="2"><li>http.ResponseWriter 和 *http.Request 的实际意义<br>http.ResponseWriter</li></ol><p>作用：<br>代表服务端用来写入 HTTP 响应的接口。开发者通过它向客户端返回数据（如响应头、响应状态码、响应体等）。<br>实际应用：<br>在服务端，http.ResponseWriter 将生成的 HTTP 响应数据写入 TCP 连接的输出流，客户端会接收到这些数据并解析呈现。<br>*http.Request</p><p>作用：<br>表示客户端发来的 HTTP 请求，包含了所有请求相关的信息（如 URL、方法、头部、表单数据、Cookie、Body 等）。<br>实际应用：<br>服务端根据 *http.Request 的内容（路径、方法等），判断客户端的需求并生成相应的响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置响应头</span></span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置状态码</span></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入响应体</span></span><br><span class="line">fmt.Fprintf(w, <span class="string">&quot;Hello, %s!\n&quot;</span>, req.URL.Query().Get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handler)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端请求示例：</p><p>浏览器访问 <a href="http://localhost:8080/?name=zhaozhonghe">http://localhost:8080/?name=zhaozhonghe</a></p><p>服务端响应：</p><p>HTTP&#x2F;1.1 200 OK &#x2F;&#x2F;设置的状态码 200<br>Content-Type: text&#x2F;plain &#x2F;&#x2F;设置的请求头 响应过来了 并且返回到了 客户端页面<br>Content-Length: 12</p><p>Hello, zhaozhonghe! &#x2F;&#x2F; 读取 HTTP 请求 将数据写入响应体，通过 w 发送给客户端。</p><hr><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="1-添加context"><a href="#1-添加context" class="headerlink" title="1.添加context"></a>1.添加context</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对Web服务来说，无非是根据请求*http.Request，构造响应http.ResponseWriter</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给map[string]interface&#123;&#125;起了一个别名gee.H，构建JSON数据时，显得更简洁。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> H <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context目前只包含了http.ResponseWriter和*http.Request，另外提供了对 Method 和 Path 这两个常用属性的直接访问。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">struct</span> &#123;</span><br><span class="line">Writer http.ResponseWriter</span><br><span class="line">Req    *http.Request</span><br><span class="line"></span><br><span class="line">Path   <span class="type">string</span></span><br><span class="line">Method <span class="type">string</span></span><br><span class="line"></span><br><span class="line">StatusCode <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newContext</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> *Context &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Context&#123;</span><br><span class="line">Writer: w,</span><br><span class="line">Req:    req,</span><br><span class="line">Path:   req.URL.Path,</span><br><span class="line">Method: req.Method,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供了访问Query和PostForm参数的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> PostForm(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Req.FormValue(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Query(key <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Req.URL.Query().Get(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Status(code <span class="type">int</span>) &#123;</span><br><span class="line">c.StatusCode = code</span><br><span class="line">c.Writer.WriteHeader(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> SetHeader(key <span class="type">string</span>, value <span class="type">string</span>) &#123;</span><br><span class="line">c.Writer.Header().Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供了快速构造String/Data/JSON/HTML响应的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> String(code <span class="type">int</span>, format <span class="type">string</span>, values ...<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write([]<span class="type">byte</span>(fmt.Sprintf(format, values...)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> JSON(code <span class="type">int</span>, obj <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">encoder := json.NewEncoder(c.Writer)</span><br><span class="line"><span class="keyword">if</span> err := encoder.Encode(obj); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), <span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Data(code <span class="type">int</span>, data []<span class="type">byte</span>) &#123;</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> HTML(code <span class="type">int</span>, html <span class="type">string</span>) &#123;</span><br><span class="line">c.SetHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">c.Status(code)</span><br><span class="line">c.Writer.Write([]<span class="type">byte</span>(html))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-添加router"><a href="#2-添加router" class="headerlink" title="2.添加router"></a>2.添加router</h4><p>想 路由需要的参数 路径 方法 处理函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">handlers <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;router&#123;handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Route %4s - %s&quot;</span>, method, pattern)</span><br><span class="line">key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> handle(c *Context) &#123;</span><br><span class="line">key := c.Method + <span class="string">&quot;-&quot;</span> + c.Path</span><br><span class="line"><span class="keyword">if</span> handler, ok := r.handlers[key]; ok &#123;</span><br><span class="line">handler(c)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>r.handlers[key] &#x3D; handler 这段代码将key也就是路径 和 处理函数关连到了一起</p><p>post用终端请求<br>1.<br>Invoke-WebRequest -Uri “<a href="http://localhost:9999/login">http://localhost:9999/login</a>“ -Method POST -Body “username&#x3D;zhaozhonghe&amp;password&#x3D;zzh123456”</p><ol start="2"><li>curl.exe -X POST -d “username&#x3D;zhaozhonghe&amp;password&#x3D;zzh123456” <a href="http://localhost:9999/login">http://localhost:9999/login</a><br>返回结果<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>测试第二天的gee<br>第一种返回结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">StatusCode        : 200</span><br><span class="line">StatusDescription : OK</span><br><span class="line">Content           : &#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br><span class="line"></span><br><span class="line">RawContent        : HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 50</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Tue, 26 Nov 2024 13:43:37 GMT</span><br><span class="line"></span><br><span class="line">                    &#123;&quot;password&quot;:&quot;zzh123456&quot;,&quot;username&quot;:&quot;zhaozhonghe&quot;&#125;</span><br><span class="line"></span><br><span class="line">Forms             : &#123;&#125;</span><br><span class="line">Headers           : &#123;[Content-Length, 50], [Content-Type, application/json], [Date, Tue, 26 Nov 2024 13:43:37 GMT]&#125;</span><br><span class="line">Images            : &#123;&#125;</span><br><span class="line">InputFields       : &#123;&#125;</span><br><span class="line">Links             : &#123;&#125;</span><br><span class="line">ParsedHtml        : mshtml.HTMLDocumentClass</span><br><span class="line">RawContentLength  : 50</span><br></pre></td></tr></table></figure><h4 id="gee-go"><a href="#gee-go" class="headerlink" title="gee.go"></a>gee.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc defines the request handler used by gee</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(*Context)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Engine implement the interface of ServeHTTP</span></span><br><span class="line"><span class="keyword">type</span> Engine <span class="keyword">struct</span> &#123;</span><br><span class="line">router *router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New is the constructor of gee.Engine</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Engine&#123;router: newRouter()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.router.addRoute(method, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET defines the method to add GET request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> GET(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;GET&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST defines the method to add POST request</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> POST(pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">engine.addRoute(<span class="string">&quot;POST&quot;</span>, pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run defines the method to start a http server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr <span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http.ListenAndServe(addr, engine)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">c := newContext(w, req)</span><br><span class="line">engine.router.handle(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h2><p>我们用了一个非常简单的map结构存储了路由表，使用map存储键值对，索引非常高效，但是有一个弊端，键值对的存储的方式，只能用来索引静态路由。<br>那如果我们想支持类似于&#x2F;hello&#x2F;:name这样的动态路由怎么办呢？<br>所谓动态路由，即一条路由规则可以匹配某一类型而非某一条固定的路由。<br>例如&#x2F;hello&#x2F;:name，可以匹配&#x2F;hello&#x2F;geektutu、hello&#x2F;jack等。<br>请等待~~~</p><p>11.21日看到了字节的课 是关于动态路由的设计 前缀匹配树</p><h4 id="router-go"><a href="#router-go" class="headerlink" title="router.go"></a>router.go</h4><p>前缀树路由： 重点学习这个数据结构</p><p>bilibili: <a href="https://www.bilibili.com/video/BV1wT4y1x7xm?t=45.6">https://www.bilibili.com/video/BV1wT4y1x7xm?t=45.6</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> router <span class="keyword">struct</span> &#123;</span><br><span class="line">roots    <span class="keyword">map</span>[<span class="type">string</span>]*node <span class="comment">//增加的</span></span><br><span class="line">handlers <span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newRouter</span><span class="params">()</span></span> *router &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;router&#123;</span><br><span class="line">roots:    <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*node),</span><br><span class="line">handlers: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]HandlerFunc),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only one * is allowed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parsePattern</span><span class="params">(pattern <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">vs := strings.Split(pattern, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line">parts := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> vs &#123;</span><br><span class="line"><span class="keyword">if</span> item != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">parts = <span class="built_in">append</span>(parts, item)</span><br><span class="line"><span class="keyword">if</span> item[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> parts</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> addRoute(method <span class="type">string</span>, pattern <span class="type">string</span>, handler HandlerFunc) &#123;</span><br><span class="line">parts := parsePattern(pattern)</span><br><span class="line"></span><br><span class="line">key := method + <span class="string">&quot;-&quot;</span> + pattern</span><br><span class="line">_, ok := r.roots[method]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">r.roots[method] = &amp;node&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">r.roots[method].insert(pattern, parts, <span class="number">0</span>)</span><br><span class="line">r.handlers[key] = handler</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> getRoute(method <span class="type">string</span>, path <span class="type">string</span>) (*node, <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) &#123;</span><br><span class="line">searchParts := parsePattern(path)</span><br><span class="line">params := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">root, ok := r.roots[method]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">n := root.search(searchParts, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">parts := parsePattern(n.pattern)</span><br><span class="line"><span class="keyword">for</span> index, part := <span class="keyword">range</span> parts &#123;</span><br><span class="line"><span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> &#123;</span><br><span class="line">params[part[<span class="number">1</span>:]] = searchParts[index]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> part[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span> &amp;&amp; <span class="built_in">len</span>(part) &gt; <span class="number">1</span> &#123;</span><br><span class="line">params[part[<span class="number">1</span>:]] = strings.Join(searchParts[index:], <span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, params</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> getRoutes(method <span class="type">string</span>) []*node &#123;</span><br><span class="line">root, ok := r.roots[method]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">nodes := <span class="built_in">make</span>([]*node, <span class="number">0</span>)</span><br><span class="line">root.travel(&amp;nodes)</span><br><span class="line"><span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *router)</span></span> handle(c *Context) &#123;</span><br><span class="line">n, params := r.getRoute(c.Method, c.Path)</span><br><span class="line"><span class="keyword">if</span> n != <span class="literal">nil</span> &#123;</span><br><span class="line">c.Params = params</span><br><span class="line">key := c.Method + <span class="string">&quot;-&quot;</span> + n.pattern</span><br><span class="line">r.handlers[key](c)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c.String(http.StatusNotFound, <span class="string">&quot;404 NOT FOUND: %s\n&quot;</span>, c.Path)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>parsePattern 函数的作用是解析路由路径，将路径按 &#x2F; 分隔成各个部分。比如 &#x2F;user&#x2F;:id 会被分解成 [“user”, “:id”]。<br>如果路径中出现了 *（通常用于匹配任意多的路径部分），解析会在遇到 * 时停止。比如 &#x2F;files&#x2F;*filepath 会解析成 [“files”, “*filepath”]。<br>parts 数组存储了路由路径的各个部分（如静态部分、动态部分、通配符部分）</p><h5 id="tire-go"><a href="#tire-go" class="headerlink" title="tire.go"></a>tire.go</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gee</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">pattern  <span class="type">string</span></span><br><span class="line">part     <span class="type">string</span></span><br><span class="line">children []*node</span><br><span class="line">isWild   <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;node&#123;pattern=%s, part=%s, isWild=%t&#125;&quot;</span>, n.pattern, n.part, n.isWild)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> insert(pattern <span class="type">string</span>, parts []<span class="type">string</span>, height <span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(parts) == height &#123;</span><br><span class="line">n.pattern = pattern</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">part := parts[height]</span><br><span class="line">children := n.matchChildren(part)</span><br><span class="line"><span class="keyword">var</span> child *node</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">0</span> &#123;</span><br><span class="line">child = &amp;node&#123;part: part, isWild: part[<span class="number">0</span>] == <span class="string">&#x27;:&#x27;</span> || part[<span class="number">0</span>] == <span class="string">&#x27;*&#x27;</span>&#125;</span><br><span class="line">n.children = <span class="built_in">append</span>(n.children, child)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">child = children[<span class="number">0</span>] <span class="comment">// 假设我们总是取第一个匹配的子节点</span></span><br><span class="line">&#125;</span><br><span class="line">child.insert(pattern, parts, height+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> search(parts []<span class="type">string</span>, height <span class="type">int</span>) *node &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(parts) == height || strings.HasPrefix(n.part, <span class="string">&quot;*&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> n.pattern == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">part := parts[height]</span><br><span class="line">children := n.matchChildren(part)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> children &#123;</span><br><span class="line">result := child.search(parts, height+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> result != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> travel(list *([]*node)) &#123;</span><br><span class="line"><span class="keyword">if</span> n.pattern != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">*list = <span class="built_in">append</span>(*list, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line">child.travel(list)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> matchChild(part <span class="type">string</span>) *node &#123;</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line"><span class="keyword">if</span> child.part == part || child.isWild &#123;</span><br><span class="line"><span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *node)</span></span> matchChildren(part <span class="type">string</span>) []*node &#123;</span><br><span class="line">nodes := <span class="built_in">make</span>([]*node, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> n.children &#123;</span><br><span class="line"><span class="keyword">if</span> child.part == part || child.isWild &#123;</span><br><span class="line">nodes = <span class="built_in">append</span>(nodes, child)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先学习一下前缀树</p><h5 id="定义树结点结构体"><a href="#定义树结点结构体" class="headerlink" title="定义树结点结构体"></a>定义树结点结构体</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> trieNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    nexts [<span class="number">26</span>]*trieNode</span><br><span class="line">    PassCnt <span class="type">int</span> <span class="comment">//用来记录中途是否有途径某个节点的个数</span></span><br><span class="line">    end <span class="type">bool</span> <span class="comment">//匹配某个单词是否是结尾 比如seat的结尾是t</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>树</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">    root *trieNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Newtrie</span> *<span class="title">Trie</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;Trie&#123;</span><br><span class="line">    root: &amp;trieNode&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Search(word <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">//查找目标节点，使根节点开始抵达目标节点沿路跟字符串恰好等于word</span></span><br><span class="line">    node := t.search(word)</span><br><span class="line">    <span class="keyword">return</span> node != <span class="literal">nil</span> &amp;&amp; node.end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Tire-search-方法源码"><a href="#Tire-search-方法源码" class="headerlink" title="Tire.search 方法源码"></a>Tire.search 方法源码</h5><p>字符➖a<br>如果返回的单词是 前缀树中的别的单词的前缀判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span>search(target <span class="type">string</span>)*trieNode&#123;</span><br><span class="line"><span class="comment">//移动指针从根节点出发</span></span><br><span class="line">move :t.root</span><br><span class="line">/依次追历target中的每个字符</span><br><span class="line">for_, ch:<span class="keyword">range</span> target&#123;</span><br><span class="line"><span class="comment">//倘若nexts中不存在对应于这个字符的节点，说明该单词没插入过，返回ni1</span></span><br><span class="line"><span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">nil</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指针向着子节点移动</span></span><br><span class="line">movemove.nexts [ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//来到末尾，说明已经完全匹配好单词，直接返回这个节点</span></span><br><span class="line"><span class="comment">//需要注意，找到目标节点不一定代表单词存在，因为该节点的end标识未必为true</span></span><br><span class="line"><span class="comment">//比如我们之前往trie中插入了apple这个单词，但是查找app这个单词时，预期的返回</span></span><br><span class="line"><span class="keyword">return</span> move</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="前缀匹配"><a href="#前缀匹配" class="headerlink" title="前缀匹配"></a>前缀匹配</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前缀树做前缀匹配很简单</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> StartWith(prefix(<span class="type">string</span>)) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.search(prefix) != <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀统计"><a href="#前缀统计" class="headerlink" title="前缀统计"></a>前缀统计</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> PassCnt(prefix <span class="type">string</span>) <span class="type">int</span>&#123;</span><br><span class="line">    node := t.search(prefix)</span><br><span class="line">    <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>  </span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> node.PassCnt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="插入单词"><a href="#插入单词" class="headerlink" title="插入单词"></a>插入单词</h5><p>例子： 要插入apple 树中app可以复用<br>    则插入 l e</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Insert(word <span class="type">string</span>) &#123;</span><br><span class="line"><span class="comment">//如果单词存在直接返回</span></span><br><span class="line">    <span class="keyword">if</span> t.Search(word)&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        move := t.root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _,ch := <span class="keyword">range</span> word &#123;</span><br><span class="line"><span class="comment">//如果不存在创建出来</span></span><br><span class="line">    <span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] = &amp;trieNode&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt++</span><br><span class="line">    move = move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"></span><br><span class="line">move.end =<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="删除流程"><a href="#删除流程" class="headerlink" title="删除流程"></a>删除流程</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span></span> Erase(word <span class="type">string</span>) <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !t.Search(word)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  move := t.root</span><br><span class="line">    <span class="keyword">for</span> _, ch := <span class="keyword">range</span> word &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt --</span><br><span class="line"><span class="keyword">if</span> move.nexts[ch-<span class="string">&#x27;a&#x27;</span>].passCnt == <span class="number">0</span> &#123;</span><br><span class="line">    move.nexts[ch-<span class="string">&#x27;a&#x27;</span>] = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">    move = move.nexts[ch-<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    move.end = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整段代码下来还是有点看不懂啊呜呜</p><p>11.25日<br>拖了几天<br>感谢tutu</p><h4 id="分组控制"><a href="#分组控制" class="headerlink" title="分组控制"></a>分组控制</h4><p>分组控制是Web框架的基础功能之一，路由的分组，往往某一组路由需要相似的处理</p><p>以&#x2F;post开头的路由匿名可访问。<br>以&#x2F;admin开头的路由需要鉴权。<br>以&#x2F;api开头的路由是 RESTful 接口，可以对接第三方平台，需要三方平台鉴权。</p><p>&#x2F;post是一个分组<br>&#x2F;post&#x2F;a和&#x2F;post&#x2F;b可以是该分组下的子分组<br>作用在&#x2F;post分组上的中间件(middleware)，也都会作用在子分组，子分组还可以应用自己特有的中间件。</p><p>中间件可以给框架提供无限的扩展能力<br>用在分组上的效果也更明显<br>&#x2F;admin的分组，可以应用鉴权中间件；&#x2F;分组应用日志中间件，<br>&#x2F;是默认的最顶层的分组，也就意味着给所有的路由，即整个框架增加了记录日志的能力。</p><p>一个 Group 对象需要具备哪些属性呢？首先是前缀(prefix)，<br>比如&#x2F;，或者&#x2F;api；要支持分组嵌套，那么需要知道当前分组的父亲(parent)是谁；<br>中间件是应用在分组上的，那还需要存储应用在该分组上的中间件(middlewares)。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r := gee.New()</span><br><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">v1.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gee.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;&lt;h1&gt;Hello Gee&lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好好看看仓库中的代码 梳理思路 感觉好有意思但是看不懂哈哈哈哈</p><p>11.26日 回看前三天的代码 增加一些自己的理解和修改 再继续向下学习！ </p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>UDP socket的ack机制和丢包重传</title>
      <link href="/archives/UDP_socket.html"/>
      <url>/archives/UDP_socket.html</url>
      
        <content type="html"><![CDATA[<p>参考连接： <a href="https://juejin.cn/post/7263378772040122429">https://juejin.cn/post/7263378772040122429</a></p><h1 id="Go语言实现UDP-socket的ack机制和丢包重传"><a href="#Go语言实现UDP-socket的ack机制和丢包重传" class="headerlink" title="Go语言实现UDP socket的ack机制和丢包重传"></a>Go语言实现UDP socket的ack机制和丢包重传</h1><p>UDP 在通讯之前不需要建立连接 可以直接发送数据包 是一种无连接协议（常用于音视频传输）</p><p>但是在有些场景 即需要UDP传输也需要向TCP一样（TCP的可靠传输）</p><p>解决丢包问题：</p><p>1.添加 seq&#x2F;ack机制 确保数据发送到对端</p><p>什么是 seq&#x2F;ack机制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在TCP（传输控制协议）中，序号（Sequence Number，简称seq）和确认应答号（Acknowledgment Number，简称ack）是协议头部非常关键的字段，它们共同确保了TCP的可靠性和数据按顺序传输的特性。</span><br><span class="line"></span><br><span class="line">** Sequence Number **</span><br><span class="line">含义：序号是指一个TCP报文段中第一个字节的数据序列标识。它表示在一个TCP连接中，该报文段所携带的数据的开始位置。序号是用来保证数据传输的顺序性和完整性的。</span><br><span class="line"></span><br><span class="line">作用：在TCP连接建立时，双方各自随机选择一个初始序列号（ISN）。随后传输的每个报文段的序号将基于这个初始值递增，其增量为该报文段所携带的数据量（字节数）。通过这种方式，接收方可以根据序号重组乱序到达的数据片段，确保数据的正确顺序和完整性。如果接收到的报文段不连续，接收方可以通过TCP的重传机制请求发送方重新发送缺失的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**Acknowledgment Number**</span><br><span class="line">含义：确认应答号是接收方期望从发送方接收到的下一个报文段的序号。它实质上是接收方告诉发送方：“我已经成功接收到了哪个序号之前的所有数据，请从这个序号开始发送后续的数据。”</span><br><span class="line"></span><br><span class="line">作用：确认应答号用于实现可靠性传输。当一个报文段被接收方正确接收时，接收方会发送一个ACK报文，其中包含的确认应答号是接收到的数据加上1（即接收方期望接收的下一个数据的序号）。通过检查这个确认应答号，发送方能够知道其发送的数据是否已被接收方正确接收，并据此决定是否需要重传某些数据段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ack和seq 保证了：</p><ul><li>确保数据的顺序性：即使数据片段在网络中的传输过程中顺序被打乱，接收方也能根据序号正确地重组这些数据。</li><li>检测丢包：如果发送方发送的数据长时间未被确认（即没有收到对应的ACK报文），它会判断这些数据可能已丢失，并将其重新发送。</li><li>实现流量控制和拥塞控制：通过调整发送未被确认数据的量（即控制窗口大小），TCP可以根据网络条件动态调整数据发送的速率，避免网络拥塞。</li></ul><h4 id="Golang的socket编程："><a href="#Golang的socket编程：" class="headerlink" title="Golang的socket编程："></a>Golang的socket编程：</h4><p>Go语言通过标准库中的<code>net</code>包来实现UDP和TCP的socket编程。<code>net</code>包提供了用于创建和管理网络连接的函数，以及用于进行数据传输的相关类型和方法，不同于C++需要手动设置和管理socket API，不论实现UDP还是TCP都可以直接使用封装好的方法进行操作，大大简化了socket编程：</p><h5 id="使用net包实现UDP通信"><a href="#使用net包实现UDP通信" class="headerlink" title="使用net包实现UDP通信"></a>使用net包实现UDP通信</h5><h6 id="1-client-go"><a href="#1-client-go" class="headerlink" title="1.client.go"></a>1.client.go</h6><p>1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;bufio&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建UDP连接到服务器的地址和端口号</span><br><span class="line">c, err := net.DialUDP(&quot;udp&quot;, nil, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(127, 0, 0, 1),</span><br><span class="line">Port: 8282,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Println(&quot;dial err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer c.Close() // 将 defer 放在 if 语句外面</span><br><span class="line"></span><br><span class="line">// 从标准输入读取用户输入的数据</span><br><span class="line">input := bufio.NewReader(os.Stdin)</span><br><span class="line">for &#123;</span><br><span class="line">// 读取用户输入知道遇见换行符</span><br><span class="line">s, err := input.ReadString(&#x27;\n&#x27;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;read from stdin failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 将用户输入的数据转换为字节数组并通过UDP连接发送给服务器</span><br><span class="line">_, err = c.Write([]byte(s))</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;send to server failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 接收来自服务器的数据</span><br><span class="line">var buf [1024]byte</span><br><span class="line">n, addr, err := c.ReadFromUDP(buf[:])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;recv from udp failed, err: %v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印来自服务器的数据</span><br><span class="line">fmt.Printf(&quot;服务器 %v, 响应数据: %v\n&quot;, addr, string(buf[:n]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-server-go"><a href="#2-server-go" class="headerlink" title="2.server.go"></a>2.server.go</h6><p>首先创建UDP监听器监听指定IP和端口，等待连接客户端，连接后会读取客户端发来的数据并打印收到的数据，并将接收的响应信息返回发送给客户端，使用死循环使其能够持续获取客户端数据，同样实现了UDP的数据接收和发送，实现了简单的UDP服务器；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;net&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// udp server</span><br><span class="line">func main() &#123;</span><br><span class="line">// 创建一个UDP监听器，监听本地IP地址的端口</span><br><span class="line">listen, err := net.ListenUDP(&quot;udp&quot;, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(127, 0, 0, 1),</span><br><span class="line">Port: 8282,</span><br><span class="line">&#125;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;listen failed,err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">defer listen.Close()</span><br><span class="line"></span><br><span class="line">for &#123;</span><br><span class="line">var buf [1024]byte</span><br><span class="line">// 从UDP连接中读取数据到buf中，n为读取到的字节数，addr为数据发送者的地址</span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;read from udp failed,err:%v\n&quot;, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印接收到的数据</span><br><span class="line">fmt.Println(&quot;接收到的数据：&quot;, string(buf[:n]))</span><br><span class="line"></span><br><span class="line">// 将接收到的数据原样发送回给数据发送者</span><br><span class="line">_, err = listen.WriteToUDP(buf[:n], addr)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">fmt.Printf(&quot;write to %v failed,err:%v\n&quot;, addr, err)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：（好有趣）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; go run client.go</span><br><span class="line">hello</span><br><span class="line">服务器 127.0.0.1:8282, 响应数据: hello</span><br><span class="line"></span><br><span class="line">world</span><br><span class="line">服务器 127.0.0.1:8282, 响应数据: world</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> go run server.go</span><br><span class="line">接收到的数据： hello</span><br><span class="line"></span><br><span class="line">接收到的数据： world</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="基于seq-apk"><a href="#基于seq-apk" class="headerlink" title="基于seq&#x2F;apk"></a>基于seq&#x2F;apk</h5><p>client</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dail err:%v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line">input := []<span class="type">string</span>&#123;<span class="string">&quot;Message1&quot;</span>, <span class="string">&quot;Message2&quot;</span>, <span class="string">&quot;Message3&quot;</span>, <span class="string">&quot;Message4&quot;</span>, <span class="string">&quot;Message5&quot;</span>&#125;</span><br><span class="line">seq := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, msg := <span class="keyword">range</span> input &#123;</span><br><span class="line">seq++</span><br><span class="line">message := Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Sending seq=%d: %s\n&quot;</span>, message.Seq, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送带有序列号的数据包</span></span><br><span class="line">_, err = c.Write(encodeMessage(message))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;send to server failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等待ACK，设置超时时间</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">c.SetReadDeadline(time.Now().Add(<span class="number">5</span> * time.Second))</span><br><span class="line">n, _, err := c.ReadFromUDP(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;ACK not received. Timeout or Error.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ack := decodeMessage(buf[:n])</span><br><span class="line"><span class="keyword">if</span> ack.Seq == seq+<span class="number">1</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ACK = %d\n&quot;</span>, ack.Seq)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid ACK received. Retry.&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message2 <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;listen failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read from udp failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理接收到的数据，提取序列号和消息文本</span></span><br><span class="line">message := decodeMessage1(buf[:n])</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received seq=%d from %v: %s\n&quot;</span>, message.Seq, addr, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ACK回复给客户端，ACK=Seq+1</span></span><br><span class="line">ack := Message2&#123;Seq: message.Seq + <span class="number">1</span>, Msg: <span class="string">&quot;ACK&quot;</span>&#125;</span><br><span class="line">_, err = listen.WriteToUDP(encodeMessage1(ack), addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write to %v failed,err:%v\n&quot;</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage1</span><span class="params">(msg Message2)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage1</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message2 &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message2&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题核心：在同一文件夹内，Go 默认将所有文件视为同一包的一部分，可能导致重复定义或未定义的错误。<br>推荐解决方法：<br>分文件夹运行。<br>提取共享逻辑到单独的文件。<br>运行时显式指定所有 .go 文件。<br>额外改进：通过参数区分服务端和客户端运行模式，进一步优化程序结构。</p><p>，服务器监听的端口可能是某个固定端口（例如 12345），而客户端的UDP数据包来自 127.0.0.1:59653。这意味着：<br>UDP允许客户端选择任意可用的端口号作为源端口，并将数据包发送到服务器的监听端口。这也是为什么你看到不同的端口号。</p><hr><h5 id="4-实现超时重传"><a href="#4-实现超时重传" class="headerlink" title="4.实现超时重传"></a>4.实现超时重传</h5><p>最简单的方法就是当超时没有收到ack回复或者ack回复错误乱序时，阻塞后续发包，先进行重传，<br>把丢失的包重传后再继续发包，因此主要是在客户端更改一些发包的逻辑，服务端则没有变化；</p><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := net.DialUDP(<span class="string">&quot;udp&quot;</span>, <span class="literal">nil</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;dial,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> c.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例数据</span></span><br><span class="line">input := []<span class="type">string</span>&#123;<span class="string">&quot;Message 1&quot;</span>, <span class="string">&quot;Message 2&quot;</span>, <span class="string">&quot;Message 3&quot;</span>, <span class="string">&quot;Message 4&quot;</span>, <span class="string">&quot;Message 5&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> seq, msg := <span class="keyword">range</span> input &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">message := Message&#123;Seq: seq + <span class="number">1</span>, Msg: msg&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Sending seq=%d: %s\n&quot;</span>, message.Seq, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送带有序列号的数据包</span></span><br><span class="line">_, err := c.Write(encodeMessage(message))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;send to server failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始等待ACK，设置超时时间</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">1024</span>)</span><br><span class="line">c.SetReadDeadline(time.Now().Add(<span class="number">5</span> * time.Second))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环等待ACK，直到收到正确的ACK或超时</span></span><br><span class="line">n, _, err := c.ReadFromUDP(buf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 超时或发生错误，需要重传</span></span><br><span class="line">fmt.Println(<span class="string">&quot;ACK not received. Timeout or Error. Retrying...&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//解码从服务器传来的ack</span></span><br><span class="line">ack := decodeMessage(buf[:n])</span><br><span class="line"><span class="keyword">if</span> ack.Seq == seq+<span class="number">2</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ACK = %d\n&quot;</span>, ack.Seq)</span><br><span class="line"><span class="comment">// 收到正确的ACK，跳出内部循环，继续发送下一个消息</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 收到错误的ACK，继续等待，内部循环会重发相同的消息</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Invalid ACK received. Waiting for correct ACK...&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">Seq <span class="type">int</span></span><br><span class="line">Msg <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.ListenUDP(<span class="string">&quot;udp&quot;</span>, &amp;net.UDPAddr&#123;</span><br><span class="line">IP:   net.IPv4(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">Port: <span class="number">8282</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;listen failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">1024</span>]<span class="type">byte</span></span><br><span class="line">n, addr, err := listen.ReadFromUDP(buf[:])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;read from udp failed,err:%v\n&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以20%的概率模拟丢包</span></span><br><span class="line"><span class="keyword">if</span> rand.Float32() &lt; <span class="number">0.2</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;From %v lost package\n&quot;</span>, addr)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理接收到的数据，解码字节流 提取序列号和消息文本</span></span><br><span class="line">message := decodeMessage(buf[:n])</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received seq=%d from %v: %s\n&quot;</span>, message.Seq, addr, message.Msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送ACK回复给客户端，ACK=Seq+1</span></span><br><span class="line">ack := Message&#123;Seq: message.Seq + <span class="number">1</span>, Msg: <span class="string">&quot;ACK&quot;</span>&#125;</span><br><span class="line"><span class="comment">//写入ack向UDP连接中</span></span><br><span class="line">_, err = listen.WriteToUDP(encodeMessage(ack), addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;write to %v failed,err:%v\n&quot;</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encodeMessage</span><span class="params">(msg Message)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// 将序列号和消息文本编码成字节数据</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(fmt.Sprintf(<span class="string">&quot;%d;%s&quot;</span>, msg.Seq, msg.Msg))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decodeMessage</span><span class="params">(data []<span class="type">byte</span>)</span></span> Message &#123;</span><br><span class="line"><span class="comment">// 解码收到的数据，提取序列号和消息文本</span></span><br><span class="line">parts := strings.Split(<span class="type">string</span>(data), <span class="string">&quot;;&quot;</span>)</span><br><span class="line">seq, _ := strconv.Atoi(parts[<span class="number">0</span>])</span><br><span class="line">msg := parts[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">return</span> Message&#123;Seq: seq, Msg: msg&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述方法实现的丢包重传虽然能够正常工作，但是发送端使用双层循环嵌套，并且每次丢包都阻塞了后续发包，这样会导致重传的效率很低，只适用于小宽带低延时的情况，而且超时重传容易产生误判，主要有以下两种情况：</p><p>对方收到了数据包，但是ack发送途中丢失，其实就是我服务器模拟丢包的情况，服务器可能收到了数据，但是因为某种原因ack没能正确发送；<br>ack在回传的途中，但是时间已经超过了发送端的ack等待时间即超过了一次RTO，这样也会导致接收端收到数据却仍然重传的问题。</p><p>学习 滑动窗口 拥塞控制 优化一些东西 深入理解seq&#x2F;ack的原理和超时重传的逻辑 Go语言进行socket编程的方法 UDP和TCP的一些知识</p><p>借鉴文章：<a href="https://blog.csdn.net/weixin_41500064/article/details/135119715">https://blog.csdn.net/weixin_41500064/article/details/135119715</a></p><h5 id="流量控制："><a href="#流量控制：" class="headerlink" title="流量控制："></a>流量控制：</h5><p>作用：为了解决发送方和接收方速度不同而导致的数据丢失问题,当发送方发送的太快,接收方来不及接受就会导致数据丢失；</p><p>方式：由接收端采用滑动窗口的形式，告知发送方允许&#x2F;停止发包解决TCP丢包问题。</p><h5 id="拥塞控制："><a href="#拥塞控制：" class="headerlink" title="拥塞控制："></a>拥塞控制：</h5><p>作用：为了解决过多的数据注入到网络导致网络崩溃和超负荷问题；</p><p>方式：由发送方采用拥塞窗口的形式去判断网络状态，从而采取不同算法执行TCP动态发包解决网络整体质量问题。</p><p>典型的场景如以太网场景中10G设备向1G设备发TCP包：<br>10G网卡 10Gbps 持续发送TCP包 交换机 以 1Gbps每秒接收TCP包<br>TCP 提供一种机制可以让发送端根据接收端的实际接收能力控制发送的数据量。这就是所谓的流控制。<br>接收端主机向发送端主机通知自已可以接收数据的大小；<br>是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。窗口大小的值由接收端主机决定，而在TCP 首部中，专门有一个字段用来通知窗口大小：<br>接收主机将自己可以接收的缓冲区大小放入这个字段中通知给发送端，这个字段的值越大，说明网络的吞吐量越高。<br>发送端主机会根据接收端主机的指示，对发送数据的量进行控制。这也就形成了一个完整的TCP流控制(流量控制)。<br>当Window&#x3D;0时，即告知发送方停止发送数据。</p><h5 id="慢开始"><a href="#慢开始" class="headerlink" title="慢开始"></a>慢开始</h5><p>发送方先探测网络拥塞程度，并不是一开始就发送大量的数据，发送方会根据拥塞程度增大拥塞窗口cwnd。<br>拥塞窗口cwnd值是几就能发送几个数据段</p><h5 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h5><p>继上图达到cwnd≥ssthresh后采用该算法用来控制拥塞窗口的增长速率。</p><p>计算方法：每经过一个传输轮次cwnd值加1，让cwnd值呈线性缓慢增大</p><h5 id="拥塞发生"><a href="#拥塞发生" class="headerlink" title="拥塞发生"></a>拥塞发生</h5><p>当网络发生拥塞丢包时（如图假定cwnd&#x3D;24），会有两种情况：</p><p>超时重传（1988年TCP Tahoe版本，已废弃不用）</p><p>更新后的 ssthresh 值变为 12(即为出现超时时的窗口数值 24 的一半)，拥窗口再重新设置为1<br>并执行慢开始算法。当cwnd &#x3D; ssthresh &#x3D; 12 时改为执行拥塞避免算法拥塞窗口按线性规律增长，<br>每经过一个往返时间增加一个MSS的大小。在TCP拥塞控制的文献中经常可看见“乘法减小”(Multiplicative Decrease)和“加法增大”(Additive Increase)这样的提法。<br>“乘法减小”是指不论在开始阶段还是拥塞避免阶段，只要出现超时(即很可能出现了网络拥塞)，就把慢开始门限值 ssthresh 减半，即设置为当前的拥塞窗口的一半(与此同时，执行慢开始算法)。<br>而“加法增大”是指执行拥塞避免算法后，使拥塞窗口缓慢增大，以防止网络过早出现拥塞。上面两种算法合起来常称为 AIMD算法(加法增大乘法减小)。</p><h5 id="快重传与快恢复"><a href="#快重传与快恢复" class="headerlink" title="快重传与快恢复"></a>快重传与快恢复</h5><p>超时重传算法直接把cwnd减小到1太过强烈，若还能收到连续3个ACK说明网络质量没那么差。同时采用快重传和快恢复算法，过程如下：</p><p>（1）当发送方连续收到3个重复确认时即执行“乘法减小”算法，把慢开始门限ssthresh 减半；</p><p>（2）由于发送方现在认为网络不那么差，于是把cwnd值设置为开始门限ssthresh 减半后的数值；</p><p>（3）开始执行拥塞避免算法 (“加法增大”)使拥塞窗口缓慢地线性增大。</p><hr><h4 id="12-25-日"><a href="#12-25-日" class="headerlink" title="12.25 日"></a>12.25 日</h4><p>根据计算机网络这本书，深入了解UDP套接字编程：</p><p>整体的一个过程： 进程间彼此通过向套接字发送报文来进行通信</p><p>一个主机-》多个进程 1个进程-》多个套接字</p><p>帮助记忆： 进程是一间房子 而 套接字是房子门 还需要一个 端口 来识别我具体要将信息发送到哪间房子，也就是具体的房间号（端口）</p><ol><li>客户从键盘键入数据，并向服务器发送数据（将数据编码成字节流），</li><li>服务器接收数据（接收字节流）-》并将其解码为原始客户端输入的数据 （并把小写转换为大写）</li><li>服务器将修改的数据（编码为字节流）发送回客户端</li><li>客户端接收数据后解码 并显示在屏幕上</li></ol><p>接收源地址（ip+端口号）和分组</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>后端项目学习</title>
      <link href="/archives/Simple_bank.html"/>
      <url>/archives/Simple_bank.html</url>
      
        <content type="html"><![CDATA[<h1 id="重新开启simplebank学习！！！"><a href="#重新开启simplebank学习！！！" class="headerlink" title="重新开启simplebank学习！！！"></a>重新开启simplebank学习！！！</h1><h3 id="一-创建数据库表"><a href="#一-创建数据库表" class="headerlink" title="一.创建数据库表"></a>一.创建数据库表</h3><p><a href="https://dbdiagram.io/">https://dbdiagram.io</a> 可视化数据库工具</p><h4 id="1-创建账户表"><a href="#1-创建账户表" class="headerlink" title="1.创建账户表"></a>1.创建账户表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table accounts as A &#123; <span class="comment">//A作为account的别名</span></span><br><span class="line">  id bigserisal [pk]  <span class="comment">//pk作为主键 自增的id列</span></span><br><span class="line">  owner varchar</span><br><span class="line">  balance bigint</span><br><span class="line">  currency varchar </span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//自动获取时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-创建条目表"><a href="#2-创建条目表" class="headerlink" title="2.创建条目表"></a>2.创建条目表</h4><p>&#x2F;&#x2F;记录账户余额的变化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk] <span class="comment">//</span></span><br><span class="line">  account_id bigint [ref : &gt; A.id] <span class="comment">//外键 账户和条目之间是1对多关系</span></span><br><span class="line">    amount bigint [not null note:<span class="string">`可以是负或者正`</span>] <span class="comment">//正负取决于取出还是存入 note是添加注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] <span class="comment">//记录条目的创建时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建-转账表"><a href="#3-创建-转账表" class="headerlink" title="3.创建 转账表"></a>3.创建 转账表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  amount  bigint [not null note: <span class="string">`一定不能为空`</span>]<span class="comment">//note为注释</span></span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此之后向列中添加非空约束 例如 ：</p><p>balance bigint [not null] &#x2F;&#x2F;  <strong>非空约束是一种用于限制数据库表中某列不能为空的约束</strong></p><p>枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Enum Currency&#123;</span><br><span class="line">USD</span><br><span class="line">EUR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向表中添加索引</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use DBML to define your database structure</span></span><br><span class="line"><span class="comment">// Docs: https://dbml.dbdiagram.io/docs</span></span><br><span class="line"></span><br><span class="line">Table accounts as A &#123;</span><br><span class="line">  id bigserisal [pk]</span><br><span class="line">  owner varchar [not null]</span><br><span class="line">  balance bigint [not null]</span><br><span class="line">  currency varchar  [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    owner</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table entries &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  account_id bigint [ref : &gt; A.id] </span><br><span class="line">  </span><br><span class="line">  amount bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//列出特定账户的所有条目</span></span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">                        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Table transfers &#123;</span><br><span class="line">  id bigint [pk]</span><br><span class="line">  from_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  to_account_id bigint [ref : &gt; A.id]</span><br><span class="line">  amount  bigint [not null]</span><br><span class="line">  created_at timestamp [<span class="keyword">default</span>: <span class="string">`now()`</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这些做好之后使用导出功能 生成代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserisal PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigint PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamp DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将外键添加到表中</span></span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二-Docker"><a href="#二-Docker" class="headerlink" title="二.Docker"></a>二.Docker</h3><p><strong>用指令创建容器的时候 一定要注意-p参数 将容器的端口映射到主机上 一定要保证端口不要被占用 否则将会产生问题</strong></p><p>拉取镜像语法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;image&gt;:&lt;tag&gt;</span><br></pre></td></tr></table></figure><p>开始一个容器指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1.docker run --name &lt;container_name&gt; -e &lt;environment_variable&gt; -d &lt;image&gt;:tag</span><br><span class="line">:</span><br><span class="line">2.docker run --name some-postgres -e POSTGRES_PASSWORD=mysecret -d postgres </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！！！端口映射 -p 5432:5432 //注意防止端口冲突自行更改</span></span><br><span class="line">示例：</span><br><span class="line">docker run --name postgres12 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine </span><br><span class="line"></span><br><span class="line">3. docker exec -it &lt;contain_name_or_id&gt; &lt;comman&gt; [args]</span><br><span class="line">示例：#进入psql控制台</span><br><span class="line">docker exec -it postgres12 psql -U root</span><br><span class="line"></span><br><span class="line">4.显示容器日志</span><br><span class="line">docker logs &lt;container_name_or_id&gt;</span><br><span class="line">示例:</span><br><span class="line">docker logs postgres12</span><br><span class="line"></span><br><span class="line">5.连接shell</span><br><span class="line">指令：</span><br><span class="line">docker exec -it postgres12 /bin/sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建新的数据库</span></span><br><span class="line">createdb --username=root --owner=root simple_bank</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用psql连接</span></span><br><span class="line"> psql simple_bank</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">删除数据库</span></span><br><span class="line"> dropdb [名称]</span><br><span class="line"> </span><br><span class="line"> exit退出shell</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">指令结合</span></span><br><span class="line"> docker exec -it postgres12 createdb --username=root --owner=root simple_bank</span><br><span class="line"> docker exec -it postgres12 psql -U root simple_bank</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">查找指令</span></span><br><span class="line"> history | grep &quot;docker run&quot; //linux</span><br><span class="line"> history | Select-String &quot;docker run&quot;//windows</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>区分 docker中的 镜像和容器</p><p>docker image中包含多个运行 容器的应用实例 类似结构：</p><p>- docker image</p><ul><li>├── container1</li></ul><ul><li><p>├──container2</p></li><li><p>├──container3</p></li></ul><h3 id="三-Tableplus"><a href="#三-Tableplus" class="headerlink" title="三.Tableplus"></a>三.Tableplus</h3><p>将sql文件导入到tableplus中</p><p>在tableplus中删除表 使用sql指令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> accounts CASCADE; <span class="operator">/</span><span class="operator">/</span>注意替换表名称</span><br></pre></td></tr></table></figure><h3 id="四-DB-migration"><a href="#四-DB-migration" class="headerlink" title="四.DB migration"></a>四.DB migration</h3><p>迁移指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq init_schema</span><br></pre></td></tr></table></figure><p>up&#x2F;down migration：理解迁移 类比栈结构 向上新数据表 向下 旧数据表</p><p><strong>使用migrate up指令时         Old DB 在文件中 一次按照 1.up.sql 2.up.sql 3.up.sql 依次运行到New DB</strong></p><p><strong>使用migrate down指令时  New DB 在文件中依次按照 3.up.sql 2.up.sql  1.up.sql 依次运行到Old DB</strong></p><p><strong>old DB schema</strong> —–&gt; migrate up —––&gt; x.up.sql —–&gt;<strong>New DB schema</strong></p><p>​      &lt;—————————-  x.down.sql &lt;———migrate down&lt;————-</p><p>将最开始的.sql文件放入 .up.sql中</p><h3 id="五-Makefile文件"><a href="#五-Makefile文件" class="headerlink" title="五.Makefile文件"></a>五.Makefile文件</h3><p><strong>创建规则后使用  make指令 快速创建</strong></p><p>如果你是萌新开始给到你一个项目 你可以通过makefile文件快速构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">migrate -help</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">通过看日志 知道使用什么指令来工作</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">迁移指令</span></span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank&quot; -verbose up</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现ssl错误</span></span><br><span class="line">添加sslmode=disabled</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">出现了一系列的迁移错误   解决方案</span></span><br><span class="line">强制更改版本</span><br><span class="line">migrate -path simplebank/db/migration -database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; -verbose force 1</span><br></pre></td></tr></table></figure><h3 id="六-数据库的CRUD"><a href="#六-数据库的CRUD" class="headerlink" title="六.数据库的CRUD"></a>六.数据库的CRUD</h3><p>DATAVASE&#x2F;SQL库</p><p>GORM</p><p>sqlx（兼容多）</p><p>sqlc（最好的 融合了以上两者的优点）</p><h3 id="七-使用sqlc"><a href="#七-使用sqlc" class="headerlink" title="七.使用sqlc"></a>七.使用sqlc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlc init</span><br></pre></td></tr></table></figure><p>介绍:</p><p>sqlc 从 SQL 生成<strong>类型安全的代码</strong>。以下是它的工作原理：</p><ol><li>您使用 SQL 编写查询。</li><li>运行 sqlc 来生成具有这些查询的类型安全接口的代码。</li><li>编写调用生成的代码的应用程序代码。</li></ol><p>查看<a href="https://play.sqlc.dev/">一个交互式示例</a>来了解它的实际应用，以及 sqlc 背后的动机的<a href="https://conroy.org/introducing-sqlc">介绍性博客文章</a>。</p><h3 id="八-sqlc-yaml"><a href="#八-sqlc-yaml" class="headerlink" title="八.sqlc.yaml"></a>八.sqlc.yaml</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;2&quot;</span></span><br><span class="line">sql:</span><br><span class="line">- schema: <span class="string">&quot;simplebank/db/migration&quot;</span> <span class="comment">//数据库表</span></span><br><span class="line">  queries: <span class="string">&quot;db/query&quot;</span> <span class="comment">//数据库查询 首先要编写数据库查询</span></span><br><span class="line">  engine: <span class="string">&quot;postgresql&quot;</span> <span class="comment">//使用的数据库</span></span><br><span class="line">  gen:</span><br><span class="line">    <span class="keyword">go</span>: </span><br><span class="line">      <span class="keyword">package</span>: <span class="string">&quot;db&quot;</span></span><br><span class="line">      out: <span class="string">&quot;simplebank/db/sqlc&quot;</span></span><br><span class="line">      sql_package: <span class="string">&quot;pgx/v5&quot;</span></span><br><span class="line">      emit_json_tags: <span class="literal">true</span></span><br><span class="line">      emit_interface: <span class="literal">false</span></span><br><span class="line">      emit_empty_slices: <span class="literal">true</span></span><br><span class="line">      overrides:</span><br><span class="line">        - db_type: <span class="string">&quot;timestamptz&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;time.Time&quot;</span></span><br><span class="line">        - db_type: <span class="string">&quot;uuid&quot;</span></span><br><span class="line">          go_type: <span class="string">&quot;github.com/google/uuid.UUID&quot;</span></span><br></pre></td></tr></table></figure><p>account.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: CreateAccount :one</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts (</span><br><span class="line">  owner,</span><br><span class="line">  balance,</span><br><span class="line">  currency</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">  $<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span></span><br><span class="line">) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><h4 id="make-sqlc-生成代码"><a href="#make-sqlc-生成代码" class="headerlink" title="make sqlc 生成代码"></a>make sqlc 生成代码</h4><h5 id="1-account-sql-go"><a href="#1-account-sql-go" class="headerlink" title="1.account.sql.go"></a>1.account.sql.go</h5><h5 id="2-db-go"><a href="#2-db-go" class="headerlink" title="2.db.go"></a>2.db.go</h5><h5 id="3-models-go"><a href="#3-models-go" class="headerlink" title="3.models.go"></a>3.models.go</h5><p><strong>在生成之后由于没有 初始化项目 使得项目报红</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go mod init project/simplebank</span><br><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="九-编写单元测试用例"><a href="#九-编写单元测试用例" class="headerlink" title="九.编写单元测试用例"></a>九.编写单元测试用例</h3><p>1.导入未使用的包在前面添加_可以防止系统自动将它删除</p><p>例如：</p><p>_ “github.com&#x2F;lib&#x2F;pq “</p><p>错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec)</span><br><span class="line">have Exec(string, ...any) (sql.Result, error)</span><br><span class="line">want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span><br><span class="line"></span><br><span class="line">        你遇到的错误信息表明，你尝试将 *sql.DB 类型的 conn 变量用作 DBTX 类型的参数，但 *sql.DB 并不满足 DBTX 接口的要求。具体来说，DBTX 接口期望的 Exec 方法签名是 (context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag, error)，而 *sql.DB 提供的 Exec 方法签名是 (string, ...any) (sql.Result, error)。</span><br></pre></td></tr></table></figure><p><strong>目前不理解  方法和接口 开始学习</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是接口</span></span><br><span class="line"><span class="keyword">type</span> DBTX <span class="keyword">interface</span> &#123;</span><br><span class="line">Exec(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgconn.CommandTag, <span class="type">error</span>)</span><br><span class="line">Query(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) (pgx.Rows, <span class="type">error</span>)</span><br><span class="line">QueryRow(context.Context, <span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;) pgx.Row</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">string</span>, ...<span class="keyword">interface</span>&#123;&#125;<span class="comment">//的含义这是可变参数的声明方式。它表示可以接收零个或多个任意类型的参数。在函数内部，这些参数被视为一个 []interface&#123;&#125;（一个接口类型的切片）。</span></span><br><span class="line">例如，如果有一个函数接受一个字符串和任意数量的其他参数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunction</span><span class="params">(s <span class="type">string</span>, args...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以这样调用这个函数：</span><br><span class="line">myFunction(<span class="string">&quot;hello&quot;</span>, <span class="number">1</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 在这段代码中有一个这样的错误我不知道怎么修改cannot use conn (variable of type *sql.DB) as DBTX value in argument to New: *sql.DB does not implement DBTX (wrong type for method Exec) have Exec(string, ...any) (sql.Result, error) want Exec(context.Context, string, ...interface&#123;&#125;) (pgconn.CommandTag,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">要解决这个问题，你需要确保你的 DBTX 接口的方法签名与 *sql.DB 的实现匹配。具体来说，你需要修改 DBTX 接口的 Exec 方法，使其接受 context.Context 参数。以下是一个可能的解决方案：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">修改 DBTX 接口，使其 Exec 方法的签名为：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBTX interface &#123;</span></span><br><span class="line"><span class="comment">    Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error)</span></span><br><span class="line"><span class="comment">    // 其他方法...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">在你的 New 函数中，确保它接受符合 DBTX 接口的类型。例如，使用 sql.DB 时，你可以创建一个适配器来实现 DBTX 接口。</span></span><br><span class="line"><span class="comment">这里是一个适配器示例：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type DBAdapter struct &#123;</span></span><br><span class="line"><span class="comment">    *sql.DB</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func (db *DBAdapter) Exec(ctx context.Context, query string, args ...interface&#123;&#125;) (pgconn.CommandTag, error) &#123;</span></span><br><span class="line"><span class="comment">    result, err := db.DB.ExecContext(ctx, query, args...)</span></span><br><span class="line"><span class="comment">    return result, err</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">然后在 TestMain 中使用这个适配器：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">testQueries = New(&amp;DBAdapter&#123;conn&#125;)</span></span><br><span class="line"><span class="comment">这样就能确保 *sql.DB 能正确实现 DBTX 接口，从而解决你遇到的错误。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!gpt给出解决问题的方法在我不知道用pgx的情况下 gpt给出用pgx连接</span><br><span class="line">给gpt看完接口定义之后</span><br><span class="line">由于你的 DBTX 接口使用了 pgx 库，你可以使用 pgx 的 Conn 类型而不是 *sql.DB。这里是一个简单的解决方案：</span><br><span class="line">使用 pgx 连接：确保在代码中使用 pgx 的连接，而不是 *sql.DB。修改你的数据库连接部分：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dbDriver = <span class="string">&quot;pgx&quot;</span></span><br><span class="line">dbSource = <span class="string">&quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line">conn, err := pgx.Connect(context.Background(), dbSource)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">testQueries = New(conn) <span class="comment">// 确保 New 函数接收 pgx.Conn</span></span><br><span class="line"></span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line">确保 New 函数接受 pgx.Conn：在你的 New 函数中，确保它接受 pgx.Conn 而不是 *sql.DB。</span><br><span class="line">这样，你的 DBTX 接口与 pgx 的连接就能正常工作，避免了类型不匹配的问题。这样也简化了代码，直接使用了 pgx 连接而不需要适配器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="10-8日-解决目前为止遇见的一个问题"><a href="#10-8日-解决目前为止遇见的一个问题" class="headerlink" title="10.8日 解决目前为止遇见的一个问题"></a>10.8日 解决目前为止遇见的一个问题</h4><p><em>遇见的第一个大问题 在account_test.go中和main_test.go中出现的一些问题</em></p><p>*和姐聊了一下 解决了 **testQueries &#x3D; New(conn)*<em>中的问题</em></p><p><em>main_test.go使用 pgx来连接数据库 而不是视频中讲解的sql.open 他们的返回值类型不同造成了错误</em></p><p>测试函数的拼写错误 可能也影响了一大部分</p><p>还有最后一处问题</p><ol><li><code>require.NotEmpty(t, err)</code>这一行存在问题。这里应该是检查<code>account</code>是否不为空，而不是检查错误<code>err</code>是否不为空。正确的应该是<code>require.NotEmpty(t, account)</code>。</li></ol><p>不熟悉的地方go语言的包 接口 方法</p><hr><h4 id="1-最终的account-test-go代码"><a href="#1-最终的account-test-go代码" class="headerlink" title="1.最终的account_test.go代码"></a>1.最终的account_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    <span class="string">&quot;xiaozhao&quot;</span>,</span><br><span class="line">Balance:  <span class="number">100</span>,</span><br><span class="line">Currency: <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-最终的main-test-go代码"><a href="#2-最终的main-test-go代码" class="headerlink" title="2.最终的main_test.go代码"></a>2.最终的main_test.go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testQueries *Queries</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">DATABASE_URL = <span class="string">&quot;postgres://root:secret@localhost:5432/simple_bank?sslmode=disable&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMain</span><span class="params">(m *testing.M)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">conn, err := pgx.Connect(context.Background(), DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">&quot;Unable to connect to database: %v\n&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(context.Background())</span><br><span class="line"></span><br><span class="line">testQueries = New(conn)</span><br><span class="line">os.Exit(m.Run())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试通过！！！！！！！</span></span><br></pre></td></tr></table></figure><p><strong>上面是指定了一个一个账户 我们想让账户的主人 货币 钱是随机的 编写util中的random代码</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rng *rand.Rand</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    source := rand.NewSource(time.Now().UnixNano())</span><br><span class="line">    rng = rand.New(source)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个介于 min max 之间的随机的 int64 数字</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomInt</span><span class="params">(min, max <span class="type">int64</span>)</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> min + rng.Int63n(max-min+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 n 个字符的随机字符串</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomString</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sb strings.Builder</span><br><span class="line">    k := <span class="built_in">len</span>(alphabet)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        c := alphabet[rng.Intn(k)]</span><br><span class="line">        sb.WriteByte(c)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.String()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成owner</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomOwner</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomString(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机生成钱的数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandomMoney</span><span class="params">()</span></span> <span class="type">int64</span>&#123;</span><br><span class="line"><span class="keyword">return</span> RandomInt(<span class="number">0</span>,<span class="number">1000</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机产生一种货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandowCurrency</span><span class="params">()</span></span> <span class="type">string</span>&#123;</span><br><span class="line">currencies := []<span class="type">string</span>&#123;<span class="string">&quot;RMB&quot;</span>,<span class="string">&quot;USD&quot;</span>,<span class="string">&quot;CAD&quot;</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(currencies)</span><br><span class="line"><span class="keyword">return</span> currencies[rand.Intn(n)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**学会如何把自己写的包导入到别的文件夹下  这个需要看go mod下的 module project&#x2F;simplebank  **</p><p><strong>把moudle中的包作为起始路径 导入到别的文件夹下  就是：”project&#x2F;simplebank&#x2F;util”</strong></p><p>ok 截止到 10.8日随机生成的数据生成功</p><hr><p><strong>问题2</strong></p><p>makefile文件中的下面这个指令</p><p><strong>test:</strong></p><p><strong>go test -v -cover .&#x2F;…     这个指令必须在当前目录下找到go的测试文件</strong></p><p><strong>就是go.mod文件应该和makefile保持在一起</strong>    解决方法在本地的go.mod文件夹下又创建了一个makefile 用来测试 make test</p><p>类型断言 interface代表为止类型 使用前需要 转换为具体类型   (从未知类型转为已知类型)</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var i interface&#123;&#125; = 2</span><br><span class="line">num1， ok ：= i.(int)//断言</span><br></pre></td></tr></table></figure><hr><h4 id="3-account-test-go代码："><a href="#3-account-test-go代码：" class="headerlink" title="3.account_test.go代码："></a>3.account_test.go代码：</h4><p>全部测试通过！</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomAccount</span><span class="params">(t *testing.T)</span></span> Account &#123;</span><br><span class="line">arg := CreateAccountParams&#123;</span><br><span class="line">Owner:    util.RandomOwner(),</span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account, err := testQueries.CreateAccount(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Owner, account.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account.Balance)</span><br><span class="line">require.Equal(t, arg.Currency, account.Currency)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, account.ID)</span><br><span class="line">require.NotZero(t, account.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, account1.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line">arg := UpdateAccountParams&#123;</span><br><span class="line">ID:      account1.ID,</span><br><span class="line">Balance: util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">account2, err := testQueries.UpdateAccount(context.Background(), arg)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, account2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, account1.ID, account2.ID)</span><br><span class="line">require.Equal(t, account1.Owner, account2.Owner)</span><br><span class="line">require.Equal(t, arg.Balance, account2.Balance)</span><br><span class="line">require.Equal(t, account1.Currency, account2.Currency)</span><br><span class="line"></span><br><span class="line">require.WithinDuration(t, account1.CreatedAt.Time, account2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDeleteAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">err := testQueries.DeleteAccount(context.Background(), account1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">account2, err := testQueries.GetAccount(context.Background(), account1.ID)</span><br><span class="line">require.Error(t, err)</span><br><span class="line"><span class="comment">//require.EqualError(t, err, sql.ErrNoRows.Error())</span></span><br><span class="line">require.Empty(t, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListAccount</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lastAccount Account</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">lastAccount = createRandomAccount(t)</span><br><span class="line">&#125;</span><br><span class="line">arg := ListAccountsParams&#123;</span><br><span class="line">Owner:  lastAccount.Owner,</span><br><span class="line">Limit:  <span class="number">5</span>, <span class="comment">//返回五条记录</span></span><br><span class="line">Offset: <span class="number">0</span>, <span class="comment">//设置偏移量 返回后五条记录  这里出现了问题！！！！</span></span><br><span class="line">&#125;</span><br><span class="line">accounts, err := testQueries.ListAccounts(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, accounts)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, account := <span class="keyword">range</span> accounts &#123;</span><br><span class="line">require.NotEmpty(t, account)</span><br><span class="line">require.Equal(t, lastAccount.Owner, account.Owner)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="4-entry-test-go"><a href="#4-entry-test-go" class="headerlink" title="4.entry_test.go"></a>4.entry_test.go</h4><p>条目上的account.id要和account表单上的di相对应</p><p><strong>问题</strong></p><p><strong>id为null</strong></p><p><em><strong>在 PostgreSQL 中，如果一个表的 <code>id</code> 字段没有设置为自增序列（如 <code>bigserial</code>），并且你在插入数据时没有显式地为 <code>id</code> 字段指定值，那么 <code>id</code> 字段的值将会是 <code>NULL</code>，除非该字段设置了默认值。</strong></em></p><p><strong>解决办法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建一个序列：首先，你需要创建一个序列，这个序列将用于生成 id 列的值。</span><br><span class="line">   <span class="keyword">CREATE</span> SEQUENCE entries_id_seq;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置序列的所有权：将序列与 id 列关联起来。</span><br><span class="line">   <span class="keyword">ALTER</span> SEQUENCE entries_id_seq OWNED <span class="keyword">BY</span> entries.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置 id 列的默认值为序列的下一个值：这样，每当你插入新行而没有指定 id 值时，PostgreSQL 会自动使用序列的下一个值。</span><br><span class="line">   <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> entries <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> id <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;entries_id_seq&#x27;</span>);</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>4确保 <code>id</code> 列是主键</strong>：从你提供的信息来看，<code>id</code> 列已经是主键。确保这一点很重要，因为主键约束可以保证 <code>id</code> 列的值是唯一的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">测试：插入一条新记录，不指定 id 值，检查是否自动生成了 id。</span><br><span class="line">   <span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id, amount, created_at) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">100</span>, now());</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> entries <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">4</span>; 删除特定行的指令</span><br></pre></td></tr></table></figure><p>创建账单成功！</p><p>但是只能生成一个数据？？？</p><p>我发现了输出的区别 Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestCreateEntry$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc</p><p>ok  project&#x2F;simplebank&#x2F;db&#x2F;sqlc(cached) 这是第二次输出        第一次输出没有cached字样 数据正确的加载到了数据库 但是这个带有cached的数据没有加载到数据库</p><p><strong>因为 cached 是因为两次的数据相同 所以才没有被加载到数据库 这个可能是随机数代码的问题</strong></p><hr><h4 id="5-transfer-test-go"><a href="#5-transfer-test-go" class="headerlink" title="5.transfer_test.go"></a>5.transfer_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomTransfer</span><span class="params">(t *testing.T, account1, account2 Account)</span></span> Transfer &#123;</span><br><span class="line">arg := createTransferParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account2.ID,</span><br><span class="line">Amount:        util.RandomMoney(),</span><br><span class="line">&#125;</span><br><span class="line">transfer, err := testQueries.createTransfer(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.FromAccountID, transfer.FromAccountID)</span><br><span class="line">require.Equal(t, arg.ToAccountID, transfer.ToAccountID)</span><br><span class="line">require.Equal(t, arg.Amount, transfer.Amount)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, transfer.ID)</span><br><span class="line">require.NotZero(t, transfer.CreatedAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> transfer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line">transfer1 := createRandomTransfer(t, account1, account2)</span><br><span class="line"></span><br><span class="line">transfer2, err := testQueries.GetTransfer(context.Background(), transfer1.ID)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, transfer2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, transfer1.ID, transfer2.ID)</span><br><span class="line">require.Equal(t, transfer1.FromAccountID, transfer2.FromAccountID)</span><br><span class="line">require.Equal(t, transfer1.ToAccountID, transfer2.ToAccountID)</span><br><span class="line">require.Equal(t, transfer1.Amount, transfer2.Amount)</span><br><span class="line">require.WithinDuration(t, transfer1.CreatedAt.Time, transfer2.CreatedAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestListTransfer</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">account1 := createRandomAccount(t)</span><br><span class="line">account2 := createRandomAccount(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">createRandomTransfer(t, account1, account2)</span><br><span class="line">createRandomTransfer(t, account2, account1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := ListTransfersParams&#123;</span><br><span class="line">FromAccountID: account1.ID,</span><br><span class="line">ToAccountID:   account1.ID,</span><br><span class="line">Limit:         <span class="number">5</span>,</span><br><span class="line">Offset:        <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transfers, err := testQueries.ListTransfers(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Len(t, transfers, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, transfer := <span class="keyword">range</span> transfers &#123;</span><br><span class="line">require.NotEmpty(t, transfer)</span><br><span class="line">require.True(t, transfer.FromAccountID == account1.ID || transfer.ToAccountID == account1.ID)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十-db-transaction"><a href="#十-db-transaction" class="headerlink" title="十.db transaction"></a>十.db transaction</h3><p>BEGIN语句启动事务</p><p>成功 则更新数据库</p><p>失败 则回滚事务（保持原来的状态）</p><p>​</p><p>代码对不上了 决定先复制粘贴 学习数据库中的知识点</p><p><strong>先从config.go开始</strong></p><hr><h3 id="十一-config-go"><a href="#十一-config-go" class="headerlink" title="十一.config.go"></a>十一.config.go</h3><p><strong>使用viper</strong></p><p>创建app.env文件存储配置信息</p><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Config stores all configuration of the application.</span></span><br><span class="line"><span class="comment">// The values are read by viper from a config file or environment variable.</span></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">DATABASE_URL <span class="type">string</span> <span class="string">`mapstructure:&quot;DATABASE_URL&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadConfig reads configuration from file or environment variables.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LoadConfig</span><span class="params">(path <span class="type">string</span>)</span></span> (config Config, err <span class="type">error</span>) &#123;</span><br><span class="line">viper.AddConfigPath(path)</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;env&quot;</span>)</span><br><span class="line"></span><br><span class="line">viper.AutomaticEnv()</span><br><span class="line"></span><br><span class="line">err = viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = viper.Unmarshal(&amp;config)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>使用接口来简化一些操作好好学接口</p><p>目前为止更正了大部分问题接着往下学。。。。</p><p><strong>store.test.go出现了大问题</strong></p><p><strong>报错：</strong></p><p>**Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project&#x2F;simplebank&#x2F;db&#x2F;sqlc &gt;&gt; before: 1984 3906 — FAIL: TestTransferTx (0.03s)    e:\projects\simplebank\db\sqlc\store_test.go:83:         Error Trace:e:&#x2F;projects&#x2F;simplebank&#x2F;db&#x2F;sqlc&#x2F;store_test.go:83        Error:      Should NOT be empty, but was {0  0  {0001-01-01 00:00:00 +0000 UTC finite false}}        Test:       TestTransferTx FAIL FAILproject&#x2F;simplebank&#x2F;db&#x2F;sqlc**<strong>0.571s</strong></p><p>因为还没编写代码。。。。。草草草草操操操操哦哦操操操这视频叫我看的</p><hr><h3 id="十二-需要仔细处理并发-交易-以避免死锁"><a href="#十二-需要仔细处理并发-交易-以避免死锁" class="headerlink" title="十二.需要仔细处理并发 交易 以避免死锁"></a>十二.需要仔细处理并发 交易 以避免死锁</h3><p>数据库事务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; before: 6892 6969</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6979</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; tx: 6882 6989</span></span><br><span class="line">--- FAIL: TestTransferTx (0.04s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:102: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:102</span><br><span class="line">        Error:      Not equal: </span><br><span class="line">                    expected: 10</span><br><span class="line">                    actual  : 20</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc0.602s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个问题出在</p><p>account.sql.go他无法阻止一些东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- name: GetAccount :one</span><br><span class="line">SELECT * FROM accounts</span><br><span class="line">WHERE id = $1 LIMIT 1;</span><br></pre></td></tr></table></figure><p><strong>在两个终端中并行运行两个事务来观察这个问题</strong></p><p><em>BEGIN；开始事务</em></p><p><em>ROLLBACK；回滚事务</em></p><p>：第一个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">WARNING:  there is already a transaction in progress</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# ROLLBACK;</span><br><span class="line">ROLLBACK</span><br><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"> id |  owner   | balance | currency |         created_at</span><br><span class="line">----+----------+---------+----------+----------------------------</span><br><span class="line">  1 | xiaozhao |     100 | USD      | 2024-10-08 09:03:03.272176</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>第二个终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# BEGIN;</span><br><span class="line">BEGIN</span><br><span class="line">simple_bank=# SELECT * FROM accounts WHERE id=1 FOR UPDATE;</span><br><span class="line"></span><br><span class="line">这里会被阻止 并且必须等待第一个事务提交或回滚</span><br></pre></td></tr></table></figure><p>纠正方法1： 在sql中添加 ： 重新用make sqlc生成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>但是接下来出现了死锁错误：</p><p>添加日志寻找错误</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Running tool: D:\Go\bin\go.exe test -timeout 30s -run ^TestTransferTx$ project/simplebank/db/sqlc</span><br><span class="line"></span><br><span class="line">&gt;&gt; before: 1826 5993</span><br><span class="line">tx 5 Create transfer</span><br><span class="line">tx 5 Create entry 1</span><br><span class="line">tx 5 Create entry 2</span><br><span class="line">tx 5 get account 1</span><br><span class="line">tx 2 Create transfer</span><br><span class="line">tx 5 update account 1</span><br><span class="line">tx 5 get account 2</span><br><span class="line">tx 4 Create transfer</span><br><span class="line">tx 5 update account 2</span><br><span class="line">tx 3 Create transfer</span><br><span class="line">tx 2 Create entry 1</span><br><span class="line">tx 4 Create entry 1</span><br><span class="line">tx 3 Create entry 1</span><br><span class="line">tx 1 Create transfer</span><br><span class="line">tx 2 Create entry 2</span><br><span class="line">tx 4 Create entry 2</span><br><span class="line">tx 3 Create entry 2</span><br><span class="line">tx 2 get account 1</span><br><span class="line">tx 4 get account 1</span><br><span class="line">tx 3 get account 1</span><br><span class="line">&gt;&gt; tx: 1816 6003</span><br><span class="line">tx 1 Create entry 1</span><br><span class="line">tx 1 Create entry 2</span><br><span class="line">tx 1 get account 1</span><br><span class="line">--- FAIL: TestTransferTx (0.95s)</span><br><span class="line">    e:\projects\simplebank\db\sqlc\store_test.go:52: </span><br><span class="line">        Error Trace:e:/projects/simplebank/db/sqlc/store_test.go:52</span><br><span class="line">        Error:      Received unexpected error:</span><br><span class="line">                    ERROR: deadlock detected (SQLSTATE 40P01)</span><br><span class="line">        Test:       TestTransferTx</span><br><span class="line">FAIL</span><br><span class="line">FAILproject/simplebank/db/sqlc1.470s</span><br><span class="line">FAIL</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>终端事务出现错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br></pre></td></tr></table></figure><ol><li><ul><li>第一个错误 <code>INSERT INFO transfers</code> 是语法错误，正确的语法是 <code>INSERT INTO transfers</code>。</li></ul></li></ol><ul><li>第二个错误 <code>INSERT INTO transfers (from_account_id to_account_id amount)</code> 也存在语法错误，缺少逗号分隔列名。正确的写法是 <code>INSERT INTO transfers (from_account_id, to_account_id, amount)</code>。</li></ul><ol start="2"><li><strong>当前事务已中止</strong>：<ul><li>由于之前的 SQL 语句（可能是第一条插入语句）出错，事务被标记为 “aborted”。这意味着在该事务中的所有后续 SQL 命令都将失败，直到事务被回滚。</li></ul></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p><strong>结束当前事务</strong>：</p><ul><li><p>在 PostgreSQL 中，你可以通过以下命令结束当前事务并回滚更改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="终端阻塞-事务状态"><a href="#终端阻塞-事务状态" class="headerlink" title="终端阻塞 事务状态"></a>终端阻塞 事务状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 确认当前事务状态</span><br><span class="line">在 PostgreSQL 中，如果一个事务因为某种原因（例如错误或未处理的异常）而中断，那么所有后续的 SQL 语句将会被忽略，直到你执行 ROLLBACK 或 COMMIT。首先，确保没有事务在进行中。</span><br><span class="line"></span><br><span class="line">你可以使用以下命令查看当前活动的事务：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="operator">^</span>CCancel request sent</span><br><span class="line">ERROR:  canceling statement due <span class="keyword">to</span> <span class="keyword">user</span> request</span><br><span class="line">CONTEXT:  <span class="keyword">SQL</span> statement &quot;SELECT 1 FROM ONLY &quot;public&quot;.&quot;accounts&quot; x WHERE &quot;id&quot; OPERATOR(pg_catalog.=) $1 FOR KEY SHARE OF x&quot;</span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"> datid <span class="operator">|</span>   datname   <span class="operator">|</span> pid <span class="operator">|</span> usesysid <span class="operator">|</span> usename <span class="operator">|</span> application_name <span class="operator">|</span> client_addr <span class="operator">|</span> client_hostname <span class="operator">|</span> client_port <span class="operator">|</span>         backend_start         <span class="operator">|</span>          xact_start           <span class="operator">|</span>          query_start          <span class="operator">|</span>         state_change</span><br><span class="line"> <span class="operator">|</span> wait_event_type <span class="operator">|</span>  wait_event   <span class="operator">|</span> state  <span class="operator">|</span> backend_xid <span class="operator">|</span> backend_xmin <span class="operator">|</span>                                            query                                            <span class="operator">|</span>  backend_type</span><br><span class="line"><span class="comment">-------+-------------+-----+----------+---------+------------------+-------------+-----------------+-------------+-------------------------------+-------------------------------+-------------------------------+-------------------------------+-----------------+---------------+--------+-------------+--------------+---------------------------------------------------------------------------------------------+----------------</span></span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">810</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">51.115963</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094842</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">09.094867</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span>                 <span class="operator">|</span>               <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pg_stat_activity <span class="keyword">WHERE</span> state <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;                                      <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">802</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">07.854964</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850035</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09.850039</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">965</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">782</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">58.685461</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014409</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">47.014413</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">963</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">775</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">51</span>:<span class="number">51.971697</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">52</span>:<span class="number">16.478898</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280622</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">12</span>:<span class="number">57</span>:<span class="number">54.280627</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> tuple         <span class="operator">|</span> active <span class="operator">|</span>         <span class="number">964</span> <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>; <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">556</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql             <span class="operator">|</span>             <span class="operator">|</span>                 <span class="operator">|</span>          <span class="number">-1</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">29</span>:<span class="number">44.776508</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">11.909182</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551023</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-10</span> <span class="number">11</span>:<span class="number">56</span>:<span class="number">24.551027</span><span class="operator">+</span><span class="number">00</span> <span class="operator">|</span> Lock            <span class="operator">|</span> transactionid <span class="operator">|</span> active <span class="operator">|</span>             <span class="operator">|</span>          <span class="number">935</span> <span class="operator">|</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;                                               <span class="operator">|</span> client backend</span><br><span class="line"> <span class="number">16385</span> <span class="operator">|</span> simple_bank <span class="operator">|</span> <span class="number">638</span> <span class="operator">|</span>       <span class="number">10</span> <span class="operator">|</span> root    <span class="operator">|</span> psql          </span><br></pre></td></tr></table></figure><hr><p>从你提供的 <code>pg_stat_activity</code> 的查询结果来看，有多个活跃的事务正在等待锁。这可能是导致你无法执行 <code>INSERT</code> 操作的原因。以下是一些步骤，可以帮助你诊断并解决这个问题：</p><h4 id="1-识别并终止阻塞的事务"><a href="#1-识别并终止阻塞的事务" class="headerlink" title="1. 识别并终止阻塞的事务"></a>1. <strong>识别并终止阻塞的事务</strong></h4><p>你的查询结果显示了多个 <code>INSERT</code> 操作在等待锁。可以尝试强制终止这些阻塞的事务，以释放锁并允许你的操作继续进行。首先，记录下阻塞的 <code>pid</code>（进程 ID），然后使用以下命令终止它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>802</code>、<code>782</code> 和 <code>775</code> 是阻塞的 <code>pid</code>。请根据你的实际情况调整这条命令。</p><h4 id="2-确认事务的状态"><a href="#2-确认事务的状态" class="headerlink" title="2. 确认事务的状态"></a>2. <strong>确认事务的状态</strong></h4><p>如果终止了这些连接，确保你没有其他活跃的事务在运行。你可以再次运行以下命令确认：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_stat_activity WHERE state = &#x27;active&#x27;;</span><br></pre></td></tr></table></figure><h4 id="3-尝试再次执行插入"><a href="#3-尝试再次执行插入" class="headerlink" title="3. 尝试再次执行插入"></a>3. <strong>尝试再次执行插入</strong></h4><p>在确保没有其他事务阻塞后，尝试重新执行你的插入操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;  <span class="comment">-- 开始新的事务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id, to_account_id, amount) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>) RETURNING <span class="operator">*</span>;  <span class="comment">-- 执行插入</span></span><br><span class="line"><span class="keyword">COMMIT</span>;  <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line">指令；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="4-如果问题依然存在"><a href="#4-如果问题依然存在" class="headerlink" title="4. 如果问题依然存在"></a>4. <strong>如果问题依然存在</strong></h4><p>如果问题依然存在，建议检查数据库的锁状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pg_locks WHERE granted = false;</span><br></pre></td></tr></table></figure><p><strong>又产生错误</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">simple_bank=# SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775,556,638,810);</span><br><span class="line">FATAL:  terminating connection due to administrator command</span><br><span class="line">server closed the connection unexpectedly</span><br><span class="line">        This probably means the server terminated abnormally</span><br><span class="line">        before or while processing the request.</span><br><span class="line">The connection to the server was lost. Attempting reset: Succeeded.</span><br></pre></td></tr></table></figure><p>回答：</p><p>看起来你在尝试终止阻塞的连接时，PostgreSQL 服务器意外关闭了连接。这可能是由于以下几个原因：</p><ol><li><strong>服务器崩溃</strong>：可能是因为在终止连接时，某个后台进程遇到了问题，导致服务器崩溃。</li><li><strong>资源不足</strong>：如果你的 PostgreSQL 服务器资源不足（例如内存或 CPU），在处理请求时可能会出现这种情况。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">由于服务器崩溃，重启 Docker 容器可能会帮助你恢复连接：</span><br><span class="line"></span><br><span class="line">docker restart postgres12</span><br><span class="line">在重启后检查连接：</span><br><span class="line"></span><br><span class="line">重启后，尝试重新连接到数据库，并检查活动连接：</span><br><span class="line"></span><br><span class="line">SELECT * FROM pg_stat_activity;</span><br><span class="line">再次终止阻塞的连接：</span><br><span class="line"></span><br><span class="line">如果连接正常，尝试再次运行终止命令：</span><br><span class="line"></span><br><span class="line">SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid IN (802, 782, 775, </span><br></pre></td></tr></table></figure><hr><p><strong>git上传一个项目没有共同历史</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">检查是否有共同历史</span><br><span class="line">git log --oneline --graph --all</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">强制合并冲突</span><br><span class="line">git pull origin main --allow-unrelated-histories</span><br></pre></td></tr></table></figure><hr><p>终端1：在没有阻塞的情况下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">100</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">600</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="number">1</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在终端一提交事务时 终端二会显示出结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">simple_bank<span class="operator">=</span># <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"> id <span class="operator">|</span>  owner   <span class="operator">|</span> balance <span class="operator">|</span> currency <span class="operator">|</span>         created_at</span><br><span class="line"><span class="comment">----+----------+---------+----------+----------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> xiaozhao <span class="operator">|</span>     <span class="number">600</span> <span class="operator">|</span> USD      <span class="operator">|</span> <span class="number">2024</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">03.272176</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">simple_bank<span class="operator">=</span>#</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql QUERIER</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> transfers (from_account_id,to_account_id,amount) <span class="keyword">VALUE</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">-10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> entries (account_id,amount) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">10</span>) RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">90</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id <span class="operator">=</span><span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance <span class="operator">=</span> <span class="number">110</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> RETURNING <span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="5-postgres-lock：帮助查询哪里有锁"><a href="#5-postgres-lock：帮助查询哪里有锁" class="headerlink" title="5.postgres lock：帮助查询哪里有锁"></a>5.postgres lock：帮助查询哪里有锁</h4><p>The following query may be helpful to see what processes are blocking SQL statements (these only find row-level locks, not object-level locks).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT blocked_locks.pid     AS blocked_pid,</span><br><span class="line">       blocked_activity.usename  AS blocked_user,</span><br><span class="line">       blocking_locks.pid     AS blocking_pid,</span><br><span class="line">       blocking_activity.usename AS blocking_user,</span><br><span class="line">       blocked_activity.query    AS blocked_statement,</span><br><span class="line">       blocking_activity.query   AS current_statement_in_blocking_process</span><br><span class="line"> FROM  pg_catalog.pg_locks         blocked_locks</span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = blocked_locks.pid</span><br><span class="line">  JOIN pg_catalog.pg_locks         blocking_locks </span><br><span class="line">      ON blocking_locks.locktype = blocked_locks.locktype</span><br><span class="line">      AND blocking_locks.database IS NOT DISTINCT FROM blocked_locks.database</span><br><span class="line">      AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation</span><br><span class="line">      AND blocking_locks.page IS NOT DISTINCT FROM blocked_locks.page</span><br><span class="line">      AND blocking_locks.tuple IS NOT DISTINCT FROM blocked_locks.tuple</span><br><span class="line">      AND blocking_locks.virtualxid IS NOT DISTINCT FROM blocked_locks.virtualxid</span><br><span class="line">      AND blocking_locks.transactionid IS NOT DISTINCT FROM blocked_locks.transactionid</span><br><span class="line">      AND blocking_locks.classid IS NOT DISTINCT FROM blocked_locks.classid</span><br><span class="line">      AND blocking_locks.objid IS NOT DISTINCT FROM blocked_locks.objid</span><br><span class="line">      AND blocking_locks.objsubid IS NOT DISTINCT FROM blocked_locks.objsubid</span><br><span class="line">      AND blocking_locks.pid != blocked_locks.pid</span><br><span class="line"></span><br><span class="line">  JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid</span><br><span class="line"> WHERE NOT blocked_locks.granted;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>; 这条语句阻塞了</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Here<span class="string">&#x27;s an alternate view of that same data that includes an idea how old the state is</span></span><br><span class="line"><span class="string"># 列出所有锁</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SELECT a.datname,</span></span><br><span class="line"><span class="string">         l.relation::regclass,</span></span><br><span class="line"><span class="string">         l.transactionid, //事务id</span></span><br><span class="line"><span class="string">         l.mode, 锁的mod</span></span><br><span class="line"><span class="string">         l.GRANTED,</span></span><br><span class="line"><span class="string">         a.usename,  who</span></span><br><span class="line"><span class="string">         a.query, </span></span><br><span class="line"><span class="string">         a.query_start,</span></span><br><span class="line"><span class="string">         age(now(), a.query_start) AS &quot;age&quot;,</span></span><br><span class="line"><span class="string">         a.pid</span></span><br><span class="line"><span class="string">FROM pg_stat_activity a</span></span><br><span class="line"><span class="string">JOIN pg_locks l ON l.pid = a.pid</span></span><br><span class="line"><span class="string">ORDER BY a.query_start;</span></span><br></pre></td></tr></table></figure><p><strong>死锁是由外键约束引起的</strong></p><p>1.删除约束</p><p>修改sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name: GetAccountForUpdate :one</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> $<span class="number">1</span> LIMIT <span class="number">1</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">NO</span> KEY <span class="keyword">UPDATE</span>;<span class="operator">/</span><span class="operator">/</span>这步时解决死锁的关键</span><br></pre></td></tr></table></figure><p>避免死锁是关键：微调事务中的查询</p><h3 id="十三-隔离级别"><a href="#十三-隔离级别" class="headerlink" title="十三.隔离级别"></a>十三.隔离级别</h3><p>数据库事务必须满足 ACID 原子性  一致性 隔离性 持久性</p><hr><h4 id="Read-Phenomenaa"><a href="#Read-Phenomenaa" class="headerlink" title="Read Phenomenaa"></a>Read Phenomenaa</h4><h4 id="1-脏读"><a href="#1-脏读" class="headerlink" title="1.脏读"></a>1.脏读</h4><p>当一个事务读取了   其他并发事务写入的尚未提交的数据（导致 如果尚未提交的数据 最终回滚 可能导致用到错误的数据 ）</p><h4 id="2-不可重复读"><a href="#2-不可重复读" class="headerlink" title="2.不可重复读"></a>2.不可重复读</h4><p>当一个事务两次读取到同一记录并看到不同的值  因为第一次读取后提交的其他事务修改</p><h4 id="3-幻读"><a href="#3-幻读" class="headerlink" title="3.幻读"></a>3.幻读</h4><p>影响多行</p><h4 id="4-四种隔离级别"><a href="#4-四种隔离级别" class="headerlink" title="4.四种隔离级别"></a>4.四种隔离级别</h4><p>READ UNCOMMITMED： 可以看到其他未提交事务写入的数据</p><p>READ COMMITED：只能看到其他事务已经提交的数据</p><p>REPEATABLE READ:</p><p>SERIALIZABLE:</p><h4 id="5-mysql选择隔离级别"><a href="#5-mysql选择隔离级别" class="headerlink" title="5.mysql选择隔离级别"></a>5.mysql选择隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> sexxion transaction isolation level read commited;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @@一种隔离级别</span><br></pre></td></tr></table></figure><h4 id="6-postgresql选择隔离级别-只有三个"><a href="#6-postgresql选择隔离级别-只有三个" class="headerlink" title="6.postgresql选择隔离级别 只有三个"></a>6.postgresql选择隔离级别 只有三个</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在postgresql中 未提交和已提交是一个级别</span><br><span class="line">show transaction isolation level</span><br><span class="line"></span><br><span class="line">set transaction isolation level read uncommited</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十四-持续集成或CI"><a href="#十四-持续集成或CI" class="headerlink" title="十四.持续集成或CI"></a>十四.持续集成或CI</h3><p><strong>自动化构建和测试流程进行验证</strong></p><h4 id="1-Github-Action"><a href="#1-Github-Action" class="headerlink" title="1.Github Action"></a>1.Github Action</h4><p>首先上传项目到github时如果出现了连接问题 就切换成ssh连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:Whuichenggong/projects.git</span><br><span class="line">PS E:\projects&gt; git pull origin main --tags</span><br><span class="line">From github.com:Whuichenggong/projects</span><br><span class="line"> * branch            main       -&gt; FETCH_HEAD</span><br></pre></td></tr></table></figure><p>创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo. &gt; .github\workflows\ci.yml</span><br></pre></td></tr></table></figure><p>安装工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">golang migrate</span><br></pre></td></tr></table></figure><p>但是目前我看不到页面我的action</p><h3 id="十五-RESTful-HEEP-API"><a href="#十五-RESTful-HEEP-API" class="headerlink" title="十五.RESTful HEEP API"></a>十五.RESTful HEEP API</h3><h4 id="1-创建api文件夹"><a href="#1-创建api文件夹" class="headerlink" title="1.创建api文件夹"></a>1.创建api文件夹</h4><p><strong>account.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateAccountRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Owner    <span class="type">string</span> <span class="string">`json:&quot;owner&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Currency <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,oneof= USD EUR&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createAccount(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateAccountRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateAccountParams&#123;</span><br><span class="line">Owner:    req.Owner,</span><br><span class="line">Currency: req.Currency,</span><br><span class="line">Balance:  <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>server.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config util.Config</span><br><span class="line">store  db.Store</span><br><span class="line">router *gin.Engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store: store,</span><br><span class="line">&#125;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/api&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v5/pgxpool&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot load config:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connPool, err := pgxpool.New(context.Background(), config.DATABASE_URL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot connect to db:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化数据库服务</span></span><br><span class="line">store := db.NewStore(connPool)</span><br><span class="line"><span class="comment">//运行gin框架</span></span><br><span class="line">runGinServer(config, store)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;cannot start server:&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runGinServer</span><span class="params">(config util.Config, store db.Store)</span></span> &#123;</span><br><span class="line">server, err := api.NewServer(config, store)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot create server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">err = server.Start(config.HTTPServerAddress)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;cannot start server: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据库重置</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name;</span><br><span class="line">   </span><br><span class="line">PostgreSQL 数据库：</span><br><span class="line">使用 <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 语句：</span><br><span class="line"></span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name RESTART <span class="keyword">IDENTITY</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> accounts, entries RESTART <span class="keyword">IDENTITY</span>; 同时截断两个表</span><br></pre></td></tr></table></figure><p><strong>listaccount.go</strong></p><p>用postman请求时：&#x2F;&#x2F;查询参数</p><p><strong>page_id     1</strong></p><p><strong>page_size   5</strong></p><p><strong>在使用多组查找的时候没有找到用户？？？</strong></p><p>目前为止还是无法解决</p><hr><p>找了喜春学哥帮我找到了问题的所在在ListAccounts中 传进去的arg.Owner是个空值导致了出现了问题 把arg.Owner改成一个数据库中具体的值 就能找到问题的所在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner<span class="comment">/*问题所在*/</span>, arg.Limit, arg.Offset)</span><br></pre></td></tr></table></figure><hr><h4 id="2-模拟数据库测试"><a href="#2-模拟数据库测试" class="headerlink" title="2.模拟数据库测试"></a>2.模拟数据库测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用mock</span><br><span class="line"> go get github.com/golang/mock/mockgen@v1.6.0</span><br><span class="line"> </span><br><span class="line">PS E:\projects\simplebank\db\mock&gt; mockgen -destination db/mock/store.go project/simplebank/db/sqlc Store </span><br></pre></td></tr></table></figure><h4 id="3-account-test-go"><a href="#3-account-test-go" class="headerlink" title="3.account_test.go"></a>3.account_test.go</h4><p>出现的问题</p><hr><p>你提到的问题是由于 <code>mock_sqlc.MockStore</code> 未完全实现 <code>db.Store</code> 接口，特别是缺少 <code>createTransfer</code> 方法。为了解决这个问题，您可以采取以下步骤：</p><p>解决步骤：</p><ol><li><strong>确认 <code>db.Store</code> 接口的定义：</strong></li></ol><p>首先，确保 <code>db.Store</code> 接口定义了所有需要的方法。特别是，确认接口中是否包含 <code>createTransfer</code> 方法。</p><p>也就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在你当前的测试代码中，store := mockdb.NewMockStore(ctrl) 返回的确实是 *mockdb.MockStore 类型，而 NewServer 需要的参数是 db.Store 接口类型。那么为什么没有类型错误呢？这是因为在 Go 中，接口是基于方法集实现的，而 *mockdb.MockStore 实现了 db.Store 接口中的所有方法。</span><br><span class="line"></span><br><span class="line">具体原因分析：</span><br><span class="line">接口实现方式：在 Go 语言中，接口并不关心你传递的具体类型（如 *mockdb.MockStore），它只关心该类型是否实现了接口中定义的所有方法。如果 *mockdb.MockStore 实现了 db.Store 接口的所有方法，那么它就可以被赋值给 db.Store 类型的变量。</span><br><span class="line"></span><br><span class="line">gomock 的自动生成：你使用 gomock 生成了 *mockdb.MockStore，这个 mock 类型会模拟 db.Store 接口的所有方法。因为它是通过 gomock 自动生成的，并且已经包含了 db.Store 中的所有方法，所以它实际上是符合 db.Store 接口的实现。</span><br><span class="line"></span><br><span class="line">类型匹配：在 Go 中，赋值 *mockdb.MockStore 给 db.Store 类型是可以的，因为 *mockdb.MockStore 实现了 db.Store 接口。即便 *mockdb.MockStore 是一个具体类型，只要它的方法集与 db.Store 接口的方法集匹配，Go 会认为它是一个合法的接口实现。</span><br><span class="line"></span><br><span class="line">为什么没有错误？</span><br><span class="line">由于 *mockdb.MockStore 实现了 db.Store 接口的所有方法，Go 编译器允许将 *mockdb.MockStore 传递给 NewServer 这个需要 db.Store 类型的函数参数。具体的原因是：</span><br><span class="line"></span><br><span class="line">NewMockStore 生成的 mock 类型实现了 db.Store 的所有方法，因此符合 db.Store 接口。</span><br><span class="line">在 Go 语言中，接口实现是隐式的，不需要显式声明实现接口，只要结构体的方法集与接口匹配即可。</span><br></pre></td></tr></table></figure><p>方法 1：使用类型断言验证</p><p>在 Go 中，你可以通过<strong>静态类型检查</strong>来验证一个类型是否实现了某个接口。具体方法是使用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _ db.Store = (*mockdb.MockStore)(nil)</span><br></pre></td></tr></table></figure><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAccountAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">config, err := util.LoadConfig(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;配置文件出错&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//user, _ := randomUser(t)</span></span><br><span class="line">account := randomAccount()</span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">url := fmt.Sprintf(<span class="string">&quot;/accounts/%d&quot;</span>, tc.accountID)</span><br><span class="line">request, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">//tc.setupAuth(t, request, server.tokenMaker)</span></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(t, recorder)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomAccount</span><span class="params">()</span></span> db.Account &#123;</span><br><span class="line"><span class="keyword">return</span> db.Account&#123;</span><br><span class="line">ID: util.RandomInt(<span class="number">1</span>, <span class="number">1000</span>),</span><br><span class="line"><span class="comment">//Owner:    owner,</span></span><br><span class="line">Balance:  util.RandomMoney(),</span><br><span class="line">Currency: util.RandomCurrency(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchAccount</span><span class="params">(t *testing.T, body *bytes.Buffer, account db.Account)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotAccount db.Account</span><br><span class="line">err = json.Unmarshal(data, &amp;gotAccount)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, account, gotAccount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在这段代码中有不懂的地方</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"></span><br><span class="line">store是 *mockdb.MockStore类型</span><br><span class="line">而<span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) 需要的是db.store类型</span><br><span class="line">server, _ := NewServer(config, store)</span><br><span class="line"><span class="comment">//我觉得这是自相矛盾</span></span><br></pre></td></tr></table></figure><p><strong>切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="type">string</span></span><br><span class="line">accountID <span class="type">int64</span></span><br><span class="line"><span class="comment">//setupAuth     func(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line"><span class="comment">// setupAuth: func(t *testing.T, request *http.Request, tokenMaker token.Maker) &#123;</span></span><br><span class="line"><span class="comment">// addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(account, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchAccount(t, recorder.Body, account)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, sql.ErrNoRows)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>目前的问题是notfound处理不符合预期</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:      <span class="string">&quot;NotFound&quot;</span>,</span><br><span class="line">accountID: account.ID,</span><br><span class="line">setupAuth: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, request *http.Request, tokenMaker token.Maker)</span></span> &#123;</span><br><span class="line">addAuthorization(t, request, tokenMaker, authorizationTypeBearer, user.Username, user.Role, time.Minute)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().</span><br><span class="line">GetAccount(gomock.Any(), gomock.Eq(account.ID)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(db.Account&#123;&#125;, db.ErrRecordNotFound)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusNotFound, recorder.Code)<span class="comment">//我手动把 recorder.Code换成404jiu&#x27;cheng&#x27;gogn</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h4 id="4-transfer-go"><a href="#4-transfer-go" class="headerlink" title="4.transfer.go"></a>4.transfer.go</h4><p>Currency      string <code>json:&quot;currency&quot; binding:&quot;required,currency&quot;</code> 添加了currency验证器 因为正常json不能识别USD等货币</p><p>实现思路 在go run mian.go后使用gin框架请求路由前 使用自己添加的数字验证器</p><p>在server.go中添加如下内容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;USD&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config: config,</span><br><span class="line">store:  store,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccount)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">server.router = router</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> transferRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">FromAccountID <span class="type">int64</span>  <span class="string">`json:&quot;from_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">ToAccountID   <span class="type">int64</span>  <span class="string">`json:&quot;to_account&quot; binding:&quot;required,min=1&quot;`</span></span><br><span class="line">Amount        <span class="type">int64</span>  <span class="string">`json:&quot;amount&quot; binding:&quot;required,gt=0&quot;`</span></span><br><span class="line">Currency      <span class="type">string</span> <span class="string">`json:&quot;currency&quot; binding:&quot;required,currency&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createTransfer(ctx *gin.Context) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req transferRequest</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 FromAccount</span></span><br><span class="line">fromAccount, valid := server.validAccount(ctx, req.FromAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并处理 ToAccount</span></span><br><span class="line">toAccount, valid := server.validAccount(ctx, req.ToAccountID, req.Currency)</span><br><span class="line"><span class="keyword">if</span> !valid &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg := db.TransferTxParams&#123;</span><br><span class="line">FromAccountID: fromAccount.ID,</span><br><span class="line">ToAccountID:   toAccount.ID,</span><br><span class="line">Amount:        req.Amount,</span><br><span class="line">&#125;</span><br><span class="line">result, err := server.store.TransferTx(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查id和货币</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> validAccount(ctx *gin.Context, accountID <span class="type">int64</span>, currency <span class="type">string</span>) (db.Account, <span class="type">bool</span>) &#123;</span><br><span class="line">account, err := server.store.GetAccount(ctx, accountID)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> account.Currency != currency &#123;</span><br><span class="line">err := fmt.Errorf(<span class="string">&quot;account [%d] currency mismatch: %s vs %s&quot;</span>, account.ID, account.Currency, currency)</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> account, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用postman测试得到的内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;transfer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;from_account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;to_account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afmxtl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">103</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:33:43.423875Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_account&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;owner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bdupue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currency&quot;</span><span class="punctuation">:</span> <span class="string">&quot;USD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-13T13:37:04.113466Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">-12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;to_entry&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;account_id&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20T04:53:01.433988Z&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="十六-用户身份验证和授权"><a href="#十六-用户身份验证和授权" class="headerlink" title="十六.用户身份验证和授权"></a>十六.用户身份验证和授权</h3><h4 id="1-建user数据库表"><a href="#1-建user数据库表" class="headerlink" title="1.建user数据库表"></a>1.建user数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Use DBML <span class="keyword">to</span> <span class="keyword">define</span> your database structure</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> Docs: https:<span class="operator">/</span><span class="operator">/</span>dbml.dbdiagram.io<span class="operator">/</span>docs</span><br><span class="line"><span class="keyword">Table</span> <span class="keyword">user</span> <span class="keyword">as</span> U&#123;</span><br><span class="line">  username carchar [pk]</span><br><span class="line">  hashed_paassword <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  full_name <span class="type">varchar</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  email <span class="type">varchar</span> [<span class="keyword">unique</span>, <span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  password_changed_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">default</span>: `<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z`]</span><br><span class="line">  create_at timestamptz [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> accounts <span class="keyword">as</span> A &#123;</span><br><span class="line">  id bigser [pk]</span><br><span class="line">  owner <span class="type">varchar</span> [<span class="keyword">ref</span>:<span class="operator">&gt;</span> U.username,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  balance <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  currency <span class="type">varchar</span>  [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`] </span><br><span class="line"></span><br><span class="line">  Indexes &#123;</span><br><span class="line">    (owner, currency) [<span class="keyword">unique</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> entries &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>] </span><br><span class="line">  </span><br><span class="line">  amount <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  account_id</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Table</span> transfers &#123;</span><br><span class="line">  id <span class="type">bigint</span> [pk]</span><br><span class="line">  from_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  to_account_id <span class="type">bigint</span> [<span class="keyword">ref</span> : <span class="operator">&gt;</span> A.id,<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  amount  <span class="type">bigint</span> [<span class="keyword">not</span> <span class="keyword">null</span>]</span><br><span class="line">  created_at <span class="type">timestamp</span> [<span class="keyword">not</span> <span class="keyword">null</span>,<span class="keyword">default</span>: `now()`]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Indexes &#123;</span><br><span class="line">  from_account_id</span><br><span class="line">  to_account_id</span><br><span class="line">  (from_account_id,to_account_id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建数据库迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate create -ext sql -dir db/migration -seq add_users</span><br></pre></td></tr></table></figure><p>出现了错误</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">make migrateup</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose up</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> <span class="keyword">Start</span> buffering <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> Read <span class="keyword">and</span> <span class="keyword">execute</span> <span class="number">2</span><span class="operator">/</span>u add_users</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">11</span>:<span class="number">16</span> error: migration failed: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot; (<span class="keyword">column</span> <span class="number">69</span>) <span class="keyword">in</span> line <span class="number">6</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;user&quot; (</span><br><span class="line">  &quot;username&quot; carchar <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  &quot;hashed_paassword&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;full_name&quot; <span class="type">varchar</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;email&quot; <span class="type">varchar</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  &quot;password_changed_at&quot; <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (<span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>Z),</span><br><span class="line">  &quot;create_at&quot; timestamptz <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;accounts&quot; <span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (&quot;owner&quot;) <span class="keyword">REFERENCES</span> &quot;user&quot; (&quot;username&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">--CREATE UNIQUE INDEX ON &quot;accounts&quot; (&quot;owner&quot;, &quot;currency&quot;);</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &quot;acounts&quot; <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> &quot;owner_currency-unique&quot; <span class="keyword">UNIQUE</span> (&quot;owner&quot;, &quot;currency&quot;) (details: pq: syntax error <span class="keyword">at</span> <span class="keyword">or</span> near &quot;00&quot;)</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migrateup] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：违反了外键约束</p><h3 id="十七-迁移失败原因"><a href="#十七-迁移失败原因" class="headerlink" title="十七.迁移失败原因"></a>十七.迁移失败原因</h3><p><strong>sql语句写错了 IF写成ID</strong></p><p>**理解去除外键等 **</p><h4 id="2-问题："><a href="#2-问题：" class="headerlink" title="2.问题："></a>2.问题：</h4><p>在执行数据库迁移时，出现的错误是因为在 <code>accounts</code> 表上有外键依赖 (<code>transfers</code> 表中的 <code>transfers_from_account_id_fkey</code> 和 <code>transfers_to_account_id_fkey</code> 约束依赖于 <code>accounts</code> 表)。当你尝试删除 <code>accounts</code> 表时，PostgreSQL 不允许删除这个表，因为还有其他表（如 <code>transfers</code>）依赖它。</p><p>但是执行了migrateup指令就会出现脏读现象 使得数据库版本变为2 所以我们要先回退到1版本</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make migratedown</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">34</span> <span class="keyword">Are</span> you sure you want <span class="keyword">to</span> apply <span class="keyword">all</span> down migrations? [y<span class="operator">/</span>N]</span><br><span class="line">y</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> Applying <span class="keyword">all</span> down migrations</span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">36</span> error: Dirty database version <span class="number">2.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>修改迁移表的值为 FALSE：没管用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">执行migratedown操作时失败，并出现错误信息 “cannot <span class="keyword">drop</span> <span class="keyword">table</span> accounts because other objects depend <span class="keyword">on</span> it”，这表明accounts表有其他数据库对象依赖于它。</span><br><span class="line">原因包括：</span><br><span class="line">transfers表中的外键约束引用了accounts表。</span><br><span class="line">直接删除含外键的表会引发错误。</span><br><span class="line">建议：</span><br><span class="line">修改迁移脚本，先删除依赖的对象，如约束、触发器、视图等。</span><br><span class="line">使用CASCADE选项强制删除所有依赖的对象。</span><br><span class="line">在 makefile 中为migrate命令添加条件检查。</span><br><span class="line">可能的迁移修正示例：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers CASCADE;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><h4 id="3-解除外键约束"><a href="#3-解除外键约束" class="headerlink" title="3.解除外键约束"></a>3.解除外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">你可以按以下步骤修改你的迁移文件，确保先删除外键约束，再删除相关的表。</span><br><span class="line"></span><br><span class="line">删除外键约束： 在迁移文件中，先删除 transfers 表中的外键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_from_account_id_fkey;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> transfers <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> IF <span class="keyword">EXISTS</span> transfers_to_account_id_fkey;</span><br><span class="line"></span><br><span class="line">删除表： 然后，按顺序删除表：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> transfers;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> entries;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br></pre></td></tr></table></figure><p>migrate 出现的错误可能就是   把外键依赖删除然后在执行数据库迁移语句</p><hr><p>有没有可能你在写数据库迁移的时候就没有在migratedown中加入 删除外键约束的语句呢从而导致这么麻烦？？？</p><hr><p>编写migratedown时操作是和migrateup相反的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-问题："><a href="#4-问题：" class="headerlink" title="4.问题："></a>4.问题：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make migratedown1</span><br><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; <span class="operator">-</span>verbose down <span class="number">1</span></span><br><span class="line"><span class="number">2024</span><span class="operator">/</span><span class="number">10</span><span class="operator">/</span><span class="number">20</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">21</span> error: Dirty database version <span class="number">1.</span> Fix <span class="keyword">and</span> force version.</span><br><span class="line">make: <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> [migratedown1] 错误 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个错误信息表明数据库处于 “dirty” 状态，通常意味着上一次的迁移未成功完成，导致数据库的迁移版本与实际执行情况不一致。要解决这个问题，你可以尝试以下步骤：</p><h4 id="5-解决："><a href="#5-解决：" class="headerlink" title="5.解决："></a>5.解决：</h4><p>检查数据库的迁移状态</p><p>使用 <code>migrate</code> 查看当前的迁移状态，以确认哪个版本是 dirty：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; version</span><br></pre></td></tr></table></figure><p>这将显示当前数据库的版本号以及 dirty 状态。</p><p>强制迁移版本</p><p>使用 <code>migrate force</code> 命令将数据库状态恢复为干净的版本。你可以将其设置为版本 1，这样可以清除 “dirty” 标志，同时保留当前的版本号。</p><p>执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">migrate <span class="operator">-</span>path simplebank<span class="operator">/</span>db<span class="operator">/</span>migration <span class="operator">-</span>database &quot;postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable&quot; force <span class="number">1</span></span><br></pre></td></tr></table></figure><p>这个命令不会运行任何迁移，它只是将数据库的迁移版本重置为 1，同时将脏状态清除。</p><h4 id="6-检查当前数据库中的约束名"><a href="#6-检查当前数据库中的约束名" class="headerlink" title="6.检查当前数据库中的约束名"></a>6.检查当前数据库中的约束名</h4><p>如果不确定数据库中的约束名，可以通过以下 SQL 查询当前表中的约束名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> conname <span class="keyword">FROM</span> pg_constraint <span class="keyword">WHERE</span> conrelid <span class="operator">=</span> <span class="string">&#x27;accounts&#x27;</span>::regclass;</span><br></pre></td></tr></table></figure><p>每条语句后面要写分号啊啊啊啊！！！！！</p><h3 id="十八-user-test-go"><a href="#十八-user-test-go" class="headerlink" title="十八. user_test.go"></a>十八. user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createRandomUser</span><span class="params">(t *testing.T)</span></span> User &#123;</span><br><span class="line"></span><br><span class="line">arg := CreateUserParams&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := testStore.CreateUser(context.Background(), arg)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user)</span><br><span class="line"></span><br><span class="line">require.Equal(t, arg.Username, user.Username)</span><br><span class="line">require.Equal(t, arg.HashedPassword, user.HashedPassword)</span><br><span class="line">require.Equal(t, arg.FullName, user.FullName)</span><br><span class="line">require.Equal(t, arg.Email, user.Email)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, user.CreateAt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">createRandomUser(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUser</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user1 := createRandomUser(t)</span><br><span class="line">user2, err := testStore.GetUser(context.Background(), user1.Username)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, user2)</span><br><span class="line"></span><br><span class="line">require.Equal(t, user1.Username, user2.Username)</span><br><span class="line">require.Equal(t, user1.HashedPassword, user2.HashedPassword)</span><br><span class="line">require.Equal(t, user1.FullName, user2.FullName)</span><br><span class="line">require.Equal(t, user1.Email, user2.Email)</span><br><span class="line">require.WithinDuration(t, user1.PasswordChangedAt.Time, user2.PasswordChangedAt.Time, time.Second)</span><br><span class="line">require.WithinDuration(t, user1.CreateAt.Time, user2.CreateAt.Time, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在第29行代码有一个断言语句判断 ：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require.True(t, user.PasswordChangedAt.Time.IsZero())</span><br></pre></td></tr></table></figure><p>这个语句目前不能通过测试 往后看吧看看是么时候找到问题</p><h4 id="1-10-23外键约束问题"><a href="#1-10-23外键约束问题" class="headerlink" title="1. 10.23外键约束问题"></a>1. 10.23外键约束问题</h4><p>运行真个包测试出现的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个外键错误提示 &quot;ERROR: insert or update on table&quot;accounts&quot;violates foreign key constraint&quot;accounts_owner_fkey&quot;(SQLSTATE 23503)&quot; 意味着在尝试往 &quot;accounts&quot; 表中插入或更新数据时违反了名为 &quot;accounts_owner_fkey&quot; 的外键约束。</span><br></pre></td></tr></table></figure><p><strong>应该是    一个用户链接到账户 这就是主表与副表的关系  设置外键 将两个表链接到一起</strong></p><h4 id="2-数据库表出现错误"><a href="#2-数据库表出现错误" class="headerlink" title="2.数据库表出现错误"></a>2.数据库表出现错误</h4><p>数据库语句就写错了 正常每个表的 id序列都应该是自增的 如果不是这样将会出现以下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: null value in column &quot;id&quot; violates not-null constraint (SQLSTATE 23502)</span><br></pre></td></tr></table></figure><p>我们要重新修改数据库迁移语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE <span class="string">&quot;accounts&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;owner&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;balance&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;currency&quot;</span> varchar NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;entries&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE <span class="string">&quot;transfers&quot;</span> (</span><br><span class="line">  <span class="string">&quot;id&quot;</span> bigserial PRIMARY KEY,</span><br><span class="line">  <span class="string">&quot;from_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;to_account_id&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;amount&quot;</span> bigint NOT NULL,</span><br><span class="line">  <span class="string">&quot;created_at&quot;</span> timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;entries&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;from_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">ALTER TABLE <span class="string">&quot;transfers&quot;</span> ADD FOREIGN KEY (<span class="string">&quot;to_account_id&quot;</span>) REFERENCES <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;accounts&quot;</span> (<span class="string">&quot;owner&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;entries&quot;</span> (<span class="string">&quot;account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">CREATE INDEX ON <span class="string">&quot;transfers&quot;</span> (<span class="string">&quot;from_account_id&quot;</span>, <span class="string">&quot;to_account_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;entries&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;can be negative or positive&#x27;</span>;</span><br><span class="line"></span><br><span class="line">COMMENT ON COLUMN <span class="string">&quot;transfers&quot;</span>.<span class="string">&quot;amount&quot;</span> IS <span class="string">&#x27;must be positive&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改过后 正常运行account_test.go</p><h4 id="3-修改状态码"><a href="#3-修改状态码" class="headerlink" title="3.修改状态码"></a>3.修改状态码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">account, err := server.store.CreateAccount(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> pqErr, ok := err.(*pq.Error); ok &#123;</span><br><span class="line"><span class="keyword">switch</span> pqErr.Code.Name() &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;foreign_key_violation&quot;</span>, <span class="string">&quot;unique_violation&quot;</span>:</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Println(pqErr.Code.Name())</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现错误了 等待明天修改</p><p><strong>10.24</strong></p><p>将上述代码语句修改为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功解决了问题 。 这是为什么呢？？</p><p>应该是:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> errCode == db.ForeignKeyViolation || errCode == db.UniqueViolation</span><br></pre></td></tr></table></figure><p>这段代码起到了主要i作用</p><p>在error.go中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const (</span><br><span class="line">ForeignKeyViolation = &quot;23503&quot;</span><br><span class="line">UniqueViolation     = &quot;23505&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这代表了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ForeignKeyViolation 常量的值是 &quot;23503&quot;，它代表 PostgreSQL 中的一个错误代码。当执行的数据库操作违反外键约束时，会触发这个错误。外键约束保证了不同表之间的关系，如果尝试插入、更新或删除的数据并不能被其他表中的相关记录引用，就会抛出这个错误。</span><br><span class="line"></span><br><span class="line">UniqueViolation 常量的值是 &quot;23505&quot;，这也是一个 PostgreSQL 错误代码。当向需要唯一值的字段插入了重复的值时，会引发这个错误。违反唯一性约束意味着这样的操作将导致两个记录含有相同的值，这在数据库规则中通常是不允许的，因为唯一约束保护了记录唯一识别数据的能力。</span><br></pre></td></tr></table></figure><h3 id="十九-在数据库中安全的存储密码"><a href="#十九-在数据库中安全的存储密码" class="headerlink" title="十九.在数据库中安全的存储密码"></a>十九.在数据库中安全的存储密码</h3><h4 id="1-password-go"><a href="#1-password-go" class="headerlink" title="1.password.go"></a>1.password.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashPassword</span><span class="params">(password <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">hashedPassword, err := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;哈希加密失败:%w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(hashedPassword), <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkPassword</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckPassword</span><span class="params">(password <span class="type">string</span>, hashedPassword <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bcrypt.CompareHashAndPassword([]<span class="type">byte</span>(hashedPassword), []<span class="type">byte</span>(password))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-password-test-go"><a href="#2-password-test-go" class="headerlink" title="2.password_test.go"></a>2.password_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/crypto/bcrypt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPassword</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">password := RandomString(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">hashPassword, err := HashPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">err = CheckPassword(password, hashPassword)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">wrongPassword := RandomString(<span class="number">6</span>)</span><br><span class="line">err = CheckPassword(wrongPassword, hashPassword)</span><br><span class="line">require.EqualError(t, err, bcrypt.ErrMismatchedHashAndPassword.Error())</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-user-go"><a href="#3-user-go" class="headerlink" title="3.user.go"></a>3.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;fullname&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">account, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, account)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;full_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZhongHe Zhao&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhaozhonghe40@gmail.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password_changed_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;create_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-24T07:14:46.169687Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>想让返回结果没有 这个字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;hashed_password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$2a$10$RRGhHuYmPf9tRVPDckNI5.q6VJ1TzG9aFJ12edZglg7kp97vGwtKO&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rsp := CreateUserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br></pre></td></tr></table></figure><h3 id="二十-user-test-go"><a href="#二十-user-test-go" class="headerlink" title="二十.user_test.go"></a>二十.user_test.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httptest&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">mockdb <span class="string">&quot;project/simplebank/db/mock&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/golang/mock/gomock&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestCreateUserAPI</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">user, password := randomUser(t)</span><br><span class="line"></span><br><span class="line">testCases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name          <span class="type">string</span></span><br><span class="line">body          gin.H</span><br><span class="line">buildStubs    <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span></span><br><span class="line">checkResponse <span class="function"><span class="keyword">func</span><span class="params">(recoder *httptest.ResponseRecorder)</span></span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:  user.Username,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:  password,</span><br><span class="line"><span class="string">&quot;full_name&quot;</span>: user.FullName,</span><br><span class="line"><span class="string">&quot;email&quot;</span>:     user.Email,</span><br><span class="line">&#125;,</span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       user.Username,</span><br><span class="line">FullName:       user.FullName,</span><br><span class="line">Email:          user.Email,</span><br><span class="line">HashedPassword: user.HashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">store.EXPECT().</span><br><span class="line">CreateUser(gomock.Any(), EqCreateUserParams(arg, password)).</span><br><span class="line">Times(<span class="number">1</span>).</span><br><span class="line">Return(user, <span class="literal">nil</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Response code: %d\n&quot;</span>, recorder.Code)</span><br><span class="line">require.Equal(t, http.StatusOK, recorder.Code)</span><br><span class="line">requireBodyMatchUser(t, recorder.Body, user)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> testCases &#123;</span><br><span class="line">tc := testCases[i]</span><br><span class="line"></span><br><span class="line">t.Run(tc.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">ctrl := gomock.NewController(t)</span><br><span class="line"><span class="keyword">defer</span> ctrl.Finish()</span><br><span class="line"></span><br><span class="line">store := mockdb.NewMockStore(ctrl)</span><br><span class="line">tc.buildStubs(store)</span><br><span class="line"></span><br><span class="line">server := newTestServer(t, store)</span><br><span class="line">recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Marshal body data to JSON</span></span><br><span class="line">data, err := json.Marshal(tc.body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %s\n&quot;</span>, <span class="type">string</span>(data)) <span class="comment">// 打印请求体</span></span><br><span class="line">url := <span class="string">&quot;/users&quot;</span></span><br><span class="line">request, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(data))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">server.router.ServeHTTP(recorder, request)</span><br><span class="line">tc.checkResponse(recorder)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Request body: %v\n&quot;</span>, tc.body)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomUser</span><span class="params">(t *testing.T)</span></span> (user db.User, password <span class="type">string</span>) &#123;</span><br><span class="line">password = util.RandomString(<span class="number">6</span>)</span><br><span class="line">hashedPassword, err := util.HashedPassword(password)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">user = db.User&#123;</span><br><span class="line">Username:       util.RandomOwner(),</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">FullName:       util.RandomOwner(),</span><br><span class="line">Email:          util.RandomEmail(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">requireBodyMatchUser</span><span class="params">(t *testing.T, body *bytes.Buffer, user db.User)</span></span> &#123;</span><br><span class="line">data, err := io.ReadAll(body)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gotUser db.User</span><br><span class="line">err = json.Unmarshal(data, &amp;gotUser)</span><br><span class="line"></span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.Equal(t, user.Username, gotUser.Username)</span><br><span class="line">require.Equal(t, user.FullName, gotUser.FullName)</span><br><span class="line">require.Equal(t, user.Email, gotUser.Email)</span><br><span class="line">require.Empty(t, gotUser.HashedPassword)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gomock.Any()这个验证的 准确度太低 任何测试基本都能通过</p><p>解决方法 使用 新的自定义匹配器</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">type</span> eqCreateUserParamsMatcher <span class="keyword">struct</span> &#123;</span><br><span class="line">arg      db.CreateUserParams</span><br><span class="line">password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> Matches(x <span class="keyword">interface</span>&#123;&#125;) <span class="type">bool</span> &#123;</span><br><span class="line">arg, ok := x.(db.CreateUserParams)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err := util.CheckPassword(e.password, arg.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">e.arg.HashedPassword = arg.HashedPassword</span><br><span class="line"><span class="keyword">return</span> reflect.DeepEqual(e.arg, arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e eqCreateUserParamsMatcher)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;matches arg %v and password %v&quot;</span>, e.arg, e.password)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EqCreateUserParams</span><span class="params">(arg db.CreateUserParams, password <span class="type">string</span>)</span></span> gomock.Matcher &#123;</span><br><span class="line"><span class="keyword">return</span> eqCreateUserParamsMatcher&#123;arg, password&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h4><p><strong>长记性 json的字段名错误 我测试了一下午</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FullName string <code>json:&quot;full_name&quot; binding:&quot;required&quot;</code>这里的json标签我把full_name 写成了fullname</p><h3 id="二十一-JWT"><a href="#二十一-JWT" class="headerlink" title="二十一.JWT"></a>二十一.JWT</h3><h4 id="1-JSON-Web令牌"><a href="#1-JSON-Web令牌" class="headerlink" title="1.JSON Web令牌"></a>1.JSON Web令牌</h4><p>密钥算法</p><p>服务器一般使用RSA 和 RS256来验证令牌</p><p>对称算法</p><p>非对称算法</p><p>必须在服务器代码中 检查令牌的算法标头</p><p>JWT令牌的很多问题：</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184159996.png" alt="image-20241026184159996"></p><p>RASETO作为替代JWT的安全方案</p><p><img src="C:\Users\30413\AppData\Roaming\Typora\typora-user-images\image-20241026184634250.png" alt="image-20241026184634250"></p><h4 id="2-基于令牌的身份验证的工作原理是什么？"><a href="#2-基于令牌的身份验证的工作原理是什么？" class="headerlink" title="2.基于令牌的身份验证的工作原理是什么？"></a>2.基于令牌的身份验证的工作原理是什么？</h4><p>基于令牌的身份验证从用户登录至系统、设备或应用程序开始，通常使用密码或安全问题。授权服务器验证初始身份验证，然后发放访问令牌，访问令牌是一小段数据，允许客户端应用程序向 API 服务器发出安全调用或信号。</p><p>基于令牌的身份验证的工作原理是为服务器提供第二种高度可靠的方式来验证用户的身份和请求的真实性。</p><p>完成该基于令牌的初始身份验证协议后，令牌就像盖了章的票据一样：用户可以在令牌生命周期内连续无缝访问相关资源，而无需重新进行身份验证。 该生命周期在用户注销或退出应用程序时结束，也可由设定的超时协议触发。</p><h4 id="3-基于令牌的身份验证有何益处？"><a href="#3-基于令牌的身份验证有何益处？" class="headerlink" title="3.基于令牌的身份验证有何益处？"></a>3.基于令牌的身份验证有何益处？</h4><p>基于令牌的身份验证能为多个利益相关者提供许多便利：</p><ul><li><strong>即时的用户体验</strong>：用户无需在每次返回系统、应用程序或网页时重新输入凭据并重新进行身份验证，只要令牌仍然有效（通常会持续到会话因注销或退出而结束），用户就可以保持即时访问。</li><li><strong>增加了数字安全性</strong>：基于令牌的身份验证在传统的基于密码或基于服务器的身份验证之上又增加了一道安全保护。通常，令牌比密码更难被窃取、被黑客入侵或以其他方式泄露。</li><li><strong>管理员控制</strong>：基于令牌的身份验证为管理员提供了对每个用户操作和事项的更精细的控制和可见性。</li><li><strong>减轻技术负担</strong>：由于令牌生成可以与令牌验证完全分离，因此验证可以由辅助服务（如 Entrust 身份和访问管理解决方案提供的服务）来处理。这将显著减少内部服务器和设备上的负载。</li></ul><h3 id="二十二-编写令牌"><a href="#二十二-编写令牌" class="headerlink" title="二十二.编写令牌"></a>二十二.编写令牌</h3><h4 id="make-go"><a href="#make-go" class="headerlink" title="make.go"></a>make.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maker is an interface for managing tokens</span></span><br><span class="line"><span class="keyword">type</span> Maker <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line">CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line">VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="payload-go"><a href="#payload-go" class="headerlink" title="payload.go"></a>payload.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Different types of error returned by the VerifyToken function</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrInvalidToken = errors.New(<span class="string">&quot;token is invalid&quot;</span>)</span><br><span class="line">ErrExpiredToken = errors.New(<span class="string">&quot;token has expired&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Payload contains the payload data of the token</span></span><br><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        uuid.UUID <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Username  <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">Role      <span class="type">string</span>    <span class="string">`json:&quot;role&quot;`</span></span><br><span class="line">IssuedAt  time.Time <span class="string">`json:&quot;issued_at&quot;`</span></span><br><span class="line">ExpiredAt time.Time <span class="string">`json:&quot;expired_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPayload creates a new token payload with a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPayload</span><span class="params">(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration)</span></span> (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">tokenID, err := uuid.NewRandom()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload := &amp;Payload&#123;</span><br><span class="line">ID:        tokenID,</span><br><span class="line">Username:  username,</span><br><span class="line">Role:      role,</span><br><span class="line">IssuedAt:  time.Now(),</span><br><span class="line">ExpiredAt: time.Now().Add(duration),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Valid checks if the token payload is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(payload *Payload)</span></span> Valid() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> time.Now().After(payload.ExpiredAt) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="jwt-maker-go"><a href="#jwt-maker-go" class="headerlink" title="jwt_maker.go"></a>jwt_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minSecretKeySize = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JWTMaker is a JSON Web Token maker</span></span><br><span class="line"><span class="keyword">type</span> JWTMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">secretKey <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewJWTMaker creates a new JWTMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewJWTMaker</span><span class="params">(secretKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(secretKey) &lt; minSecretKeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be at least %d characters&quot;</span>, minSecretKeySize)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;JWTMaker&#123;secretKey&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> CreateToken(username <span class="type">string</span>, role <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, *Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, role, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodHS256, payload)</span><br><span class="line">token, err := jwtToken.SignedString([]<span class="type">byte</span>(maker.secretKey))</span><br><span class="line"><span class="keyword">return</span> token, payload, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *JWTMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">keyFunc := <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span></span> (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line">_, ok := token.Method.(*jwt.SigningMethodHMAC)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(maker.secretKey), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jwtToken, err := jwt.ParseWithClaims(token, &amp;Payload&#123;&#125;, keyFunc)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">verr, ok := err.(*jwt.ValidationError)</span><br><span class="line"><span class="keyword">if</span> ok &amp;&amp; errors.Is(verr.Inner, ErrExpiredToken) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrExpiredToken</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload, ok := jwtToken.Claims.(*Payload)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jwt_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/dgrijalva/jwt-go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestJWTMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">role := util.DepositorRole</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.Equal(t, role, payload.Role)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredJWTToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestInvalidJWTTokenAlgNone</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">payload, err := NewPayload(util.RandomOwner(), time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">jwtToken := jwt.NewWithClaims(jwt.SigningMethodNone, payload)</span><br><span class="line">token, err := jwtToken.SignedString(jwt.UnsafeAllowNoneSignatureType)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">payload, err = maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrInvalidToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作者说 passeto是比JWT更简洁更好用</p><h4 id="passeto-maker-go"><a href="#passeto-maker-go" class="headerlink" title="passeto_maker.go"></a>passeto_maker.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aead/chacha20poly1305&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/o1egl/paseto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PasetoMaker is a PASETO token maker</span></span><br><span class="line"><span class="keyword">type</span> PasetoMaker <span class="keyword">struct</span> &#123;</span><br><span class="line">paseto       *paseto.V2</span><br><span class="line">symmetricKey []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPasetoMaker creates a new PasetoMaker</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPasetoMaker</span><span class="params">(symmetricKey <span class="type">string</span>)</span></span> (Maker, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(symmetricKey) != chacha20poly1305.KeySize &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;invalid key size: must be exactly %d characters&quot;</span>, chacha20poly1305.KeySize)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">maker := &amp;PasetoMaker&#123;</span><br><span class="line">paseto:       paseto.NewV2(),</span><br><span class="line">symmetricKey: []<span class="type">byte</span>(symmetricKey),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateToken creates a new token for a specific username and duration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> CreateToken(username <span class="type">string</span>, duration time.Duration) (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">payload, err := NewPayload(username, duration)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> maker.paseto.Encrypt(maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VerifyToken checks if the token is valid or not</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(maker *PasetoMaker)</span></span> VerifyToken(token <span class="type">string</span>) (*Payload, <span class="type">error</span>) &#123;</span><br><span class="line">payload := &amp;Payload&#123;&#125;</span><br><span class="line"></span><br><span class="line">err := maker.paseto.Decrypt(token, maker.symmetricKey, payload, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrInvalidToken</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = payload.Valid()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> payload, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="paseto-make-test-go"><a href="#paseto-make-test-go" class="headerlink" title="paseto_make_test.go"></a>paseto_make_test.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;testing&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/stretchr/testify/require&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPasetoMaker</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewJWTMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">username := util.RandomOwner()</span><br><span class="line">duration := time.Minute</span><br><span class="line"></span><br><span class="line">issuedAt := time.Now()</span><br><span class="line">expiredAt := issuedAt.Add(duration)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(username, duration)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, payload)</span><br><span class="line"></span><br><span class="line">require.NotZero(t, payload.ID)</span><br><span class="line">require.Equal(t, username, payload.Username)</span><br><span class="line">require.WithinDuration(t, issuedAt, payload.IssuedAt, time.Second)</span><br><span class="line">require.WithinDuration(t, expiredAt, payload.ExpiredAt, time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExpiredPasetoToken</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">maker, err := NewPasetoMaker(util.RandomString(<span class="number">32</span>))</span><br><span class="line">require.NoError(t, err)</span><br><span class="line"></span><br><span class="line">token, err := maker.CreateToken(util.RandomOwner(), -time.Minute)</span><br><span class="line">require.NoError(t, err)</span><br><span class="line">require.NotEmpty(t, token)</span><br><span class="line"></span><br><span class="line">payload, err := maker.VerifyToken(token)</span><br><span class="line">require.Error(t, err)</span><br><span class="line">require.EqualError(t, err, ErrExpiredToken.Error())</span><br><span class="line">require.Nil(t, payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//None算法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-28学习如何用令牌登录api"><a href="#10-28学习如何用令牌登录api" class="headerlink" title="10.28学习如何用令牌登录api"></a>10.28学习如何用令牌登录api</h3><h4 id="1-server-go"><a href="#1-server-go" class="headerlink" title="1.server.go"></a>1.server.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/token&quot;</span></span><br><span class="line"><span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/go-playground/validator/v10&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">config     util.Config</span><br><span class="line">store      db.Store</span><br><span class="line">router     *gin.Engine</span><br><span class="line">tokenMaker token.Maker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义验证函数，检查 currency 是否为 &quot;USD&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validCurrency</span><span class="params">(fl validator.FieldLevel)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">currency := fl.Field().String()</span><br><span class="line"><span class="keyword">return</span> currency == <span class="string">&quot;RMB&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupValidator() &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := binding.Validator.Engine().(*validator.Validate); ok &#123;</span><br><span class="line">v.RegisterValidation(<span class="string">&quot;currency&quot;</span>, validCurrency)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewServer</span><span class="params">(config util.Config, store db.Store)</span></span> (*Server, <span class="type">error</span>) &#123;</span><br><span class="line">tokenMaker, err := token.NewPasetoMaker(config.TokenSymmetricKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Key length in bytes: %d\n&quot;</span>, <span class="built_in">len</span>([]<span class="type">byte</span>(config.TokenSymmetricKey)))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;cannot create token maker: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server := &amp;Server&#123;</span><br><span class="line">config:     config,</span><br><span class="line">store:      store,</span><br><span class="line">tokenMaker: tokenMaker,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册自定义验证器</span></span><br><span class="line">server.setupValidator()</span><br><span class="line">server.setupRouter()</span><br><span class="line"><span class="keyword">return</span> server, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> setupRouter() &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;/users/login&quot;</span>, server.loginUser)</span><br><span class="line"></span><br><span class="line">router.POST(<span class="string">&quot;transfers&quot;</span>, server.createTransfer)</span><br><span class="line">router.POST(<span class="string">&quot;/accounts&quot;</span>, server.createAccount)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts/:id&quot;</span>, server.getAccount)</span><br><span class="line">router.POST(<span class="string">&quot;/users&quot;</span>, server.createUser)</span><br><span class="line">router.GET(<span class="string">&quot;/accounts&quot;</span>, server.listAccounts)</span><br><span class="line"></span><br><span class="line">server.router = router</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">errorResponse</span><span class="params">(err <span class="type">error</span>)</span></span> gin.H &#123;</span><br><span class="line"><span class="keyword">return</span> gin.H&#123;<span class="string">&quot;error&quot;</span>: err.Error()&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> Start(address <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> server.router.Run(address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-user-go"><a href="#2-user-go" class="headerlink" title="2.user.go"></a>2.user.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">db <span class="string">&quot;project/simplebank/db/sqlc&quot;</span></span><br><span class="line">util <span class="string">&quot;project/simplebank/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="comment">//&quot;github.com/jackc/pgtype&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreateUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">FullName <span class="type">string</span> <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email    <span class="type">string</span> <span class="string">`json:&quot;email&quot; binding:&quot;required,email&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Username          <span class="type">string</span>    <span class="string">`json:&quot;username&quot;`</span></span><br><span class="line">FullName          <span class="type">string</span>    <span class="string">`json:&quot;full_name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Email             <span class="type">string</span>    <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">PasswordChangedAt time.Time <span class="string">`json:&quot;password_changed_at&quot;`</span></span><br><span class="line">CreateAt          time.Time <span class="string">`json:&quot;create_at&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newUserResponse</span><span class="params">(user db.User)</span></span> UserResponse &#123;</span><br><span class="line"><span class="keyword">return</span> UserResponse&#123;</span><br><span class="line">Username:          user.Username,</span><br><span class="line">FullName:          user.FullName,</span><br><span class="line">Email:             user.Email,</span><br><span class="line">PasswordChangedAt: user.PasswordChangedAt.Time,</span><br><span class="line">CreateAt:          user.CreateAt.Time,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> createUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req CreateUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Received request: %+v\n&quot;</span>, req) <span class="comment">// 打印请求体</span></span><br><span class="line"></span><br><span class="line">hashedPassword, err := util.HashedPassword(req.Password)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(fmt.Errorf(<span class="string">&quot;failed to hash password: %v&quot;</span>, err)))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arg := db.CreateUserParams&#123;</span><br><span class="line">Username:       req.Username,</span><br><span class="line">FullName:       req.FullName,</span><br><span class="line">Email:          req.Email,</span><br><span class="line">HashedPassword: hashedPassword,</span><br><span class="line">&#125;</span><br><span class="line">user, err := server.store.CreateUser(ctx, arg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Error creating user: %v\n&quot;</span>, err) <span class="comment">// 打印错误</span></span><br><span class="line">errCode := db.ErrorCode(err)</span><br><span class="line"><span class="comment">//此处只保留一个外键约束</span></span><br><span class="line"><span class="keyword">if</span> errCode == db.UniqueViolation &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusForbidden, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := newUserResponse(user)</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Username <span class="type">string</span> <span class="string">`json:&quot;username&quot; binding:&quot;required,alphanum&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`json:&quot;password&quot; binding:&quot;required,min=6&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> loginUserResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span>       <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">User        UserResponse <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span></span> loginUser(ctx *gin.Context) &#123;</span><br><span class="line"><span class="keyword">var</span> req loginUserRequest</span><br><span class="line"><span class="keyword">if</span> err := ctx.ShouldBindJSON(&amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusBadRequest, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user, err := server.store.GetUser(ctx, req.Username)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, db.ErrRecordNotFound) &#123;</span><br><span class="line">ctx.JSON(http.StatusNotFound, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = util.CheckPassword(req.Password, user.HashedPassword)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusUnauthorized, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">accessToken, err := server.tokenMaker.CreateToken(</span><br><span class="line">user.Username,</span><br><span class="line">server.config.AccessTokenDuration,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">ctx.JSON(http.StatusInternalServerError, errorResponse(err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rsp := loginUserResponse&#123;</span><br><span class="line"></span><br><span class="line">AccessToken: accessToken,</span><br><span class="line"></span><br><span class="line">User: newUserResponse(user),</span><br><span class="line">&#125;</span><br><span class="line">ctx.JSON(http.StatusOK, rsp)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-问题1"><a href="#3-问题1" class="headerlink" title="3.问题1"></a>3.问题1</h4><p>为什么运行transfer_text.go出现了很多错误：</p><h4 id="4-解决1"><a href="#4-解决1" class="headerlink" title="4.解决1"></a>4.解决1</h4><p>在学习的时候图方便把作者的代码全部拉了下来  在transfer_test.go中 有很多情况 在transfer中并没有实现 导致无法对应这些情况</p><p>正常时作者留给你的任务 让你去课后实现这些功能</p><p>重新回顾第13集：</p><p>模拟数据库进行测试：</p><p>确保模拟数据库实现与真是数据库相同的接口</p><p>出问题的两段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;UnauthorizedUser&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.RandomCurrency(),</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account1.ID)).Times(<span class="number">1</span>).Return(account1, <span class="literal">nil</span>)</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Eq(account2.ID)).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">&quot;NoAuthorization&quot;</span>,</span><br><span class="line">body: gin.H&#123;</span><br><span class="line"><span class="string">&quot;from_account_id&quot;</span>: account1.ID,</span><br><span class="line"><span class="string">&quot;to_account_id&quot;</span>:   account2.ID,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:          amount,</span><br><span class="line"><span class="string">&quot;currency&quot;</span>:        util.USD,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">buildStubs: <span class="function"><span class="keyword">func</span><span class="params">(store *mockdb.MockStore)</span></span> &#123;</span><br><span class="line">store.EXPECT().GetAccount(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">store.EXPECT().TransferTx(gomock.Any(), gomock.Any()).Times(<span class="number">0</span>)</span><br><span class="line">&#125;,</span><br><span class="line">checkResponse: <span class="function"><span class="keyword">func</span><span class="params">(recorder *httptest.ResponseRecorder)</span></span> &#123;</span><br><span class="line">require.Equal(t, http.StatusUnauthorized, recorder.Code)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="5-问题2"><a href="#5-问题2" class="headerlink" title="5.问题2"></a>5.问题2</h4><p>为什么得到分组用户出错</p><h4 id="6-解决2"><a href="#6-解决2" class="headerlink" title="6.解决2"></a>6.解决2</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为什么得到分页的时候用户为空 错误出现在这里</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queries)</span></span> ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, <span class="type">error</span>) &#123;</span><br><span class="line">rows, err := q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line">items := []Account&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> i Account</span><br><span class="line"><span class="keyword">if</span> err := rows.Scan(</span><br><span class="line">&amp;i.ID,</span><br><span class="line">&amp;i.Owner,</span><br><span class="line">&amp;i.Balance,</span><br><span class="line">&amp;i.Currency,</span><br><span class="line">&amp;i.CreatedAt,</span><br><span class="line">); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">items = <span class="built_in">append</span>(items, i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := rows.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>rows, err :&#x3D; q.db.Query(ctx, listAccounts, arg.Owner, arg.Limit, arg.Offset) 这里查询的条件有arg.owner 但是我们在测试的时候并没有设置owner 可以显示尝试把owner去掉</p><h4 id="11-6日-二十二-身份验证中间件-授权API请求"><a href="#11-6日-二十二-身份验证中间件-授权API请求" class="headerlink" title="11.6日 二十二.身份验证中间件 授权API请求"></a>11.6日 二十二.身份验证中间件 授权API请求</h4><p>使用make sqlc 和 make mock 重新为listAccount增加 Owner字段</p><p>搞了半天 app.env配置错了 应该是</p><p>ACCESS_TOKEN_DURATION&#x3D;15m</p><p>我写成别的了</p><h3 id="二十三-部署目前的程序"><a href="#二十三-部署目前的程序" class="headerlink" title="二十三.部署目前的程序"></a>二十三.部署目前的程序</h3><h4 id="1-对程序进行docker化"><a href="#1-对程序进行docker化" class="headerlink" title="1.对程序进行docker化"></a>1.对程序进行docker化</h4><p>运用git部署</p><p><strong>注意</strong>：永远不要将更改直接推送到主分支</p><p>1.创建新分支-》推送分支-》产生以下结果-》复制url-》创建标题-》创建拉取请求-》从而可以看到 Files changed 文件的更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 local objects.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for &#x27;ft/docker&#x27; on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/Whuichenggong/projects/pull/new/ft/docker</span><br><span class="line">remote:</span><br><span class="line">To github.com:Whuichenggong/projects.git</span><br><span class="line"> * [new branch]      ft/docker -&gt; ft/docker</span><br></pre></td></tr></table></figure><p>重新回看第10集 配置工作流 最近这两天了解到了工作流有了更深的理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># This workflow will build a golang project</span><br><span class="line"># For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go</span><br><span class="line"></span><br><span class="line">name: Go</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line">  pull_request:</span><br><span class="line">    branches: [ &quot;main&quot; ]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line"></span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - uses: actions/checkout@v4</span><br><span class="line"></span><br><span class="line">    - name: Set up Go</span><br><span class="line">      uses: actions/setup-go@v4</span><br><span class="line">      with:</span><br><span class="line">        go-version: &#x27;1.20&#x27;</span><br><span class="line"></span><br><span class="line">    - name: Build</span><br><span class="line">      run: go build -v ./...</span><br><span class="line"></span><br><span class="line">    - name: Test</span><br><span class="line">      run: go test -v ./...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>go语言的工作流模板</p><p>giuthub action 相当于将一些列配置放到了github上的一个服务器上 也就是相当于将东西放进了github的服务器</p><hr><h4 id="11-10日"><a href="#11-10日" class="headerlink" title="11.10日"></a>11.10日</h4><p>还是github action问题 终于把 Install golang-migrate解决了</p><p>因为： 在最开始推送项目到github的时候 就是因为把项目结构推送错了 ，导致推送到github上的项目根目录没有go.mod文件这造成了很大的错误 导致一直失败</p><p>今天又解决了 install golang-migrate问题 因为sudo mv migrate &#x2F;usr&#x2F;bin&#x2F;migrate   把之前的 名称换成 <strong>migrate</strong>就好用了</p><p>问题2：</p><p>make migratedown migrate -path &#x2F;db&#x2F;migration -database “postgresql:&#x2F;&#x2F;root:secret@localhost:5432&#x2F;simple_bank?sslmode&#x3D;disable” -verbose down 2024&#x2F;11&#x2F;10 13:30:17 error: open &#x2F;db&#x2F;migration.: The system cannot find the path specified. make: *** [migratedown] 错误 1</p><p>在Makefile中的指令的 路径又弄错了 必须让指令能找到位置所在</p><p><strong>卧槽：成功了 绿了 妈的</strong></p><p>牛逼</p><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p>官方镜像</p><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.16</span>-alpine3.<span class="number">13</span> </span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>docker build -t simplebank:latest</code> 使用这个指令构建镜像</p><p>images的大小很大</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images </span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       48621dad3f4d   5 minutes ago   656MB</span><br></pre></td></tr></table></figure><p>分阶段构建可以减少体积</p><p>也就是</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage 构建二进制文件</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.23</span>-alpine3.<span class="number">20</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Production stage 生产环境</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.20</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/main .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终体积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED         SIZE</span><br><span class="line">simplebank         latest       f64691fae70e   7 seconds ago   27.1MB</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a列出容器状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker rmi f64691fae70e</span><br><span class="line">Untagged: simplebank:latest</span><br><span class="line">Deleted: sha256:f64691fae70e516b799ed846bbeef10045388dae1932ecafc8b93fb208b403f0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//运行这条指令便启动了容器 监听8080端口</span><br><span class="line"> docker run --name simplebank -p 8080:8080 simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 127.0.0.1:1124</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//重新启动镜像</span><br><span class="line">PS E:\projects\simplebank&gt; docker rm simplebank</span><br><span class="line">simplebank</span><br><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release simplebank:latest</span><br><span class="line"></span><br><span class="line">这样启动就不会有上面的输出了</span><br></pre></td></tr></table></figure><p><code> docker container inspect postgres12</code>  检查网络设置</p><h4 id="11-13日"><a href="#11-13日" class="headerlink" title="11.13日"></a>11.13日</h4><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><p>解决用docker启动后 无法用postman测试接口的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8083:8083 -e GIN_MODE=release -e       DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br></pre></td></tr></table></figure><p><strong>每次修改完dockerfiles或者什么 要记住重新构建镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build --no-cache -t simplebank:latest .</span><br></pre></td></tr></table></figure><h5 id="关键："><a href="#关键：" class="headerlink" title="关键："></a>关键：</h5><p><strong>先使用调试功能 查看是否正确监听端口</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8080:8080  simplebank:latest</span><br><span class="line">[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line"> - using env:   export GIN_MODE=release</span><br><span class="line"> - using code:  gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">[GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">[GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">[GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">[GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br></pre></td></tr></table></figure><p>这次在测试的时候 有了反应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS E:\projects\simplebank&gt; docker run --name simplebank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 01:17:23 | 401 |      39.567µs |      172.17.0.1 | GET      &quot;/accounts/1&quot;</span><br></pre></td></tr></table></figure><p>此更改导致了postgres连接出错</p><p>#####<strong>不使用ip地址使用用户定义的网络 连接到postrges</strong></p><p><code>docker network ls</code></p><figure class="highlight do"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NETWORK ID     NAME                DRIVER    SCOPE</span><br><span class="line">ca0046b2c82c   bank-network        bridge    <span class="keyword">local</span></span><br><span class="line">cf35f34026f7   bridge              bridge    <span class="keyword">local</span></span><br><span class="line">1500c05159ef   host                host      <span class="keyword">local</span></span><br><span class="line">074a556122c6   none                null      <span class="keyword">local</span></span><br><span class="line">fafb76e1721e   start_gvb-network   bridge    <span class="keyword">local</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>桥接网络</p><h5 id="查看更详细的网络信息"><a href="#查看更详细的网络信息" class="headerlink" title="查看更详细的网络信息"></a>查看更详细的网络信息</h5><p><code>docker network inspect bridge</code></p><p>删除网络:</p><p><code>docker network rm 0fd871187ef1</code></p><h5 id="创建自己的网络"><a href="#创建自己的网络" class="headerlink" title="创建自己的网络"></a>创建自己的网络</h5><p>&#96;&#96;docker network create bank_network&#96;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`0fd871187ef1e3b3bee37ac898e895cf54615e267bd6af9d7b2c045fc5178a14</span><br></pre></td></tr></table></figure><h5 id="连接创建的网络"><a href="#连接创建的网络" class="headerlink" title="连接创建的网络"></a>连接创建的网络</h5><p><code>docker network connect bank-network</code></p><p>将postrges12 连接到我们创建的网络</p><p><code>docker network connect bank-network postgres12</code></p><p><code>docker network inspect bank-network</code></p><h6 id="得先启动-postrges12"><a href="#得先启动-postrges12" class="headerlink" title="得先启动 postrges12"></a>得先启动 postrges12</h6><p><strong>验证 <code>postgres12</code> 容器是否正在运行</strong>： 检查 named 的容器是否正在运行：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>查找具有名称的容器并检查其状态。如果容器未运行，请启动容器：<code>postgres12</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start postgres12</span><br></pre></td></tr></table></figure><p><strong>再次将 <code>postgres12</code> 连接到网络</strong>： 现在，尝试将容器连接到 ：<code>postgres12``bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect bank-network postgres12</span><br></pre></td></tr></table></figure><p>现在已经成功添加了postrges12</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br></pre></td></tr></table></figure><p>此时查看</p><p><code> docker container inspect postgres12</code></p><p>这个容器将会有两段网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&quot;NetworkSettings&quot;: &#123;</span><br><span class="line">           &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">           &quot;SandboxID&quot;: &quot;2ea1e674576863a5e20fe6dda2a3ea265dd11b0223dc4a94bbfa23c57adc66d9&quot;,</span><br><span class="line">           &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/2ea1e6745768&quot;,</span><br><span class="line">           &quot;Ports&quot;: &#123;</span><br><span class="line">               &quot;5432/tcp&quot;: [</span><br><span class="line">                   &#123;</span><br><span class="line">                       &quot;HostIp&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">                       &quot;HostPort&quot;: &quot;5432&quot;</span><br><span class="line">                   &#125;</span><br><span class="line">               ]</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;HairpinMode&quot;: false,</span><br><span class="line">           &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">           &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">           &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">           &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">           &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">           &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">           &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">           &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">           &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">           &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">           &quot;Networks&quot;: &#123;</span><br><span class="line">               &quot;bank-network&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: [</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ],</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: &#123;&#125;,</span><br><span class="line">                   &quot;DNSNames&quot;: [</span><br><span class="line">                       &quot;postgres12&quot;,</span><br><span class="line">                       &quot;7ba14f6dd2f7&quot;</span><br><span class="line">                   ]</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;bridge&quot;: &#123;</span><br><span class="line">                   &quot;IPAMConfig&quot;: null,</span><br><span class="line">                   &quot;Links&quot;: null,</span><br><span class="line">                   &quot;Aliases&quot;: null,</span><br><span class="line">                   &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                   &quot;NetworkID&quot;: &quot;cf35f34026f787fe91864d7e7a2ab23d482b6a6b956a10d596ae0d9818aa7e16&quot;,</span><br><span class="line">                   &quot;EndpointID&quot;: &quot;d85289ea4f7ca088375523781a14955e1b1fc58e5af731fe7f4c48fecba470e6&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                   &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                   &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                   &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                   &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                   &quot;DriverOpts&quot;: null,</span><br><span class="line">                   &quot;DNSNames&quot;: null</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>重新使用指令</p><p><code> docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simplebank?sslmode=disable&quot; simplebank:latest</code></p><p>此时 simplebank容器将与postgres12运行在同一个网络上</p><p>将172.17.0.2替换成postgres12 因为可以通过名称访问网络</p><p>启动容器指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank --network bank-network -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@postgres12:5432/simplebank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">[GIN] 2024/11/13 - 02:06:27 | 400 |     105.754µs |      172.18.0.1 | POST     &quot;/users/login&quot;</span><br></pre></td></tr></table></figure><p><code>docker network inspect bank-network</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">   &#123;</span><br><span class="line">       &quot;Name&quot;: &quot;bank-network&quot;,</span><br><span class="line">       &quot;Id&quot;: &quot;ca0046b2c82ccb1fe4c996950a815d9c374c58514921c9b919899d8169cb9881&quot;,</span><br><span class="line">       &quot;Created&quot;: &quot;2024-05-10T13:32:42.557489581Z&quot;,</span><br><span class="line">       &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">       &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">       &quot;EnableIPv6&quot;: false,</span><br><span class="line">       &quot;IPAM&quot;: &#123;</span><br><span class="line">           &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">           &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">           &quot;Config&quot;: [</span><br><span class="line">               &#123;</span><br><span class="line">                   &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                   &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Internal&quot;: false,</span><br><span class="line">       &quot;Attachable&quot;: false,</span><br><span class="line">       &quot;Ingress&quot;: false,</span><br><span class="line">       &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">           &quot;Network&quot;: &quot;&quot;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;ConfigOnly&quot;: false,</span><br><span class="line">       &quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;7ba14f6dd2f7a81db9264c0814e9686e921b0d86c01b2df325dad4a1cca35c40&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;postgres12&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b3dc1614431f2f11f2b0d6c8bb7f33b529baacefa39521bf522c84a7f526a882&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;a76e19ef1c210d1cc4f458ed9b2238db810872417e0a1072e8467dda82663a2a&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;487f3ec81ada3bf84e44af700d0ae930075ce8c683755d789c27cadc7f95ed06&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">       &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>目前有两个容器在自定义的网络中运行</p><p><strong>之后的postrges就可以正常使用了</strong></p><p>更改Makefile文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">postgres:</span></span><br><span class="line">docker run --name postgres12 --network bank-network -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine</span><br></pre></td></tr></table></figure><p>在github中 pullrequest中可以查看更改 并且 merge 分支到主分支-》然后确认合并—》Delete branch</p><h4 id="二十四-docker-compose"><a href="#二十四-docker-compose" class="headerlink" title="二十四.docker-compose"></a>二十四.docker-compose</h4><p><a href="https://docs.docker.com/">https://docs.docker.com</a></p><p>创建docker-compose.yaml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:12-alpine</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=root</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">      - POSTGRES_DB=simple_bank</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5432:5432&quot;</span><br><span class="line">    </span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    </span><br><span class="line">    environment:</span><br><span class="line">      - DB_SOURCE=postgresql://root:secret@postgres:5432/simple_bank?sslmode=disable</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p><code>docker compose up</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"> docker compose up</span><br><span class="line">[+] Running 1/0</span><br><span class="line"> ✔ Container simplebank-api-1  Created            0.0s </span><br><span class="line">Attaching to api-1, postgres-1</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] [WARNING] Running in &quot;debug&quot; mode. Switch to &quot;release&quot; mode in production.</span><br><span class="line">api-1       |  - using env:     export GIN_MODE=release</span><br><span class="line">api-1       |  - using code:    gin.SetMode(gin.ReleaseMode)</span><br><span class="line">api-1       |</span><br><span class="line">api-1       | [GIN-debug] POST   /users                    --&gt; project/simplebank/api.(*Server).createUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /users/login              --&gt; project/simplebank/api.(*Server).loginUser-fm (3 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts/:id             --&gt; project/simplebank/api.(*Server).getAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /accounts                 --&gt; project/simplebank/api.(*Server).createAccount-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] GET    /accounts                 --&gt; project/simplebank/api.(*Server).listAccounts-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] POST   /transfers                --&gt; project/simplebank/api.(*Server).createTransfer-fm (4 handlers)</span><br><span class="line">api-1       | [GIN-debug] [WARNING] You trusted all proxies, this is NOT safe. We recommend you to set a value.</span><br><span class="line">api-1       | Please check https://pkg.go.dev/github.com/gin-gonic/gin#readme-don-t-trust-all-proxies for details.</span><br><span class="line">api-1       | [GIN-debug] Listening and serving HTTP on 0.0.0.0:8080</span><br><span class="line">postgres-1  | The files belonging to this database system will be owned by user &quot;postgres&quot;.</span><br><span class="line">postgres-1  | This user must also own the server process.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | The database cluster will be initialized with locale &quot;en_US.utf8&quot;.</span><br><span class="line">postgres-1  | The default database encoding has accordingly been set to &quot;UTF8&quot;.</span><br><span class="line">postgres-1  | The default text search configuration will be set to &quot;english&quot;.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Data page checksums are disabled.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | fixing permissions on existing directory /var/lib/postgresql/data ... ok</span><br><span class="line">postgres-1  | creating subdirectories ... ok</span><br><span class="line">postgres-1  | selecting dynamic shared memory implementation ... posix</span><br><span class="line">postgres-1  | selecting default max_connections ... 100</span><br><span class="line">postgres-1  | selecting default shared_buffers ... 128MB</span><br><span class="line">postgres-1  | selecting default time zone ... UTC</span><br><span class="line">postgres-1  | creating configuration files ... ok</span><br><span class="line">postgres-1  | running bootstrap script ... ok</span><br><span class="line">postgres-1  | sh: locale: not found</span><br><span class="line">postgres-1  | 2024-11-13 06:50:42.795 UTC [30] WARNING:  no usable system locales were found</span><br><span class="line">postgres-1  | performing post-bootstrap initialization ... ok</span><br><span class="line">postgres-1  | syncing data to disk ... ok</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | Success. You can now start the database server using:</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |     pg_ctl -D /var/lib/postgresql/data -l logfile start</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | initdb: warning: enabling &quot;trust&quot; authentication for local connections</span><br><span class="line">postgres-1  | You can change this by editing pg_hba.conf or using the option -A, or</span><br><span class="line">postgres-1  | --auth-local and --auth-host, the next time you run initdb.</span><br><span class="line">postgres-1  | waiting for server to start....2024-11-13 06:50:43.144 UTC [36] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.146 UTC [36] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.160 UTC [37] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.164 UTC [36] LOG:  database system is ready to accept connections</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server started</span><br><span class="line">postgres-1  | CREATE DATABASE</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | waiting for server to shut down....2024-11-13 06:50:43.315 UTC [36] LOG:  received fast shutdown request</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.316 UTC [36] LOG:  aborting any active transactions</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [36] LOG:  background worker &quot;logical replication launcher&quot; (PID 43) exited with exit code 1</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.318 UTC [38] LOG:  shutting down</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.330 UTC [36] LOG:  database system is shut down</span><br><span class="line">postgres-1  |  done</span><br><span class="line">postgres-1  | server stopped</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | PostgreSQL init process complete; ready for start up.</span><br><span class="line">postgres-1  |</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  starting PostgreSQL 12.18 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit</span><br><span class="line"></span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv4 address &quot;0.0.0.0&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.447 UTC [1] LOG:  listening on IPv6 address &quot;::&quot;, port 5432</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.450 UTC [1] LOG:  listening on Unix socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot;</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.461 UTC [51] LOG:  database system was shut down at 2024-11-13 06:50:43 UTC</span><br><span class="line">postgres-1  | 2024-11-13 06:50:43.465 UTC [1] LOG:  database system is ready to accept connections</span><br></pre></td></tr></table></figure><p>构建镜像完成后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">REPOSITORY         TAG          IMAGE ID       CREATED        SIZE</span><br><span class="line">simplebank-api     latest       eb772c9e932f   6 hours ago    27.1MB</span><br><span class="line">simplebank         latest       9f145f0ce89f   6 hours ago    27.1MB</span><br></pre></td></tr></table></figure><p>查看占用端口的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">`netstat -ano | findstr :5432`</span><br><span class="line">  TCP    0.0.0.0:5432           0.0.0.0:0              LISTENING       30352</span><br><span class="line">  TCP    [::]:5432              [::]:0                 LISTENING       30352</span><br><span class="line">  TCP    [::1]:5432             [::]:0                 LISTENING       35464</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 30352&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">com.docker.backend.exe       30352 Console                    2    117,104 K</span><br><span class="line">PS E:\projects\simplebank&gt; `tasklist /FI &quot;PID eq 35464&quot;``</span><br><span class="line"></span><br><span class="line">映像名称                       PID 会话名              会话#       内存使用</span><br><span class="line">========================= ======== ================ =========== ============</span><br><span class="line">wslrelay.exe                 35464 Console                    2      8,328 K</span><br></pre></td></tr></table></figure><p>在 Windows 上（终止进程）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 30352 /F</span><br><span class="line">taskkill /PID 35464 /F</span><br></pre></td></tr></table></figure><p><code>docker ps</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                COMMAND                   CREATED             STATUS         PORTS                                      NAMES</span><br><span class="line">dab18d564f9c   postgres:12-alpine   &quot;docker-entrypoint.s…&quot;   About an hour ago   Up 7 minutes   0.0.0.0:5432-&gt;5432/tcp                     simplebank-postgres-1</span><br><span class="line">c4c37a8a870a   simplebank-api       &quot;/app/main&quot;               About an hour ago   Up 7 minutes   0.0.0.0:8080-&gt;8080/tcp                     simplebank-api-1</span><br></pre></td></tr></table></figure><p><code>docker network inspect simplebank_default</code></p><p>两个服务容器实际在同一个网络上运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> docker network inspect simplebank_default</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;simplebank_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;fab69439b1a55525d81fa70d9e789c3b6d51ba8d7899924deb8413fb724ca951&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-13T05:28:49.358856507Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.20.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.20.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;c4c37a8a870a75e9fa626c7034dd935c8f3afdb86c5e2c37b012503bff9c7ab7&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;8a247db55db70983d6b2d619caef09bf2593964daa02be5773448fbd74f9d791&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;dab18d564f9c4554ef255e50205be2f4dd9c1fada3391dde698d7717d0e642ff&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;2b9220ab1bcc031b29631a2ecb462a48a475a722b10592c478124c03d95e29df&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:14:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.20.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;simplebank&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;2.24.6&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>docker compose down</code></p><p>删除现在所有网络</p><p>Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Build stage 构建二进制文件</span></span><br><span class="line">FROM golang:1.23-alpine3.20 AS build</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY . .</span><br><span class="line">RUN go build -o main main.go</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run stage</span> </span><br><span class="line">FROM alpine:3.20</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=build /app/main .</span><br><span class="line">COPY app.env .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这一步可以解决2024/11/13 08:08:06 cannot load config:Config File <span class="string">&quot;app&quot;</span> Not Found <span class="keyword">in</span> <span class="string">&quot;[/app]&quot;</span></span></span><br><span class="line"></span><br><span class="line">EXPOSE 8080 </span><br><span class="line">CMD [ &quot;/app/main&quot; ]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>操 最后一刻验证成功了</p><p>用终端输入指令 带入参数 172.17.0.2 这样 viper可以自动读取配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name simplebank -p 8080:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simple_bank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">Received request: &#123;Username:Zhonghe FullName:zhaohzonghe Email:3041322213@qq.com Password:zzh123456&#125;</span><br><span class="line">[GIN] 2024/11/13 - 12:54:07 | 200 |   57.106456ms |      172.17.0.1 | POST     &quot;/users&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.env中的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=postgres://root:secret@localhost:5432/simple_bank?sslmode=disable</span><br><span class="line">MIGRATION_URL=project/simplebank/db/migration</span><br><span class="line">HTTPServerAddress=0.0.0.0:8080</span><br><span class="line">TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012</span><br><span class="line">ACCESS_TOKEN_DURATION=15m</span><br></pre></td></tr></table></figure><h4 id="11-18日"><a href="#11-18日" class="headerlink" title="11.18日"></a>11.18日</h4><p><code>docker ps</code></p><p><code>docker network inspect simplebank_default</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID   IMAGE                COMMAND                   CREATED              STATUS              PORTS                    NAMES</span><br><span class="line">81aa7c463a58   postgres:12-alpine   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:5432-&gt;5432/tcp   simplebank-postgres-1</span><br><span class="line">047f0bb9fbc8   simplebank-api       &quot;/app/main&quot;               About a minute ago   Up About a minute   0.0.0.0:8080-&gt;8080/tcp   simplebank-api-1</span><br><span class="line">PS E:\projects\simplebank&gt; </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;simplebank_default&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;9afc6c5d5e9252f2161f204008596b067fceecd49ac5a9171910c58f4717e205&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-18T11:05:59.526768414Z&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.18.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;047f0bb9fbc8fdbe07cc311b134c00ff27cb0a2cbcb4322746a6b30cbbb404bf&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;b607176500386abe6ac7ad27f31d9c453a3f2087dacade426d50a72b1e30b585&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;81aa7c463a58ad777dd3d99f9ba3c442c024c02d0f91be924903ffa423f99426&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;ce4ec4fda5631c27ba1e8c96503ef86f1bfea3bc8f563ecf7528c75ca91f1bb6&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;</span><br><span class="line">            &quot;com.docker.compose.network&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;com.docker.compose.project&quot;: &quot;simplebank&quot;,</span><br><span class="line">            &quot;com.docker.compose.version&quot;: &quot;2.24.6&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>两个服务器运行在同一个网络 通过名字彼此发现自己</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;047f0bb9fbc8fdbe07cc311b134c00ff27cb0a2cbcb4322746a6b30cbbb404bf&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank-api-1&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;b607176500386abe6ac7ad27f31d9c453a3f2087dacade426d50a72b1e30b585&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;81aa7c463a58ad777dd3d99f9ba3c442c024c02d0f91be924903ffa423f99426&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;simplebank-postgres-1&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;ce4ec4fda5631c27ba1e8c96503ef86f1bfea3bc8f563ecf7528c75ca91f1bb6&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:12:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.18.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>目前是链接不上数据库的因为没有执行数据库迁移</p><p>重新构建docker-compose docker files文件</p><p><code>docker compose down</code><br>[+] Running 3&#x2F;3<br>✔ Container simplebank-postgres-1  Removed                                                                                                                               0.7s<br>✔ Container simplebank-api-1       Removed                                                                                                                               0.6s<br>✔ Network simplebank_default       Removed</p><p>删除目前所有容器和网络</p><p>使用<code>docker rmi ….</code></p><p>删除simplebank_api镜像</p><h5 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h5><p>ERROR [api internal] load metadata for docker.io&#x2F;library&#x2F;builder:latest</p><p>错误的核心在于 <code>tar</code> 解压的文件名与你 <code>mv</code> 命令中期望的文件名不匹配。具体表现为 <code>tar</code> 解压生成的文件名并不是 <code>migrate.linux-amd64</code>，而是 <code>migrate</code>。</p><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p><strong>1. 修改 <code>RUN</code> 命令中的文件名引用</strong></p><p>根据错误日志，<code>tar</code> 解压后生成的文件名是 <code>migrate</code>，而非 <code>migrate.linux-amd64</code>。因此，<code>mv</code> 命令应改为直接操作 <code>migrate</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dockerfile复制代码RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz \</span><br><span class="line">    | tar -xz &amp;&amp; mv migrate /app/migrate</span><br></pre></td></tr></table></figure><p>这将确保正确地将解压出的 <code>migrate</code> 文件移动到 <code>/app/migrate</code>。</p><p><strong>2. 验证文件解压和路径</strong></p><p>为了确保过程正确，可以在 <code>RUN</code> 指令中加入调试信息以打印文件列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dockerfile复制代码RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz \</span><br><span class="line">    | tar -xz &amp;&amp; ls -l &amp;&amp; mv migrate /app/migrate</span><br></pre></td></tr></table></figure><p>原因：要保持 builer同意 我写成了一个build  另一个builder 因该换成build</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY --from=build /app/main .</span><br><span class="line">COPY --from=build /app/migrate /usr/bin/migrate   </span><br></pre></td></tr></table></figure><p>欧克解决了</p><p>完整的 dockerfile</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build stage</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.23</span>-alpine3.<span class="number">20</span> AS build</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> go build -o main main.go</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L  https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz &amp;&amp; <span class="built_in">mv</span> migrate /app/migrate</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment"># Run stage</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.20</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/main .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build /app/migrate /usr/bin/migrate</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app.env .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> start.sh . </span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> db/migration ./migration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;/app/main&quot;</span> ]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/app/start.sh&quot;</span> ]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整的 docker-compose.yaml</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  postgres:</span><br><span class="line">    image: postgres:<span class="number">12</span>-alpine</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=root</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">      - POSTGRES_DB=simple_bank</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5432:5432&quot;</span></span><br><span class="line">    </span><br><span class="line">  api:</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: Dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    </span><br><span class="line">    environment:</span><br><span class="line">      - DB_SOURCE=postgresql://root:secret@postgres:<span class="number">5432</span>/simple_bank?sslmode=disable</span><br><span class="line">    depends_on:</span><br><span class="line">      - postgres</span><br></pre></td></tr></table></figure><p>下载wait-for工具</p><p><code>mv &quot;C:\Users\30413\Downloads\wait-for&quot; ./wait-for.sh</code></p><p>目前测试api问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    &quot;error&quot;: &quot;failed to connect to `user=root database=simple_bank`:\n\t127.0.0.1:5432 (localhost): dial error: dial tcp 127.0.0.1:5432: connect: connection refused\n\t[::1]:5432 (localhost): dial error: dial tcp [::1]:5432: connect: cannot assign requested address&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二-11-22日"><a href="#二-11-22日" class="headerlink" title="二.11.22日"></a>二.11.22日</h4><h5 id="解决上次的问题"><a href="#解决上次的问题" class="headerlink" title="解决上次的问题"></a>解决上次的问题</h5><p>无论怎么样构建无法用postman接口调试</p><p>这是因为 你在</p><p>star.sh中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">echo &quot;run db migrations&quot;</span><br><span class="line">/app/migrate -path /app/migration -database &quot;$DB_SOURCE&quot; -verbose up</span><br><span class="line"></span><br><span class="line">echo &quot;start the app&quot;</span><br><span class="line">exec &quot;$@&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解决</strong></p><p>使用的连接数据库的 参数是 $DB_SOURCE” 但是你在app.env中配置的名字不是DB_SOURCE 是DATABASE_URL 这种错误造成的原因可能是目前你并不了解一些列的工具是如何真正使用的没有真正了解</p><p>之前的配置 都是用DATABASE_URL来配置的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=postgres://root:secret@localhost:5432/simple_bank?sslmode=disable</span><br><span class="line">MIGRATION_URL=project/simplebank/db/migration</span><br><span class="line">HTTPServerAddress=0.0.0.0:8080</span><br><span class="line">TOKEN_SYMMETRIC_KEY=12345678901234567890123456789012</span><br><span class="line">ACCESS_TOKEN_DURATION=15m</span><br></pre></td></tr></table></figure><p>更改为 DB_SOURCE后api测试成功</p><h4 id="三-11-23日"><a href="#三-11-23日" class="headerlink" title="三.11.23日"></a>三.11.23日</h4><p>部署应用程序</p><h5 id="创建AWS-最大的云提供商-账户部署应用程序"><a href="#创建AWS-最大的云提供商-账户部署应用程序" class="headerlink" title="创建AWS(最大的云提供商)账户部署应用程序"></a>创建AWS(最大的云提供商)账户部署应用程序</h5><p>地址 <a href="https://aws.amazon.com/free/">https://aws.amazon.com/free/</a></p><p>emmm不知道银行卡的cvv</p><h5 id="自动构建docker镜像并推送到AWS-ECR"><a href="#自动构建docker镜像并推送到AWS-ECR" class="headerlink" title="自动构建docker镜像并推送到AWS ECR"></a>自动构建docker镜像并推送到AWS ECR</h5><p>1.创建一个存储库存储docker镜像</p><p>将docker 镜像推送到CLI<br>每当新代码合并到主分支时 我们将使用 Github Actions自动构建标记和推送镜像</p><p>deploy.yml 关键</p><p><strong>目前没有招商卡无法使用AWS 先使用快过期的aliyun试一试</strong></p><p>添加go到linux环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]# ^C</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]#    export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">[root@iZt4nbaeq7uzlvq978l1xqZ simplebank]# go run main.go</span><br><span class="line">go: downloading github.com/jackc/pgx/v5 v5.7.1</span><br><span class="line">go: downloading github.com/gin-gonic/gin v1.10.0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="四-11-29日-尝试"><a href="#四-11-29日-尝试" class="headerlink" title="四.11.29日 尝试"></a>四.11.29日 尝试</h4><p>在仅剩5个月的服务器中 把这个简单的项目部署到服务器上</p><p>配置服务器的docker的yum源 否则下载东西很费劲</p><p>设置国内镜像【不设置可能会导致拉取镜像失败】<br>进入&#x2F;etc&#x2F;docker文件夹下，修改daemon.json。如果文件不存在则，创建该文件。</p><p>daemon.json文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot; : [</span><br><span class="line">    &quot;https://jkfdsf2u.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;insecure-registries&quot; : [</span><br><span class="line">    &quot;docker-registry.zjq.com&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="line">  &quot;log-opts&quot;: &#123;</span><br><span class="line">    &quot;max-size&quot;: &quot;10m&quot;,</span><br><span class="line">    &quot;max-file&quot;: &quot;10&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;data-root&quot;: &quot;/data/docker&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉取docker pull镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull postgres:12-alpine</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>。。。。 配置不够cpu直接干到100%    看看有没有 简化的方法</p><p>11.30日</p><p>还是执着一点  弄了一台2核2gb的服务器 用docker部署</p><p>首先是源的配置 安装docker 安装docker-compose</p><p>然后是构建项目中出现的问题 反复构建</p><p>赋予权限等</p><p>权限问题在ubuntu中也是一个很重要的问题  哪个用户使用ubuntu也会导致不同的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">从 ls -ld 命令的输出可以看到，/home/ubuntu/projects/simplebank 目录的所有者和所属组都是 ubuntu，权限也允许当前用户进行访问。这意味着该目录的所有权和权限没有问题。</span><br><span class="line"></span><br><span class="line">但根据 Git 提示的错误信息，Git 依然检测到目录的所有权问题，因此需要添加该目录到 安全目录 列表中。</span><br><span class="line"></span><br><span class="line">解决方案：</span><br><span class="line">运行以下命令，将该目录添加到 Git 的安全目录列表中：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global --add safe.directory /home/ubuntu/projects/simplebank</span><br></pre></td></tr></table></figure><p>看到希望了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS    PORTS                                       NAMES</span><br><span class="line">758e9432d178   e054039bb12c   &quot;/app/start.sh /app/…&quot;   27 minutes ago   Created   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp   simplebank</span><br></pre></td></tr></table></figure><p>还需要配置数据库吗？？我有点蒙了</p><p>docker run与docker start的区别</p><p><img src="/study_photo2/simplebank1.png" alt="image-20241130213549768"></p><h4 id="五-2024年-11-30日-21：27分-成了把项目成功部署到了云服务器上太不容易了"><a href="#五-2024年-11-30日-21：27分-成了把项目成功部署到了云服务器上太不容易了" class="headerlink" title="五.2024年 11.30日 21：27分  成了把项目成功部署到了云服务器上太不容易了"></a>五.2024年 11.30日 21：27分  成了把项目成功部署到了云服务器上太不容易了</h4><p><img src="/study_photo2/simplebank2.png" alt="image-20241130213014346"></p><p><img src="/study_photo2/simplebank3.png" alt="image-20241130213026028"></p><p><img src="/study_photo2/simplebank4.png" alt="image-20241130213036904"></p><p><img src="/study_photo2/simplebank5.png" alt="image-20241130213050934"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker run --name simplebank -p 80:8080 -e GIN_MODE=release -e DB_SOURCE=&quot;postgresql://root:secret@172.17.0.2:5432/simple_bank?sslmode=disable&quot; simplebank:latest</span><br><span class="line">run db migrations</span><br><span class="line">2024/11/30 13:25:56 no change</span><br><span class="line">2024/11/30 13:25:56 Finished after 977.24µs</span><br><span class="line">2024/11/30 13:25:56 Closing source and database</span><br><span class="line">start the app</span><br><span class="line">Received request: &#123;Username:Zhonghe FullName:zhaohzonghe Email:3041322213@qq.com Password:zzh123456&#125;</span><br><span class="line">[GIN] 2024/11/30 - 13:26:07 | 200 |   75.179039ms |  202.97.179.126 | POST     &quot;/users&quot;</span><br></pre></td></tr></table></figure><p><img src="/study_photo2/simplebank6.png" alt="image-20241130213341117"></p><p><img src="/study_photo2/simplebank7.png" alt="image-20241130214233993"></p><p>为什么把端口8080:8080改成 80:8080就好用了 啊啊啊啊好兴奋 感谢老哥们</p><p>从把项目移动到 ubuntu 配置dockers环境</p><p>使用docker build构建项目</p><p>然后就是用postman测试</p><p>这期间 多次使用的</p><h5 id="Docker-指令"><a href="#Docker-指令" class="headerlink" title="Docker 指令"></a>Docker 指令</h5><p>docker run</p><p>docker images</p><p>docker ps -a</p><p>docekr pull</p><p>docker build -t simplebank:latest .</p><p>docker network create bank_network</p><p>docker network rm 0fd871187ef1</p><p>docker rm simplebank</p><p>docker rmi</p><p>docker network connect bank-network postgres12</p><p>docker network ls</p><p>docker container inspect postgres12</p><p>目前服务器中的 postgres12大体网络模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">root@VM-12-4-ubuntu:/home/ubuntu/projects/simplebank# docker container inspect postgres12</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2024-11-30T09:24:02.785101065Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;docker-entrypoint.sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;postgres&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 315509,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2024-11-30T11:54:14.985494404Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;2024-11-30T11:35:40.792853655Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:486566ce0ca8f59e321b2b5999de4b50237b2c60bcc3414d8a602fb96cb12c6f&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/data/docker/containers/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47/100ff1a5f0bf6e1f0447fff800aaa00ba54edc2cf19826eef512a442c2ec3a47-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/postgres12&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;docker-default&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;</span><br><span class="line">                    &quot;max-file&quot;: &quot;10&quot;,</span><br><span class="line">                    &quot;max-size&quot;: &quot;10m&quot;</span><br><span class="line">            </span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bank_network&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [],</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;c2a3ada685148d5607a5a6fc39e1690e5fbd161f0607df5a3a189f74ced100fa&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;07a57c58250657bf968d33d1f93cea6e9225d0cae314648d1b1c639c3811c9c1&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;DNSNames&quot;: [</span><br><span class="line">                        &quot;postgres12&quot;,</span><br><span class="line">                        &quot;100ff1a5f0bf&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;83e7fddfe207131e6199fb11fb5daa38bf044b67817fba2de02bd7f1639d4bb8&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;d9449d910f4e7be735031acb301f0e418999b091bb8c75450fecf983eca2aa24&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;DNSNames&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>还是看跟着课程走一走吧</p><p><img src="/study_photo2/simplebank8.png" alt="image-20241129195348180"></p><p><img src="/study_photo2/simplebank9.png" alt="image-20241129195504285"></p><p>AWS的EKS</p><p>将工作节点 添加到EKS集群 使用 kubectl 连接到集群</p><h5 id="如何创建新的EKS集群并向其中添加工作节点"><a href="#如何创建新的EKS集群并向其中添加工作节点" class="headerlink" title="如何创建新的EKS集群并向其中添加工作节点"></a>如何创建新的EKS集群并向其中添加工作节点</h5><p>大多都是用AWS目前没有卡还是先不要弄了</p><p>学习一下其他的知识</p><h4 id="进阶后端"><a href="#进阶后端" class="headerlink" title="进阶后端"></a>进阶后端</h4><p>master haha</p><p>管理用户会话</p><p>用PASETO JWT作为基于令牌的身份验证</p><p>因为这些是无状态设计 这些令牌不会存储到数据库中 寿命应该很短</p><p>他们的过期时间通常为10~15分钟 如果token每次都在这么短时间过期重新输入用户名和密码一定不是一个好的体验</p><p>刷新令牌</p><p>在服务器上维护有状态的会话</p><p>它将存储在数据库中 生命周期长</p><p>创建一个新的字段添加到app.env中</p><p>REFRESH_TOKEN_DURATION&#x3D;24h</p><p>同时config中添加新字段</p><p>RefreshTokenDuration time.Duration <code>mapstructure:&quot;REFRESH_TOKEN_DURATION&quot;</code></p><p>使用指令 migrate create -ext sql -dir db&#x2F;migration -seq  <migration_name></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">，用于创建一个新的迁移文件。该指令参数的意义如下：&lt;migration_name&gt;表示迁移文件的名称；-ext sql指定迁移文件的扩展名；-dir db/migration定义了迁移文件的存储路径；-seq代表创建顺序迁移文件，并在文件名前加上序号。这个命令会在指定目录下生成两个文件，一个用于执行迁移（.up.sql），另一个用于回滚迁移（.down.sql），以实现数据库的版本控制和变更管理。</span><br></pre></td></tr></table></figure><h5 id="add-sessions-up-sql"><a href="#add-sessions-up-sql" class="headerlink" title="add_sessions.up.sql"></a>add_sessions.up.sql</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &quot;sessions&quot; (</span><br><span class="line">  &quot;id&quot; uuid PRIMARY KEY,</span><br><span class="line">  &quot;username&quot; varchar NOT NULL,</span><br><span class="line">  &quot;refresh_token&quot; varchar NOT NULL,</span><br><span class="line">  &quot;user_agent&quot; varchar NOT NULL,</span><br><span class="line">  &quot;client_ip&quot; varchar NOT NULL,</span><br><span class="line">  &quot;is_blocked&quot; boolean NOT NULL DEFAULT false,</span><br><span class="line">  &quot;expires_at&quot; timestamptz NOT NULL,</span><br><span class="line">  &quot;created_at&quot; timestamptz NOT NULL DEFAULT (now())</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ALTER TABLE &quot;sessions&quot; ADD FOREIGN KEY (&quot;username&quot;) REFERENCES &quot;users&quot; (&quot;username&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>“is_blocked” boolean NOT NULL DEFAULT false,  添加bool列来阻止会话 以防止刷新令牌被泄露</p><p>“expires_at” timestamptz NOT NULL, 刷新令牌的过期时间</p><p>ALTER TABLE “sessions” ADD FOREIGN KEY (“username”) REFERENCES “users” (“username”); 外键约束</p><h4 id="11-30日"><a href="#11-30日" class="headerlink" title="11.30日"></a>11.30日</h4><p>理清楚<code>sqlc generate</code> 到底是什么意思</p><p>依赖于sqlc.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">sql:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">schema:</span> <span class="string">&quot;./db/migration&quot;</span></span><br><span class="line">  <span class="attr">queries:</span> <span class="string">&quot;./db/query&quot;</span></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">&quot;postgresql&quot;</span></span><br><span class="line">  <span class="attr">gen:</span></span><br><span class="line">    <span class="attr">go:</span> </span><br><span class="line">      <span class="attr">package:</span> <span class="string">&quot;db&quot;</span></span><br><span class="line">      <span class="attr">out:</span> <span class="string">&quot;./db/sqlc&quot;</span></span><br><span class="line">      <span class="attr">sql_package:</span> <span class="string">&quot;pgx/v5&quot;</span></span><br><span class="line">      <span class="attr">emit_json_tags:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">emit_interface:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">emit_empty_slices:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">overrides:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;timestamptz&quot;</span></span><br><span class="line">          <span class="attr">go_type:</span> <span class="string">&quot;time.Time&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">db_type:</span> <span class="string">&quot;uuid&quot;</span></span><br><span class="line">          <span class="attr">go_type:</span> <span class="string">&quot;github.com/google/uuid.UUID&quot;</span></span><br></pre></td></tr></table></figure><p>指定一些列路径 自动生成代码到哪个位置</p><p>依赖的是.sql文件自动生成 相关的代码</p><h4 id="12-2日"><a href="#12-2日" class="headerlink" title="12.2日"></a>12.2日</h4><p>加入更多的响应</p><p><img src="/study_photo2/simplebank10.png" alt="image-20241129195504285"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>存算一体架构</title>
      <link href="/archives/ai.html"/>
      <url>/archives/ai.html</url>
      
        <content type="html"><![CDATA[<p>冯诺依曼体系 是我们现在计算机的处理架构 </p><p>把数据放入存储中 再从存储中把数据取出来并去计算 </p><p>大脑的功耗为什么低？ CPU GPU等训练大模型的功耗为什么高？</p><p>大脑是怎么工作的？ 而现在的体系呢？</p><p>非常好的观点！：</p><p><a href="https://www.youtube.com/watch?v=d1dGmqovyaU">https://www.youtube.com/watch?v=d1dGmqovyaU</a></p><ol><li>抛开表面事实</li><li>回归基础原理</li><li>找到问题关键</li></ol><p>顶着风险！<br>第一性：找到正确的方向</p><p>共成长 长期主义 持续学习</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>理解鉴权，权限等名词的区别</title>
      <link href="/archives/authority.html"/>
      <url>/archives/authority.html</url>
      
        <content type="html"><![CDATA[<h2 id="GPT很好的给出了答案"><a href="#GPT很好的给出了答案" class="headerlink" title="GPT很好的给出了答案"></a>GPT很好的给出了答案</h2><p>问：</p><p>用户通过了身份验证，但是不具有访问资源所需的权限。 这句话我应该怎么理解，我还有的疑惑是Cookie，Token，鉴权，权限等这几个名词都是什么意思，我现在对他们的理解有点模糊</p><p>答：</p><p>这些概念是 Web 安全和权限管理的核心部分。让我们分两步：<strong>先理解句子的含义</strong>，再深入解析相关概念（Cookie、Token、鉴权、权限等）。</p><hr><h3 id="1-句子的含义"><a href="#1-句子的含义" class="headerlink" title="1. 句子的含义"></a><strong>1. 句子的含义</strong></h3><blockquote><p><strong>“用户通过了身份验证，但是不具有访问资源所需的权限。”</strong></p></blockquote><p>这句话分为两个阶段：</p><ol><li><p><strong>身份验证</strong>（Authentication）：系统确认了用户的身份（比如你用正确的用户名和密码登录）。</p><ul><li><strong>说明</strong>：你确实是你声称的那个人。</li><li><strong>类比</strong>：这就像进入公司时，你刷卡证明你是公司的员工。</li></ul></li><li><p><strong>权限检查</strong>（Authorization）：系统检查用户是否有权访问某些特定资源。</p><ul><li><strong>说明</strong>：通过身份验证并不代表你可以访问所有东西。例如：<ul><li>普通用户可能无法访问管理员界面。</li><li>销售部门员工可能无法查看财务报表。</li></ul></li><li><strong>类比</strong>：在公司内部，即使你刷卡进门，也可能需要额外权限才能进入某些区域（比如机房）。</li></ul></li></ol><p><strong>总结</strong>：身份验证是“你是谁”，权限检查是“你是否被允许做某件事”。通过身份验证 ≠ 获得所有权限。</p><hr><h3 id="2-概念解析"><a href="#2-概念解析" class="headerlink" title="2. 概念解析"></a><strong>2. 概念解析</strong></h3><h4 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="(1) Cookie"></a><strong>(1) Cookie</strong></h4><ul><li><strong>定义</strong>：一种小型数据，存储在用户浏览器中，由服务器生成，用来记录用户的会话状态或其他信息。</li><li><strong>用途</strong>：<ol><li><strong>会话管理</strong>：比如记录你是否已登录。</li><li><strong>个性化</strong>：比如保存语言设置。</li><li><strong>追踪</strong>：用于广告和分析。</li></ol></li></ul><p><strong>类比</strong>：Cookie 就像一个身份证明牌，浏览器每次请求时带上它，服务器根据这个证明牌识别你的身份。</p><hr><h4 id="2-Token"><a href="#2-Token" class="headerlink" title="(2) Token"></a><strong>(2) Token</strong></h4><ul><li><strong>定义</strong>：类似于数字化的通行证，通常由服务器生成并发放给用户，用户每次请求时带上 Token，证明自己已通过身份验证。</li><li><strong>常见类型</strong>：<ul><li>**JWT (JSON Web Token)**：一种格式化的 Token，常用于现代 Web 应用。</li></ul></li></ul><p><strong>区别于 Cookie</strong>：</p><ul><li>Cookie 是浏览器特有的存储机制，而 Token 是一个通用的凭证。</li><li>Cookie 通常自动附加在请求中，Token 需要开发者手动附加（如放在请求头中）。</li></ul><p><strong>类比</strong>：Token 就像一个“通行证”，你需要用它向服务器证明你有访问权限。</p><hr><h4 id="3-鉴权"><a href="#3-鉴权" class="headerlink" title="(3) 鉴权"></a><strong>(3) 鉴权</strong></h4><ul><li><strong>定义</strong>：确定用户是否具有访问资源或执行操作的权限。</li><li><strong>过程</strong>：<ul><li>用户发起请求时，系统会验证用户提供的凭证（比如 Token 或 Cookie）。</li><li>系统根据用户的角色、组或策略，判断是否允许操作。</li></ul></li></ul><p><strong>类比</strong>：鉴权就像安保检查，你拿着门卡，安保会检查你的权限，决定你是否可以进入某些区域。</p><hr><h4 id="4-权限"><a href="#4-权限" class="headerlink" title="(4) 权限"></a><strong>(4) 权限</strong></h4><ul><li><strong>定义</strong>：指用户被允许执行的操作范围或访问的资源类型。</li><li><strong>示例</strong>：<ul><li>读权限：允许查看文件内容。</li><li>写权限：允许修改文件内容。</li><li>管理权限：允许管理其他用户。</li></ul></li></ul><p><strong>类比</strong>：权限就像不同的钥匙，钥匙决定了你能打开哪些门。</p><hr><h3 id="3-总结关系和区别"><a href="#3-总结关系和区别" class="headerlink" title="3. 总结关系和区别"></a><strong>3. 总结关系和区别</strong></h3><ul><li><strong>Cookie</strong>：存储用户会话信息，让服务器识别用户是谁。</li><li><strong>Token</strong>：携带用户身份信息，用于证明用户已通过身份验证。</li><li><strong>鉴权</strong>：判断用户是否有权访问特定资源。</li><li><strong>权限</strong>：用户可以做的事情或访问的资源范围。</li></ul><hr><h3 id="4-一个完整的例子"><a href="#4-一个完整的例子" class="headerlink" title="4. 一个完整的例子"></a><strong>4. 一个完整的例子</strong></h3><ol><li><p>用户访问网站，输入用户名和密码（<strong>身份验证</strong>）。</p><ul><li>服务器验证用户名和密码正确，生成一个 Token 返回给用户。</li><li>Token 或者对应的 Session ID 会存储在用户的 Cookie 中。</li></ul></li><li><p>用户请求资源时，浏览器自动带上 Cookie（或你自己带上 Token）。</p><ul><li>服务器接收到请求后，验证 Token 或 Cookie 的合法性。</li></ul></li><li><p>服务器检查权限（<strong>鉴权</strong>）。</p><ul><li>如果你有权限，资源返回给你。</li><li>如果你没有权限，服务器返回 “403 Forbidden”。</li></ul></li></ol><p>你可以将这些过程看成一道流水线：<strong>身份验证 -&gt; 带凭证发请求 -&gt; 权限检查 -&gt; 返回结果</strong>。</p><p>就是我是 赵忠鹤 检查 赵忠鹤是不是有权限访问这个内容，大体就是这个意思</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络持续学习中~</title>
      <link href="/archives/computer_network.html"/>
      <url>/archives/computer_network.html</url>
      
        <content type="html"><![CDATA[<h2 id="记录一下自己在黑皮书中的学习记录下有用的部分"><a href="#记录一下自己在黑皮书中的学习记录下有用的部分" class="headerlink" title="记录一下自己在黑皮书中的学习记录下有用的部分"></a>记录一下自己在黑皮书中的学习记录下有用的部分</h2><hr><p>非常好的学习HTTP RESTFUL API 链接<br>链接1： <a href="https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">https://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html</a></p><p>链接2： <a href="https://www.ruanyifeng.com/blog/2016/08/http.html">https://www.ruanyifeng.com/blog/2016/08/http.html</a></p><h2 id="链接3：-https-florimond-dev-en-posts-2018-08-restful-api-design-13-best-practices-to-make-your-users-happy"><a href="#链接3：-https-florimond-dev-en-posts-2018-08-restful-api-design-13-best-practices-to-make-your-users-happy" class="headerlink" title="链接3： https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy"></a>链接3： <a href="https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy">https://florimond.dev/en/posts/2018/08/restful-api-design-13-best-practices-to-make-your-users-happy</a></h2><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="2-1应用层协议原理："><a href="#2-1应用层协议原理：" class="headerlink" title="2.1应用层协议原理："></a>2.1应用层协议原理：</h3><p>Web应用程序中两个互相通讯的不同程序：</p><ol><li>运行在用户主机上浏览器程序</li><li>运行在Web服务器主机上</li></ol><p>网络上的核心设备并不在应用层起作用， 这将应用软件限制在了端系统，这促进了大量网络应用程序的迅速研发与部署</p><h4 id="2-1-1网络应用程序体系结构"><a href="#2-1-1网络应用程序体系结构" class="headerlink" title="2.1.1网络应用程序体系结构"></a>2.1.1网络应用程序体系结构</h4><p>应用层的体系结构 明显 不同于网络的体系结构（网络的体系结构是固定的，提供了特定的服务集合）</p><p>应用层体系结构（大体两个）：</p><ol><li>客户-服务器体系结构</li><li>p2p体系结构</li></ol><h5 id="1-客户-服务器体系结构："><a href="#1-客户-服务器体系结构：" class="headerlink" title="1.客户-服务器体系结构："></a>1.客户-服务器体系结构：</h5><p>有一个总打开的主机被称为：服务器（它服务于许多其他称为客户的主机请求）</p><p>例子：</p><p>Web应用服务器：（Web服务器服务于浏览器（运行在客户机）的请求）</p><p>在这个体系结构中 客户之间并不直接通信 而是 客户通过向该服务器的ip地址发送分组 用来取得联系</p><p>著名的Web应用：</p><p>Web FTP Telent 电子邮箱</p><p>在这个体系中 如果只有一台服务器 在某些情况（大量的所有请i去）会导致服务器变得不堪重负，因此-配备大量主机的 <strong>数据中心</strong></p><p>流行的因特网服务：</p><p>搜索引擎（Google，bing，百度）等 应用了一个或多个数据中心（1个数据中心 可以有数十万台服务器）</p><h5 id="2-p2p体系结构"><a href="#2-p2p体系结构" class="headerlink" title="2. p2p体系结构"></a>2. p2p体系结构</h5><p>主机对之间使用直接通信（对等方），引人入胜的特性（自扩展性），</p><p>面临挑战： 高度非集中式，面临安全性，性能和可靠性等挑战</p><p>应用：</p><p>文件共享，对等方协助下载器（迅雷）因特网电话和视频会议 </p><p>有的应用具有两种的混合体系： 服务器被用来跟踪用户的ip地址 但 用户到用户的报文在用户到主机之间 直接发送</p><h4 id="2-1-2进程通信"><a href="#2-1-2进程通信" class="headerlink" title="2.1.2进程通信"></a>2.1.2进程通信</h4><p>运行在多个端系统上的程序如何互相通信，进行通信实际上是<strong>进程</strong>而不是程序<br><strong>进程</strong>可以被认为是运行在端系统的一个程序。 多个进程运行在相同的端系统时<strong>使用进程间通信机制互相通信（通信规则由  _端系统上的操作系统制定_）</strong></p><h2 id="关注的是-运行在不同端系统上的进程间的通信"><a href="#关注的是-运行在不同端系统上的进程间的通信" class="headerlink" title="关注的是 运行在不同端系统上的进程间的通信"></a>关注的是 运行在不同端系统上的进程间的通信</h2><p>在不同的端系统上的进程 通过 跨越进程通过网络互相发送<strong>报文</strong></p><p>发送进程 生成并 向网络中 发送报文 -》接收进程接收报文并通过回送报文响应</p><h5 id="1-客户和服务器进程"><a href="#1-客户和服务器进程" class="headerlink" title="1.客户和服务器进程"></a>1.客户和服务器进程</h5><p>网络应用程序由 成对的进程组成 进程之间 通过网路互相发送报文 </p><p>例子：</p><p>客户浏览器进程 与 Web服务器进程交换报文 在p2p中： 文件从一个对等方中的进程 传输到 另一个对等放进程 其中一个进程被表示为<strong>客户</strong> 另一个进程被标记为<strong>服务器</strong></p><h5 id="2-进程与计算机网络之间的接口（api）"><a href="#2-进程与计算机网络之间的接口（api）" class="headerlink" title="2.进程与计算机网络之间的接口（api）"></a>2.进程与计算机网络之间的接口（api）</h5><p>进程 通过一个称为<strong>套接字（socket）</strong> 的软件接口 向网络发送报文和从网络接收报文</p><p><strong>套接字</strong>： 是同一台主机被<strong>应用层与传输层之间</strong>的接口 套接字被称为 应用进程 和 网络之间的（api）</p><p>我们可以控制套接字在应用端的一切 但是 对运输层几乎没有控制权 仅限于：选择运输层协议 也能设定几个运输层协议（最大缓存，最大报文长度）</p><h5 id="3-进程寻址"><a href="#3-进程寻址" class="headerlink" title="3.进程寻址"></a>3.进程寻址</h5><p>主机由<strong>ip地址</strong>标识， ip地址： 是32比特的量它能够标识该主机 </p><p><strong>端口号</strong>： 众所周知的端口号列表： <a href="http://www.iana.org/">http://www.iana.org</a></p><p><img src="/study_photo/internet2.jpg" alt="image-20241107112953295"></p><h4 id="2-1-3-可供应用程序使用的运输服务"><a href="#2-1-3-可供应用程序使用的运输服务" class="headerlink" title="2.1.3 可供应用程序使用的运输服务"></a>2.1.3 可供应用程序使用的运输服务</h4><p>运输层协议负责从接收进程的套接字得到该报文 开发应用时还要选择根基情况 选择合适的协议 选择服务</p><p>服务： 可靠数据传输 吞吐量 定时 安全性</p><h5 id="1-可靠数据传输"><a href="#1-可靠数据传输" class="headerlink" title="1.可靠数据传输"></a>1.可靠数据传输</h5><p>因为 分组可能在计算机网络中丢失，</p><p>例子：</p><p>分组能够使路由器中的缓存溢出， 分组中的某些比特损坏后可能被丢弃 在某些特定情况下： 电子邮件，文件传输，远程主机访问<br>如果数据丢失可能会造成灾难性的损失，</p><p>因此 当运输层协议提供一种可靠传输， 发送进程只需要将数据传递到套接字中 就可以完全相信数据无差别的到达接收进程<br>但是也有一些东西可以容忍数据的丢失（不适用可靠数据传输时） 音频&#x2F;视频</p><h5 id="2-吞吐量"><a href="#2-吞吐量" class="headerlink" title="2.吞吐量"></a>2.吞吐量</h5><p>吞吐量就是发送进程能够向接收进程交付比特的速率 会话 将共享沿着网络路径的带宽 运输层协议能够确保可用吞吐量为至少r&#x2F;bit&#x2F;s当（应用程序请求r&#x2F;bit&#x2F;s）</p><p>示例：<br>电话需要固定的bit进行编码 如果不能提供这中吞吐量或者较小 造成放弃发送（因为接收一半可能是没用的）<br>弹性应用：可以根据 可用的宽带或多或少来利用可供使用的吞吐量<br>当然 吞吐量越高越好哈哈哈</p><h5 id="3-定时"><a href="#3-定时" class="headerlink" title="3.定时"></a>3.定时</h5><p>运输层协议也能提供定时保证 因为在特定情况下 电话，虚拟环境 多方游戏（对时间有严格的限制） 否则会造成停顿， 较长的时延<br>但 端到端的时延没有严格的约束</p><h5 id="4，安全性"><a href="#4，安全性" class="headerlink" title="4，安全性"></a>4，安全性</h5><p>运输协议为应用提供 一种或多种安全性服务 能加密发送进程传输的所有数据 防止数据以某种方式 在两个进程之间被观察</p><h4 id="2-1-4-因特网提供的运输服务"><a href="#2-1-4-因特网提供的运输服务" class="headerlink" title="2.1.4 因特网提供的运输服务"></a>2.1.4 因特网提供的运输服务</h4><p>因特网（TCp&#x2F;IP网络）为应用程序提供两个运输层协议（TCP&#x2F;UDP）</p><h5 id="1-TCP服务"><a href="#1-TCP服务" class="headerlink" title="1.TCP服务"></a>1.TCP服务</h5><p>特点： <strong>面向连接服务</strong>和<strong>可靠数据传输服务</strong></p><p><img src="/study_photo/internet.jpg" alt="image-20241107112953295"></p><p><strong>面向连接：</strong> 在应用层数据报文开始流动之前， TCP使 客户 和 服务器 之前相互交换 运输层控制信息（握手过程） 让它们提前做好准备<br>握手之后 <strong>TCP连接就建立了</strong>  连接时双工的： 双方可以连接上 同时进行报文的收发  当收发结束后 必须拆除连接</p><p><strong>可靠的数据传送服务：</strong> 通信进程依靠TCP 无差错的按照顺序交付所有的发送数据 当一方将字节流传入套接字时 依靠TCP将相同的<br>字节流交付给接收方的套接字 没有字节的丢失和冗余 </p><p>TCP具有拥塞控制机制  当发送方和接收方之间网络出现问题堵塞 TCP的机制可以抑制发送进程 也试图限制每个TCP连接 达到公平共享网络宽带目的</p><hr><p>原文链接： <a href="https://github.com/wolverinn/Waking-Up/blob/master/Computertree-way-handshake">https://github.com/wolverinn/Waking-Up/blob/master/Computertree-way-handshake</a></p><p>简单理解：</p><h6 id="三次握手（三报文握手）"><a href="#三次握手（三报文握手）" class="headerlink" title="三次握手（三报文握手）"></a>三次握手（三报文握手）</h6><p>第一次握手：Client将SYN置1，随机产生一个初始序列号seq发送给Server，进入SYN_SENT状态；<br>第二次握手：Server收到Client的SYN&#x3D;1之后，知道客户端请求建立连接，将自己的SYN置1，ACK置1，产生一个acknowledge number&#x3D;sequence number+1，并随机产生一个自己的初始序列号，发送给客户端；进入SYN_RCVD状态；<br>第三次握手：客户端检查acknowledge number是否为序列号+1，ACK是否为1，检查正确之后将自己的ACK置为1，产生一个acknowledge number&#x3D;服务器发的序列号+1，发送给服务器；进入ESTABLISHED状态；服务器检查ACK为1和acknowledge number为序列号+1之后，也进入ESTABLISHED状态；完成三次握手，连接建立。</p><p>目的： 建立 TCP连接</p><h6 id="两次握手呢？"><a href="#两次握手呢？" class="headerlink" title="两次握手呢？"></a>两次握手呢？</h6><p>只发送前两次报文 不会有 最后一次的客户端同步状态报文<br>这就会导致超时重传<br>把问题想象成发送报文就好理解了：<br>一段时间后，之前滞留在网络中的那个失效的TCP连接请求报文段到达了TCP服务器进程，TCP 服务器进程会误认为这是TCP客户进程又发起了一个新的TCP连接请求，于是给TCP客户进程发送TCP连接请求确认报文段并进入连接已建立状态。<br>该报文段到达TCP客户进程，由于TCP客户进程并没有发起新的TCP连接请求，并且处于关闭状态，因此不会理会该报文段。</p><p>不可以！</p><p>如果不是用三次握手 那么只要client发出确认报文段， server发出确认新的连接就建立了<br>因为第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了延误到连接释放以后的某个时间才到达<br>但 server 却以为新的运输连接已经建立，并一直等待 client 发来数据。这样，server 的很多资源就白白浪费掉了。</p><h6 id="四次握手？"><a href="#四次握手？" class="headerlink" title="四次握手？"></a>四次握手？</h6><p>可以。但是会降低传输的效率。</p><p>四次握手是指：第二次握手：Server只发送ACK和acknowledge number；而Server的SYN和初始序列号在第三次握手时发送；<br>原来协议中的第三次握手变为第四次握手。出于优化目的，四次握手中的二、三可以合并。</p><p>了解名词ACK acknowledge number SYN 初始序列号</p><p>参考链接： <a href="https://juejin.cn/post/7028003193502040072">https://juejin.cn/post/7028003193502040072</a></p><p><strong>确认标志位ACK：</strong> 取值为1时确认号字段才有效；取值为0时确认号字段无效。TCP规定，在连接建立后所有传送的TCP报文段都必须把ACK置1。</p><p>源端口：16bit 目的端口： 16bit<br>序号：32bit</p><p><strong>同步标志位SYN：</strong> 在TCP连接建立时用来同步序号。终止标志位FIN： 用来释放TCP连接。复位标志位RST： 用来复位TCP连接。</p><p><strong>推送标志位PSH：</strong> 接收方的TCP收到该标志位为1的报文段会尽快上交应用进程，而不必等到接收缓存都填满后再向上交付。</p><p>TCP建立需要解决的问题：</p><p>1、使TCP双方能够确知对方的存在 。</p><p>2、使TCP双方能够协商一些参数（ 最大窗口值是否使用窗口扩大选项和时间戳选项，以及服务质量等）。</p><p>3、使TCP双方能够对运输实体资源（例如缓存大小连接表中的项目等）进行分配。</p><p>TCP规定SYN被设置为1的报文段不能携带数据但要消耗掉一个序号。</p><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p><strong>总结：</strong><br>如果没有第三次握手告诉服务器客户端能否收到服务器传输的数据的话，<br>服务器端的端口就会一直开着，等到客户端因超时重新发出请求时，服务器就会重新开启一个端口连接。长此以往， 这样的端口越来越多，就会造成服务器开销的浪费。</p><p>探测报文检测 确认客户端是否出现故障 然后关闭连接</p><h6 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h6><p>第一次挥手：Client将FIN置为1，发送一个序列号seq给Server；进入FIN_WAIT_1状态；<br>第二次挥手：Server收到FIN之后，发送一个ACK&#x3D;1，acknowledge number&#x3D;收到的序列号+1；进入CLOSE_WAIT状态。此时客户端已经没有要发送的数据了，但仍可以接受服务器发来的数据。<br>第三次挥手：Server将FIN置1，发送一个序列号给Client；进入LAST_ACK状态；<br>第四次挥手：Client收到服务器的FIN后，进入TIME_WAIT状态；接着将ACK置1，发送一个acknowledge number&#x3D;序列号+1给服务器；服务器收到后，确认acknowledge number后，变为CLOSED状态，不再向客户端发送数据。客户端等待2*MSL（报文段最长寿命）时间后，也进入CLOSED状态。完成四次挥手。</p><p>还有些不太理解学习一下这些名字之后再来理解</p><hr><h5 id="2-UDP服务"><a href="#2-UDP服务" class="headerlink" title="2.UDP服务"></a>2.UDP服务</h5><p>UDP是 轻量级运输协议仅提供最小服务 状态：无连接的，两个进程通信没有握手过程， 提供：不可靠传输协议：不保证报文到达接收进程<br>报文也可能是乱序到达  也没有拥塞控制机制</p><h5 id="因特网运输协议所不提供的服务"><a href="#因特网运输协议所不提供的服务" class="headerlink" title="因特网运输协议所不提供的服务"></a>因特网运输协议所不提供的服务</h5><p>TCP在应用层 用SSL加强提供安全服务 漏掉了 吞吐量，和定时保证</p><h4 id="2-1-5-应用层协议"><a href="#2-1-5-应用层协议" class="headerlink" title="2.1.5 应用层协议"></a>2.1.5 应用层协议</h4><p>定义了：</p><ol><li>交换的报文类型 如：请求报文，响应报文</li><li>报文类型语法 如：报文字段是如何描述的</li><li>字段的语义 就是信息含义</li><li>确定进程何时发送报文</li></ol><p>Web的应用层协议是HTTP： </p><p>因特网电子邮件应用：包括 电子邮件报文结构的标准 以及 定义报文如何在服务器之间以及如何在服务器与邮件客户程序之间传递的应用层协议</p><h3 id="2-2Web和HTTP"><a href="#2-2Web和HTTP" class="headerlink" title="2.2Web和HTTP"></a>2.2Web和HTTP</h3><h4 id="2-2-1HTTP概况"><a href="#2-2-1HTTP概况" class="headerlink" title="2.2.1HTTP概况"></a>2.2.1HTTP概况</h4><p>Web层应用层协议是超文本传输协议 HTTP由两个程序实现（客户程序）（服务器程序） 通过交换HTTP报文进行会话</p><p><strong>Web界面</strong><br>它是由文档组成的也就是（对象）： 一个对象是一个文件 例如： HTML文件 JPEG图形</p><p>例如： 如果一个HTML文件＋五个图片 也就是 Web页面有6个对象</p><p>URL地址两部分组成：服务器主机名 和 对象 URL：<a href="http://www/someSchool.edu/someDepartment/picture.gif">http://www/someSchool.edu/someDepartment/picture.gif</a> 到edu是主机名<br>后面是路径名</p><p>Web服务器 实现了HTTP服务器端 用于存储Web对象 流行的Web服务器：Apache等</p><p><img src="/study_photo/internet3.jpg" alt="image-20241107112953295"></p><h4 id="2-2-2非持续连接和持续链接"><a href="#2-2-2非持续连接和持续链接" class="headerlink" title="2.2.2非持续连接和持续链接"></a>2.2.2非持续连接和持续链接</h4><p>两个问题：</p><p>每个请求&#x2F;响应是 经 一个单独的TCP连接： 这称为（非持续连接）<br>还是 经相同的TCP连接发送： 这称为（持续链接）</p><h5 id="1-采用非持续连接的HTTP"><a href="#1-采用非持续连接的HTTP" class="headerlink" title="1.采用非持续连接的HTTP"></a>1.采用非持续连接的HTTP</h5><p>过程：<br><img src="/study_photo/internet4.jpg" alt="image-20241107112953295"></p><p>每个TCP只传输一个请求报文和一个响应报文</p><p>串行TCP：</p><p>并行TCP：</p><p>浏览器可以设置并行数 如果设为1 那么就会变化串行连接 并行连接可以减少响应时间</p><p><strong>往返时间（RTT）</strong></p><p>RTT包括： 分组传播时延 分组在（中间路由器）（交换机）的排队时延 分组时延</p><p><strong>三次握手过程</strong></p><ol><li>客户向服务器发送小TCP报文</li><li>服务器用小TCP报文做出确认和响应</li><li>客户向服务器返回确认</li></ol><p>这三次握手中 前两部分花费 一个RTT<br>握手后向该TCP连接发送HTTP请求报文 一旦请求报文到达服务器 服务器就在TCP连接上发送HTML文件<br>该HTTP的请求和响应用了一个HTTP  服务器传输HTML花费了时间<br>一共为 2RTT+传输时间</p><h5 id="2-采用持续连接的HTTP"><a href="#2-采用持续连接的HTTP" class="headerlink" title="2.采用持续连接的HTTP"></a>2.采用持续连接的HTTP</h5><p> 非持续链接的缺点： 每次连接都需要： 分配TCP缓存区和保持TCP变量 这给Web服务器造成了很大的负担<br> 每一个对象都会造成上面的时延时间</p><p>HTTP1.1 在服务器响应后 保持TCP打开 用单个TCP进行传送 在一定的时间间隔没有被使用HTTP服务器再关闭连接<br>HTTP2  它允许再相同连接中多个请求和回答错误 增加了连接中优化HTTP报文请i去和回答机制</p><h4 id="2-2-3-HTTP请求报文格式"><a href="#2-2-3-HTTP请求报文格式" class="headerlink" title="2.2.3 HTTP请求报文格式"></a>2.2.3 HTTP请求报文格式</h4><h5 id="1-HTTP-请求报文"><a href="#1-HTTP-请求报文" class="headerlink" title="1.HTTP 请求报文"></a>1.HTTP 请求报文</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET /somedir/page.html HTTP/1.1</span><br><span class="line">HOST: www.someschool.edu</span><br><span class="line">Connection: close</span><br><span class="line">User-agent: Mozilla/5.0</span><br><span class="line">Accept-language: fr</span><br></pre></td></tr></table></figure><p>第一行：请求行<br>后继行：首部行</p><p><img src="/study_photo2/internet.jpg" alt="internet.jpg"></p><h5 id="2-HTTP-响应报文"><a href="#2-HTTP-响应报文" class="headerlink" title="2.HTTP 响应报文"></a>2.HTTP 响应报文</h5><p>真实的HTTP响应报文：<br>用Telnet 登录到喜欢的Web服务器上 请求报文请求放在该服务器上的某些对象</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">telnet gaia.cs.umass.edu 80</span><br><span class="line"></span><br><span class="line">Trying 128.119.245.12...</span><br><span class="line">Connected to gaia.cs.umass.edu.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">GET /kurose_ross/interactive/index.php HTTP/1.1</span><br><span class="line">Host: gaia.cs.umass.edu</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 27 Nov 2024 13:06:02 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span><br><span class="line">X-Powered-By: PHP/7.4.33</span><br><span class="line">Set-Cookie: DevMode=0</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure><p>这里的<br>GET &#x2F;kurose_ross&#x2F;interactive&#x2F;index.php HTTP&#x2F;1.1<br>Host: gaia.cs.umass.edu<br>格式很重要 回车必不可少</p><p>只想看HTTP协议的报文行 用HEAD代替GET<br>上述简短的两行代码 打开了主机 .edu的80端口的TCP连接 发送了一个HTTP请求报文</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">telnet gaia.cs.umass.edu 80</span><br><span class="line">Trying 128.119.245.12...</span><br><span class="line">Connected to gaia.cs.umass.edu.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">HEAD /kurose_ross/interactive/index.php HTTP/1.1</span><br><span class="line">Host: gaia.cs.umass.edu</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Wed, 27 Nov 2024 13:11:35 GMT</span><br><span class="line">Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips PHP/7.4.33 mod_perl/2.0.11 Perl/v5.16.3</span><br><span class="line">X-Powered-By: PHP/7.4.33</span><br><span class="line">Set-Cookie: DevMode=0</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>GT方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，<br>且每次的结果都是相同的。所以，可以对GET请求的数据做缓存，这个缓存可以做到浏览器本身上<br>(彻底避免浏览器发请求)，也可以做到代理上（如gix)，而且在浏览器中GET请求可以保存为书<br>签。</p><p>POST因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据<br>就会创建多个资源，所以不是幂等的。所以，浏览器一般不会缓存POST请求，也不能把POST请求保<br>存为书签。</p><h5 id="减少HTTP请求次数"><a href="#减少HTTP请求次数" class="headerlink" title="减少HTTP请求次数"></a>减少HTTP请求次数</h5><p>1.减少重定向请求次数</p><p>重定向请求越多，那么客户端就要多次发起 HTTP 请求 每一次的 HTTP 请求都得经过网络，这无疑会越降低网络性能</p><p>重定向的工作交由代理服务器完成，就能减少 HTTP 请求次数了<br>代理服务器知晓了重定向规则后，可以进一步减少消息传递次数</p><hr><h4 id="2-2-4用户与服务器的交互-cookie"><a href="#2-2-4用户与服务器的交互-cookie" class="headerlink" title="2.2.4用户与服务器的交互 cookie"></a>2.2.4用户与服务器的交互 cookie</h4><p>HTTP服务器是无状态的 不需要验证。但是站点是希望能够标识用户， 因为服务器可能需要限制用户的访问，这就需要把内容和用户关联到一起<br>HTTP使用了 <strong>cookie</strong> </p><p><strong>cookie的四个组件</strong></p><ol><li>HTTP响应报文的一个cookie首部行</li><li>HTTP请求报文的一个cookie首部行</li><li>用户端系统保留一个cookie文件浏览器进行管理</li><li>位于WEB站点的后端数据库</li></ol><p><img src="/study_photo2/internet2.jpg" alt="internet.jpg"></p><p>这样当Susan再次访问一个站点的时候 浏览器放入首部行  就不用再输入一些信息了<br>实行了”点击购物“</p><h4 id="2-2-5-Web缓存"><a href="#2-2-5-Web缓存" class="headerlink" title="2.2.5 Web缓存"></a>2.2.5 Web缓存</h4><p><img src="/study_photo2/internet3.jpg" alt="internet.jpg"></p><p>还需要 深入理解缓存器带来的好处</p><p><img src="/study_photo2/internet4.jpg" alt="internet.jpg"></p><p>HTTP中的 强制缓存和协商缓存</p><h5 id="强制缓存定义："><a href="#强制缓存定义：" class="headerlink" title="强制缓存定义："></a>强制缓存定义：</h5><p>强制缓存是指客户端直接使用本地缓存的数据，而不会向服务器发送请求验证数据的有效性。</p><p>工作方式：</p><p>HTTP 头部中：<br>使用 Cache-Control 指定缓存策略（例如 max-age）。<br>或使用 Expires（HTTP&#x2F;1.0，已逐步被 Cache-Control 替代）指定缓存失效时间。<br>如果缓存未过期，浏览器会直接从本地缓存读取数据，而不会与服务器通信。<br>特点：</p><p>节约资源：不需要请求服务器。<br>时效性：受 max-age 或 Expires 的约束，可能存在缓存失效时间的误差。</p><h5 id="协商缓存-Conditional-Cache"><a href="#协商缓存-Conditional-Cache" class="headerlink" title="协商缓存 (Conditional Cache)"></a>协商缓存 (Conditional Cache)</h5><p>定义： 协商缓存是指客户端向服务器发送请求，验证本地缓存是否有效。如果有效，服务器返回一个状态码（如 304 Not Modified），客户端可以继续使用本地缓存的数据；否则，服务器返回最新的数据。</p><p>工作方式：</p><p>HTTP 头部中：<br>请求头：使用 If-Modified-Since 或 If-None-Match。<br>响应头：服务器返回 Last-Modified（表示资源最后修改时间）或 ETag（资源的唯一标识符）。<br>客户端会将缓存中记录的 ETag 或 Last-Modified 发送到服务器进行验证：<br>如果验证通过（服务器认为缓存未修改），返回 304。<br>如果验证失败（资源已更新），返回新的资源数据（200 OK）。<br>特点：</p><p>相对准确：确保缓存数据的有效性。<br>需要通信：每次都需要向服务器发送请求进行验证。</p><p>缓存命中率<br>内容分发网络（CDN）：多个共享CDN 专用CDN</p><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>问题： 存放在混村其中的对象副本是旧的，或者再保存到服务器中的对象再缓存到客户上之后 就被修改了<br><strong>HTTP协议机制</strong>： 允许缓存器证实它的对象是最新的 也就是（<strong>条件GET</strong>）</p><p><code>If-modified-since: Wed, 9 Sep 2015 09:23:24</code></p><p>”If-Modified-Since“首部行 这个请求报文就是条件GET请求报文</p><p>缓存器在存储对象的同时也存储了最后的修改日期 缓存器通过一个条件GET执行最新查询<br>这条语句告诉服务器 仅当指定日期后该对象被修改过 才发送对象 </p><p>如果没有修改过 则相应的时候没有body 因为再次返回一样的body会浪费宽带</p><hr><p>插入</p><h4 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h4><p>在实践中，客户端指定数据流的优先级通常是在使用 HTTP&#x2F;2 时实现的。HTTP&#x2F;2 引入了<strong>流优先级（Stream Priority）</strong>机制，允许客户端为每个流指定一个优先级值，这个值会影响服务器在资源争用时对请求的处理顺序。</p><p>流优先级机制<br>优先级参数：每个 HTTP&#x2F;2 流都可以有一个权重值（weight），范围是 1 到 256，数字越大，优先级越高。<br>依赖关系：每个流还可以声明依赖于另一个流（dependency）。如果一个流依赖于另一个流，服务器会优先完成被依赖的流。<br>服务器根据这些参数决定如何分配带宽和计算资源。</p><p>实现流优先级的例子<br>客户端的实现（使用 cURL）<br>我们可以用支持 HTTP&#x2F;2 的工具，如 curl，来演示流优先级的使用。</p><p>发送两个并发请求（模拟流）</p><p>curl –http2 -o output1.html <a href="https://example.com/slow-response">https://example.com/slow-response</a> &amp;<br>curl –http2 -o output2.html <a href="https://example.com/fast-response">https://example.com/fast-response</a> &amp;<br>wait<br>默认情况下，这两个流的优先级相同，服务器会尽力均匀分配资源来处理它们。</p><p>设置优先级 使用 –http2-prioritize 选项来设置优先级。例如：</p><p>curl –http2 –http2-prioritize-weight 256 -o fast.html <a href="https://example.com/fast-response">https://example.com/fast-response</a> &amp;<br>curl –http2 –http2-prioritize-weight 1 -o slow.html <a href="https://example.com/slow-response">https://example.com/slow-response</a> &amp;<br>wait<br>这里：</p><p>fast-response 的优先级为 256（最高）。<br>slow-response 的优先级为 1（最低）。<br>服务器会优先响应 fast-response 流。</p><hr><h4 id="2-3-因特网中的电子邮件"><a href="#2-3-因特网中的电子邮件" class="headerlink" title="2.3 因特网中的电子邮件"></a>2.3 因特网中的电子邮件</h4><p>3个主体组成部分 <strong>用户代理</strong> <strong>邮件服务器</strong> <strong>简单邮件传输协议</strong></p><p><img src="/study_photo2/internet5.jpg" alt="internet.jpg"></p><p>SMTP： 应用层协议 使用TCP可靠数据传输 每台邮件服务器上：既运行SMTP的客户端也运行SMTP的服务器端<br>因为：</p><p>SMTP发送邮件的时候 表现为： 客户端</p><p>SMTP接收邮件的时候 表现为： 服务器端</p><p>使用7bit ASCII标识</p><h5 id="2-3-1-SMTP"><a href="#2-3-1-SMTP" class="headerlink" title="2.3.1 SMTP"></a>2.3.1 SMTP</h5><p><img src="/study_photo2/internet6.jpg" alt="internet.jpg"></p><hr><p>12.18 日</p><p>套接字编程： </p><ol><li><p>UDP套接字：</p></li><li><p>TCP套接字</p></li></ol>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统学习</title>
      <link href="/archives/computer_operate.html"/>
      <url>/archives/computer_operate.html</url>
      
        <content type="html"><![CDATA[<hr><p>6.cs081os学习</p><p>感谢：</p><p>参考资料：</p><p><a href="https://www.geeksforgeeks.org/pipe-system-call/">https://www.geeksforgeeks.org/pipe-system-call/</a></p><p>很好的文章：</p><p><a href="https://swtch.com/~rsc/thread/">https://swtch.com/~rsc/thread/</a></p><p>同步机制：<a href="https://zybtree.github.io/2020/08/12/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/">https://zybtree.github.io/2020/08/12/%E5%90%8C%E6%AD%A5%E6%9C%BA%E5%88%B6/</a></p><p>参考答案： <a href="https://github.com/relaxcn/xv6-labs-2022-solutions/blob/main/doc/utils.md">https://github.com/relaxcn/xv6-labs-2022-solutions/blob/main/doc/utils.md</a></p><p>学习链接： <a href="https://pdos.csail.mit.edu/6.828/2021/schedule.html">https://pdos.csail.mit.edu/6.828/2021/schedule.html</a></p><hr><p>直接从进程与线程入手</p><h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><p>单独的CPU变换成多个虚拟的CPU</p><h5 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h5><p>当网页请求进入的时候 先查看 网页是否在缓存中 如果不是<br>启动一个磁盘请求用来获取网页  磁盘请求会花费很多时间 等待的过程中会有更多的请求进入<br>每个进程有它自己的虚拟的CPU 真正的CPU在进程之间来回切换<br>需要一些方法例如多个磁盘 模拟控制并发 进程就能发挥作用<br>来回切换称： 多道程序设计</p><p>支持多进程的多道程序系统<br>一个核一次也只能运行一个进程</p><p><img src="/study_photo2/operater1.jpg" alt="internet.jpg"></p><hr><h4 id="12-1日"><a href="#12-1日" class="headerlink" title="12.1日"></a>12.1日</h4><h5 id="一-进程的并发执行"><a href="#一-进程的并发执行" class="headerlink" title="一.进程的并发执行"></a>一.进程的并发执行</h5><ol><li>并发</li></ol><ul><li>进程的执行是间断的</li></ul><p>每个进程的生命周期期间CPU执行 由于某种原因暂停 每个进程执行是间断性的</p><ul><li>进程的执行速度是不可预测的</li></ul><p>进程调度，有其他事件的发生，每个进程上cpu执行坑你一点时间听着再接着运行</p><ol start="2"><li>共享</li></ol><ul><li>进程线程之间的制约性<br>在一个并发环境下多个进程或者线程之间会共享某些资源，在这些资源的使用过程中会产生进程之间的一种制约性。<br>比如当一个进程享用打印机这个资源，另外一个进程在第一个进程没有释放这个资源的前提之下就得不到这个资源，那就得等待。</li></ul><ol start="3"><li>不确定性</li></ol><ul><li>进程执行的结果与其执行的相对速度有关</li></ul><p>进程执行的结果和它的相对执行速度是有关系的，因此在不同的执行顺序的情况下，进程的执行结果也是不确定的。</p><h5 id="二-进程互斥"><a href="#二-进程互斥" class="headerlink" title="二.进程互斥"></a>二.进程互斥</h5><p>由于各进程要求使用共享资源(变量、文件等)， 而这些资源需要排他性使用，<br>各进程之间竞争使用这些资源，这一关系称为进程互斥。</p><ul><li>临界资源<br>系统中某些资源一次只允许一个进程使用，称这样的资源为临界资源或互斥资源或共享变量。<br>这些程序片段，分散在不同的进程里，它们的共同的特点是对同一个共享变量进行一些操作<br>这一段代码，和另外一个进程的这一段代码互为临界区，互为互斥区</li></ul><p><img src="/study_photo2/operater2.jpg" alt="internet.jpg"></p><h4 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h4><p>计算机基本结构：运算器 控制器 存储器 输入设备 输出设备</p><h5 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h5><p>程序和数据都是存储在内存，存储区域是线性的</p><p>存储数据的基本单位是 字节 每一个字节对应一个内存地址</p><p>最后一个地址为内存总字节数 -1 结构就像数序中的数据</p><h5 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h5><p>也就是cpu：<br>32位cpu一次可以计算4个字节<br>64位cpu一次可以计算8个字节 位数也就是cpu的位宽 代表cpu一次可以计算的数据量</p><p>8 位的 CPU，那么一次只能计算 1 个字节也就是0~255 范围内的数值 那么 32位也就是一次可以计算出 2的32次方这么大的数值<br>cpu内部组件：寄存器，控制单元和逻辑运算单元</p><p>为什么有了内存还需要寄存器？</p><p>寄存器种类（通用寄存器）（程序计数器）（指令寄存器）</p><p>因为： 内存离 CPU 太远了，而寄存器就在 CPU 里，紧挨着控制单元和逻辑运算单元，自然计算时速度会很快。</p><h6 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h6><p>总线用于cpu和内存以及其他设备之前的通信</p><p>（地址总线）：指定CPU将要操作的内存地址</p><p>（数据总线）：用于读写内存的数据</p><p>（控制总线）： 发送和接收信号，比如中断，设备复位等信号</p><p>CPU 要读写内存数据的时候：</p><ul><li>首先要通过「地址总线」来指定内存的地址；</li><li>然后通过「控制总线」控制是读或写命令；</li><li>最后通过「数据总线」来传输数据；</li></ul><h5 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h5><p>输入设备向计算机输入数据，计算机经过计算后，把数据输出给输出设备。<br>如果输入设备是键盘，按下按键时是需要和 CPU 进行交互的，这时就需要用到控制总线了。</p><h5 id="线路位宽与CPU位宽"><a href="#线路位宽与CPU位宽" class="headerlink" title="线路位宽与CPU位宽"></a>线路位宽与CPU位宽</h5><p>数据是如何通过线路传输的呢<br>操作电压，低电压表示 0，高压电压则表示 1</p><p>101 二进制数据，十进制则表示 5，如果只有一条线路，就意味着每次只能传递 1 bit 的数据， 那么传输 101 这个数据，就需要 3 次才能传输完成，这样的效率非常低。</p><p>增加线路，数据并行传输</p><p>CPU 想要操作「内存地址」就需要「地址总线」：</p><p>地址总线只有 1 条，那每次只能表示 「0 或 1」这两种地址  最大数量为 2（2^1）个</p><p>如果地址总线有 2 条，那么能表示 00、01、10、11 这四种地址  最大数量为 4（2^2）个</p><p>CPU 操作 4G 大的内存，那么就需要 32 条地址总线，因为 2 ^ 32 &#x3D; 4G</p><p>CPU位宽最好不要小于线路位宽</p><h5 id="a-little-operater-systerm"><a href="#a-little-operater-systerm" class="headerlink" title="a little operater systerm"></a>a little operater systerm</h5><p>链接 ： <a href="https://lwn.net/Articles/250967/">https://lwn.net/Articles/250967/</a></p><p><img src="/study_photo2/cpumemory.4.png" alt="internet.jpg"></p><p>所有 CPU（前面的示例中为两个，但可以有更多）都通过公共总线（前端总线，FSB）连接到北桥。除其他外，北桥还包含内存控制器，<br>其实现决定了计算机使用的 RAM 芯片的类型。不同类型的 RAM，例如 DRAM、Rambus 和 SDRAM，需要不同的内存控制器。</p><p>要访问所有其他系统设备，北桥必须与南桥进行通信。南桥通常称为 I&#x2F;O 桥，通过各种不同的总线处理与设备的通信。如今，PCI、PCI Express、SATA 和 USB 总线最为重要，但南桥也支持 PATA、IEEE 1394、串行和并行端口。<br>较旧的系统具有连接到北桥的 AGP 插槽。这样做是出于与北桥和南桥之间的连接速度不够快相关的性能原因。然而，如今 PCI-E 插槽全部连接到南桥。</p><hr><h2 id="让终端显示出自己说的话"><a href="#让终端显示出自己说的话" class="headerlink" title="让终端显示出自己说的话"></a>让终端显示出自己说的话<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">root@xiaoxinxiaohao:~# vim .bashrc</span><br><span class="line">root@xiaoxinxiaohao:~# source ~/.bashrc</span><br><span class="line">赵忠鹤闪亮登场</span><br><span class="line">Today is: Fri Dec  6 05:12:09 PM CST 2024</span><br><span class="line">今天也要充满活力哇咔咔</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><p>听从了一些学习的建议，带着问题去读书，想学什么，去书中学，带着问题去读书</p><hr><p>12.16日</p><h4 id="看到了b站的一个关于Go并发设计"><a href="#看到了b站的一个关于Go并发设计" class="headerlink" title="看到了b站的一个关于Go并发设计"></a>看到了b站的一个关于Go并发设计</h4><p>了解协程： 协程是一种用户级的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈</p><p>主流语言基本上都选择了多线程作为并发设施</p><p>线程相关的概念就是抢占式多任务（Preemptive multitasking），而与协程相关的是协作式多任务</p><p>多线程编程是比较困难的， 因为调度程序任何时候都能中断线程， 必须记住保留锁， 去保护程序中重要部分， 防止多线程在执行的过程中断 协程默认会做好全方位保护， 以防止中断</p><h5 id="协程相比于多线程的优点"><a href="#协程相比于多线程的优点" class="headerlink" title="协程相比于多线程的优点"></a>协程相比于多线程的优点</h5><p>无需系统内核的上下文切换，减小开销； 因为：协程它不像线程和进程那样，需要进行系统内核上的上下文切换，协程的上下文切换是由开发人员决定的</p><p>无需原子操作锁定及同步的开销，不用担心资源共享的问题</p><p>单线程即可实现高并发，单核 CPU 即便支持上万的协程都不是问题，所以很适合用于高并发处理，尤其是在应用在网络爬虫中</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li>无法使用 CPU 的多核 因为： 协程的本质是个单线程</li><li>写协程就意味着你要一值写一些非阻塞的代码，使用各种异步版本的库，比如后面的异步爬虫教程中用的 aiohttp</li><li><strong>协程的概念最核心的点其实就是函数或者一段程序能够被挂起（说暂停其实也没啥问题），待会儿再恢复</strong></li></ol>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>为什么别人写项目知道用什么？</title>
      <link href="/archives/confusion.html"/>
      <url>/archives/confusion.html</url>
      
        <content type="html"><![CDATA[<p>同样来自GPT的回答：</p><p>你的疑惑非常好！许多人在学习编程时都会有类似的感受，尤其是在学习阶段，看到博主轻松选择某些包或者工具来解决问题时，会觉得他们似乎“无所不知”。事实上，这背后是<strong>经验</strong>和<strong>积累</strong>的结果。以下几点可以帮助你理解和逐步建立这种能力：</p><hr><h3 id="1-经验的积累"><a href="#1-经验的积累" class="headerlink" title="1. 经验的积累"></a><strong>1. 经验的积累</strong></h3><ul><li><strong>博主的背景</strong>：他们可能已经解决过类似问题，因此知道哪些包是高效的选择。这是经验的体现。</li><li><strong>类比</strong>：就像一位厨师在做菜时，很容易知道用什么调料，而新手可能需要查配方。</li></ul><h4 id="你可以这样做："><a href="#你可以这样做：" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li><strong>多看、多学</strong>：通过模仿优秀项目和学习文档，积累对常用库和框架的了解。</li><li><strong>练习总结</strong>：每次解决问题后，记录用到的包和方法，慢慢形成自己的“工具箱”。</li></ul><hr><h3 id="2-文档与生态"><a href="#2-文档与生态" class="headerlink" title="2. 文档与生态"></a><strong>2. 文档与生态</strong></h3><ul><li><p><strong>语言和框架的生态</strong>：每种语言或框架都有一些社区公认的、<strong>常用的库</strong>。</p><ul><li>比如，Go 语言处理配置时，大家常用 <code>viper</code> 或 <code>yaml</code>。</li><li>HTTP 请求：<code>net/http</code>（原生）或社区的 <code>gin</code>（框架）。</li></ul></li><li><p><strong>社区推荐</strong>：很多库被推荐使用，是因为它们：</p><ol><li><strong>功能齐全</strong>。</li><li><strong>易于使用</strong>。</li><li><strong>社区活跃</strong>，有长期维护。</li></ol></li></ul><h4 id="你可以这样做：-1"><a href="#你可以这样做：-1" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li><strong>了解生态</strong>：多逛 GitHub、Go 的标准库文档以及社区资源（比如 Go 的官方博客）。</li><li><strong>参考优秀代码</strong>：通过学习开源项目，你可以快速了解哪些包解决了哪些问题。</li></ul><hr><h3 id="3-搜索能力"><a href="#3-搜索能力" class="headerlink" title="3. 搜索能力"></a><strong>3. 搜索能力</strong></h3><ul><li><p>很多开发者的知识并不是“记住的”，而是“查到的”。他们遇到问题时，会：</p><ol><li><strong>搜索问题</strong>：查找类似场景的解决方案。</li><li><strong>评估方案</strong>：根据实际需求选择合适的库或框架。</li></ol></li><li><p>搜索时的技巧：</p><ul><li>用精准关键词，比如“Go JWT authentication package”。</li><li>看社区推荐，比如 Stack Overflow、Reddit、GitHub 等。</li></ul></li></ul><h4 id="你可以这样做：-2"><a href="#你可以这样做：-2" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li>当不知道用哪个包时，搜索类似场景的关键词，看看其他开发者用了什么库。</li><li>慢慢熟悉常用的社区推荐来源，比如：<ul><li><a href="https://awesome-go.com/">Awesome Go</a>：列出了 Go 的优秀库。</li><li><a href="https://pkg.go.dev/">Go Packages</a>：Go 的官方包文档和搜索平台。</li></ul></li></ul><hr><h3 id="4-理解需求，选择工具"><a href="#4-理解需求，选择工具" class="headerlink" title="4. 理解需求，选择工具"></a><strong>4. 理解需求，选择工具</strong></h3><ul><li>博主并不是“盲选”包，而是基于需求选工具。<ul><li>例如：需要读取配置文件，就会选择支持多种格式的 <code>viper</code>。</li><li>需要快速搭建 Web 服务框架，就会用 <code>gin</code> 或 <code>echo</code>。</li></ul></li></ul><h4 id="你可以这样做：-3"><a href="#你可以这样做：-3" class="headerlink" title="你可以这样做："></a><strong>你可以这样做：</strong></h4><ul><li>学会分析问题：问自己——“这个问题需要解决什么？”“有没有原生支持？”</li><li>学会看库文档：<ul><li>比如，在 GitHub 项目中，看 ReadMe 和示例代码，理解库的功能。</li></ul></li></ul><hr><h3 id="5-你的问题如何转换为实践"><a href="#5-你的问题如何转换为实践" class="headerlink" title="5. 你的问题如何转换为实践"></a><strong>5. 你的问题如何转换为实践</strong></h3><ol><li><strong>明确目标</strong>：先理解你要解决的问题，比如“实现一个 JWT 登录功能”。</li><li><strong>学习思路</strong>：看看博主怎么解决的，模仿过程并分析他们选择的工具是否合理。</li><li><strong>尝试自己实现</strong>：不要依赖博主的方案，尝试用其他库或者原生代码实现。</li></ol><hr><h3 id="总结：知识的形成是一个积累过程"><a href="#总结：知识的形成是一个积累过程" class="headerlink" title="总结：知识的形成是一个积累过程"></a><strong>总结：知识的形成是一个积累过程</strong></h3><p>博主看似“知道一切”，实际上是基于：</p><ol><li><strong>经验积累</strong>：长期的项目经验让他们知道常用包。</li><li><strong>良好工具链</strong>：对语言生态了解，知道优秀的社区推荐。</li><li><strong>高效搜索</strong>：遇到新问题时，他们可以快速找到解决方案。</li></ol><p><strong>行动建议</strong>：</p><ul><li>多积累项目经验，模仿优秀代码，逐渐形成自己的“工具箱”。</li><li>学会分解问题和尝试不同工具，在实践中找到更适合的解决方案。<br>坚持下去，你也会越来越“有经验”！ 😊</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊最近</title>
      <link href="/archives/current.html"/>
      <url>/archives/current.html</url>
      
        <content type="html"><![CDATA[<p>最近的日子在想着达到就业的水平，不断地提升额，嗯然后今天手机掉水里了，烘干24小时，看看能不能复活吧，突然觉得之前手机不是那么重要，回想起它占用<br>我的时间，好像都不是什么重要的事情，近期来，感觉是为了让自己舒服一点，白天学完，晚上回去就刷手机而且就是 12点 1点，恶性循环，本想着晚上回去看会<br>书，自己却暗示自己，学一天了，玩吧哈哈哈。好像都没做，但是确实没有那么重要，吃饭可以让同学帮我付，哈哈，还是得学习呢，反省一下，是不是你想要的太多了<br>而导致你很累，那种精神上的压迫自己，反思~</p><p>今天12.12日试着实现将单片机的数据传输到数据库中交互<br>先简单的使用按钮的高低电平0 1 实现交互试试看</p><p>后端服务代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/jackc/pgx/v4&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ButtonPress <span class="keyword">struct</span> &#123;</span><br><span class="line">DeviceID  <span class="type">string</span> <span class="string">`json:&quot;device_id&quot;`</span></span><br><span class="line">Button    <span class="type">int</span>    <span class="string">`json:&quot;button&quot;`</span></span><br><span class="line">Timestamp <span class="type">string</span> <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">dbHost     = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">dbPort     = <span class="number">5432</span></span><br><span class="line">dbUser     = <span class="string">&quot;root&quot;</span></span><br><span class="line">dbPassword = <span class="string">&quot;secret&quot;</span></span><br><span class="line">dbName     = <span class="string">&quot;data&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Set up the database connection</span></span><br><span class="line">connStr := fmt.Sprintf(<span class="string">&quot;postgresql://%s:%s@%s:%d/%s&quot;</span>, dbUser, dbPassword, dbHost, dbPort, dbName)</span><br><span class="line">conn, err := pgx.Connect(context.Background(), connStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to connect to the database: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close(context.Background())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set up the HTTP server</span></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/receive&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != http.MethodPost &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Only POST requests are supported&quot;</span>, http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data ButtonPress</span><br><span class="line"><span class="keyword">if</span> err := json.NewDecoder(r.Body).Decode(&amp;data); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Invalid JSON format&quot;</span>, http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;Received data: %+v&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> data.Button == <span class="number">1</span> &#123;</span><br><span class="line"><span class="comment">// Store the data in the database</span></span><br><span class="line">query := <span class="string">&quot;INSERT INTO button_presses (device_id, button, timestamp) VALUES ($1, $2, $3)&quot;</span></span><br><span class="line">_, err := conn.Exec(context.Background(), query, data.DeviceID, data.Button, data.Timestamp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, <span class="string">&quot;Failed to store data in the database&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">&quot;Data successfully stored in the database&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;Data received and processed&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;Starting server on 192.168.111.1:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;192.168.111.1:8080&quot;</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Server failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是简单的实现</p><p>单片机端代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266HTTPClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;Your_SSID&quot;</span>;          <span class="comment">// Wi-Fi 名称</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;Your_PASSWORD&quot;</span>;  <span class="comment">// Wi-Fi 密码</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* serverUrl = <span class="string">&quot;http://8.222.186.212:8080/send&quot;</span>;  <span class="comment">// 后端服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>); <span class="comment">// 初始化串口</span></span><br><span class="line">  WiFi.begin(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接到 Wi-Fi</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Connecting to Wi-Fi&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.println(<span class="string">&quot;\nConnected to Wi-Fi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (WiFi.status() == WL_CONNECTED) &#123;</span><br><span class="line">    HTTPClient http;</span><br><span class="line">    http.begin(serverUrl);   <span class="comment">// 设置服务器 URL</span></span><br><span class="line">    http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>); <span class="comment">// 设置请求头</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 示例 JSON 数据</span></span><br><span class="line">    String jsonData = <span class="string">&quot;&#123;\&quot;sensor\&quot;: \&quot;temperature\&quot;, \&quot;value\&quot;: 25.5&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// POST 请求</span></span><br><span class="line">    <span class="type">int</span> httpResponseCode = http.POST(jsonData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查响应状态</span></span><br><span class="line">    <span class="keyword">if</span> (httpResponseCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      String response = http.getString();</span><br><span class="line">      Serial.println(<span class="string">&quot;Response: &quot;</span> + response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.println(<span class="string">&quot;Error on sending POST: &quot;</span> + String(httpResponseCode));</span><br><span class="line">    &#125;</span><br><span class="line">    http.end(); <span class="comment">// 关闭连接</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;Wi-Fi not connected&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  delay(<span class="number">5000</span>); <span class="comment">// 每 5 秒发送一次数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>HTTP就是那么的神奇</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的实现</title>
      <link href="/archives/data_structure.html"/>
      <url>/archives/data_structure.html</url>
      
        <content type="html"><![CDATA[<h2 id="双链表的实现"><a href="#双链表的实现" class="headerlink" title="双链表的实现"></a>双链表的实现</h2><h3 id="基于go语言实现"><a href="#基于go语言实现" class="headerlink" title="基于go语言实现"></a>基于go语言实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">// Node 定义双链表节点</span><br><span class="line">type Node struct &#123;</span><br><span class="line">    data  interface&#123;&#125;</span><br><span class="line">    prev  *Node</span><br><span class="line">    next  *Node</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// DoublyLinkedList 定义双链表</span><br><span class="line">type DoublyLinkedList struct &#123;</span><br><span class="line">    head *Node</span><br><span class="line">    tail *Node</span><br><span class="line">    size int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertTail 向链表尾部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertTail(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail.next = newNode</span><br><span class="line">        newNode.prev = dll.tail</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// InsertHead 向链表头部插入节点</span><br><span class="line">func (dll *DoublyLinkedList) InsertHead(data interface&#123;&#125;) &#123;</span><br><span class="line">    newNode := &amp;Node&#123;data: data&#125;</span><br><span class="line">    if dll.size == 0 &#123;</span><br><span class="line">        dll.head = newNode</span><br><span class="line">        dll.tail = newNode</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        newNode.next = dll.head</span><br><span class="line">        dll.head.prev = newNode</span><br><span class="line">        dll.head = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    dll.size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Remove 删除节点</span><br><span class="line">func (dll *DoublyLinkedList) Remove(node *Node) &#123;</span><br><span class="line">    if node.prev != nil &#123;</span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.head = node.next</span><br><span class="line">    &#125;</span><br><span class="line">    if node.next != nil &#123;</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        dll.tail = node.prev</span><br><span class="line">    &#125;</span><br><span class="line">    node.prev = nil</span><br><span class="line">    node.next = nil</span><br><span class="line">    dll.size--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Display 打印双链表</span><br><span class="line">func (dll *DoublyLinkedList) Display() &#123;</span><br><span class="line">    curr := dll.head</span><br><span class="line">    for curr != nil &#123;</span><br><span class="line">        fmt.Print(curr.data, &quot; &quot;)</span><br><span class="line">        curr = curr.next</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    dll := DoublyLinkedList&#123;&#125;</span><br><span class="line">    dll.InsertTail(1)</span><br><span class="line">    dll.InsertTail(2)</span><br><span class="line">    dll.InsertHead(0)</span><br><span class="line">    dll.Display() // 应该输出：0 1 2</span><br><span class="line"></span><br><span class="line">    // 删除节点</span><br><span class="line">    headNode := dll.head</span><br><span class="line">    dll.Remove(headNode)</span><br><span class="line">    dll.Display() // 应该输出：1 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于c语言实现双链表"><a href="#基于c语言实现双链表" class="headerlink" title="基于c语言实现双链表"></a>基于c语言实现双链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">// 定义双链表节点结构</span><br><span class="line">typedef struct Node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct Node* prev;</span><br><span class="line">    struct Node* next;</span><br><span class="line">&#125; Node;</span><br><span class="line">// 创建一个新节点</span><br><span class="line">Node* createNode(int data) &#123;</span><br><span class="line">    Node* newNode = (Node*)malloc(sizeof(Node));</span><br><span class="line">    if (newNode == NULL) &#123;</span><br><span class="line">        printf(&quot;内存分配失败&quot;);</span><br><span class="line">        exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;prev = NULL;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line">    return newNode;</span><br><span class="line">&#125;</span><br><span class="line">// 在双链表前插入节点</span><br><span class="line">void insertFront(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    newNode-&gt;next = *head;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    *head = newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在双链表后插入节点</span><br><span class="line">void insertRear(Node** head, int data) &#123;</span><br><span class="line">    Node* newNode = createNode(data);</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        *head = newNode;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* last = *head;</span><br><span class="line">    while (last-&gt;next != NULL) &#123;</span><br><span class="line">        last = last-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    last-&gt;next = newNode;</span><br><span class="line">    newNode-&gt;prev = last;</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表前的节点</span><br><span class="line">void deleteFront(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = *head;</span><br><span class="line">    *head = (*head)-&gt;next;</span><br><span class="line">    if (*head != NULL) &#123;</span><br><span class="line">        (*head)-&gt;prev = NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 删除双链表后的节点</span><br><span class="line">void deleteRear(Node** head) &#123;</span><br><span class="line">    if (*head == NULL) &#123;</span><br><span class="line">        printf(&quot;链表为空，无法删除&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* secondLast = *head;</span><br><span class="line">    while (secondLast-&gt;next-&gt;next != NULL) &#123;</span><br><span class="line">        secondLast = secondLast-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node* temp = secondLast-&gt;next;</span><br><span class="line">    secondLast-&gt;next = NULL;</span><br><span class="line">    free(temp);</span><br><span class="line">&#125;</span><br><span class="line">// 打印双链表</span><br><span class="line">void printList(Node* node) &#123;</span><br><span class="line">    while (node != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Node* head = NULL;</span><br><span class="line"></span><br><span class="line">    insertFront(&amp;head, 10);</span><br><span class="line">    insertFront(&amp;head, 20);</span><br><span class="line">    insertRear(&amp;head, 30);</span><br><span class="line">    insertRear(&amp;head, 40);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：20 10 30 40</span><br><span class="line"></span><br><span class="line">    deleteFront(&amp;head);</span><br><span class="line">    deleteRear(&amp;head);</span><br><span class="line"></span><br><span class="line">    printList(head);  // 输出：10 30</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>区别：</p><p>c语言的双链表 我们要清楚 改变了头节点 所以要传入二级指针 才能正确的记录到头指针的变化</p><p>而Go语言，因为 Go 中的切片、映射和通道等是引用类型，它们在函数参数传递时本身就是按引用传递的，不需要通过指针的指针（二级指针）来实现修改。这实际上是 Go 语言的一个特性：切片、映射和通道在函数间传递时，共享底层数据结构，因此不需要额外的二级指针。</p><h2 id="栈的c语言实现"><a href="#栈的c语言实现" class="headerlink" title="栈的c语言实现"></a>栈的c语言实现</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct Stack &#123;</span><br><span class="line">    int data[10];</span><br><span class="line">    int top;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack* stack) &#123;</span><br><span class="line">    stack-&gt;top = -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsFull(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == 9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* stack) &#123;</span><br><span class="line">    return stack-&gt;top == -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool push(Stack* stack, int data) &#123;</span><br><span class="line">    if (IsFull(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经满了不能执行入栈操作\n&quot;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    stack-&gt;data[++stack-&gt;top] = data;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int pop(Stack* stack) &#123;</span><br><span class="line">    if (IsEmpty(stack)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;  </span><br><span class="line">    &#125;</span><br><span class="line">    return stack-&gt;data[stack-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* stack) &#123;</span><br><span class="line">    printf(&quot;栈中元素：&quot;);</span><br><span class="line">    for (int i = stack-&gt;top; i &gt;= 0 ; i--) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, stack-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line"></span><br><span class="line">    push(&amp;stack, 1);</span><br><span class="line">    push(&amp;stack, 2);</span><br><span class="line">    push(&amp;stack, 3);</span><br><span class="line">    push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);</span><br><span class="line"></span><br><span class="line">    //pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">    pop(&amp;stack);</span><br><span class="line">   // pop(&amp;stack);</span><br><span class="line"></span><br><span class="line">    Println(&amp;stack);  </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列c语言实现"><a href="#队列c语言实现" class="headerlink" title="队列c语言实现"></a>队列c语言实现</h2><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdbool.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct stack &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct stack* next;</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">void InitStack(Stack** top) &#123;</span><br><span class="line">    *top = NULL; // 初始化为空链表，头指针为NULL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool IsEmpty(Stack* top) &#123;</span><br><span class="line">    return top == NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack* CreateNode(int data) &#123;</span><br><span class="line">    Stack* node = (Stack*)malloc(sizeof(Stack));</span><br><span class="line">    if (node == NULL) &#123;</span><br><span class="line">        printf(&quot;分配空间出现错误&quot;);</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack** top, int data) &#123;</span><br><span class="line">    Stack* newnode = CreateNode(data);</span><br><span class="line">    if (newnode == NULL) </span><br><span class="line">        return;</span><br><span class="line">    newnode-&gt;next = *top;</span><br><span class="line">    *top = newnode; // 更新头指针指向新节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Pop(Stack** top) &#123;</span><br><span class="line">    if (IsEmpty(*top)) &#123;</span><br><span class="line">        printf(&quot;栈已经空了不能出栈\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    Stack* temp = *top;</span><br><span class="line">    int data = temp-&gt;data;</span><br><span class="line">    *top = temp-&gt;next; // 更新头指针指向下一个节点</span><br><span class="line">    free(temp);</span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Println(Stack* top) &#123;</span><br><span class="line">    Stack* temp = top;</span><br><span class="line">    while (temp != NULL) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, temp-&gt;data);</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    Stack* stack;</span><br><span class="line">    InitStack(&amp;stack);</span><br><span class="line">    Push(&amp;stack, 1);</span><br><span class="line">    Push(&amp;stack, 2);</span><br><span class="line">    Push(&amp;stack, 3);</span><br><span class="line">    Push(&amp;stack, 4);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line">    printf(&quot;出栈: %d\n&quot;, Pop(&amp;stack));</span><br><span class="line"></span><br><span class="line">    Println(stack);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表c简单实现"><a href="#哈希表c简单实现" class="headerlink" title="哈希表c简单实现"></a>哈希表c简单实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define NUM 5</span><br><span class="line"></span><br><span class="line">typedef struct HashList &#123;</span><br><span class="line">    int num;</span><br><span class="line">    char data[NUM]; // 修改为字符数组</span><br><span class="line">&#125; HashList;</span><br><span class="line"></span><br><span class="line">HashList* initList() &#123;</span><br><span class="line">    HashList* list = (HashList*)malloc(sizeof(HashList));</span><br><span class="line">    list-&gt;num = 0;</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        list-&gt;data[i] = 0; // 初始化所有元素为0</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ASCII码计算自动计算</span><br><span class="line">int hash(int data) &#123;</span><br><span class="line">    return data % NUM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void put(HashList* list, char data) &#123;</span><br><span class="line">    int index = hash(data);</span><br><span class="line">    printf(&quot;index = %d\n&quot;, index);</span><br><span class="line">    // 发生冲突</span><br><span class="line">    while (list-&gt;data[index] != 0) &#123; // 确保这个位置已经被占用</span><br><span class="line">        int count = 1; </span><br><span class="line">        index = hash(index + 1); // 线性查找</span><br><span class="line">        count++;</span><br><span class="line">        printf(&quot;index = %d\n&quot;, index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    list-&gt;data[index] = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    HashList* list = initList();</span><br><span class="line">    put(list, &#x27;A&#x27;);</span><br><span class="line">    put(list, &#x27;F&#x27;);</span><br><span class="line">    for (int i = 0; i &lt; NUM; i++) &#123;</span><br><span class="line">        if (list-&gt;data[i] != 0) &#123; // 只打印已经使用的槽位</span><br><span class="line">            printf(&quot;%c\n&quot;, list-&gt;data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借鉴： <a href="https://github.com/hunterhug/goa.c/blob/master/algorithm/dict.md">https://github.com/hunterhug/goa.c/blob/master/algorithm/dict.md</a></p><h5 id="go实现可变数组"><a href="#go实现可变数组" class="headerlink" title="go实现可变数组"></a>go实现可变数组</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array 可变长数组</span></span><br><span class="line"><span class="keyword">type</span> Array <span class="keyword">struct</span> &#123;</span><br><span class="line">array []<span class="type">int</span>      <span class="comment">// 固定大小的数组，用满容量和满大小的切片来代替</span></span><br><span class="line"><span class="built_in">len</span>   <span class="type">int</span>        <span class="comment">// 真正长度</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="type">int</span>        <span class="comment">// 容量</span></span><br><span class="line">lock  sync.Mutex <span class="comment">// 为了并发安全使用的锁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make 新建一个可变长数组</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Make</span><span class="params">(<span class="built_in">len</span>, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> *Array &#123;</span><br><span class="line">s := <span class="built_in">new</span>(Array)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;len large than cap&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把切片当数组用</span></span><br><span class="line">array := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">cap</span>, <span class="built_in">cap</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元数据</span></span><br><span class="line">s.array = array</span><br><span class="line">s.<span class="built_in">cap</span> = <span class="built_in">cap</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Append 增加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Append(element <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 并发锁</span></span><br><span class="line">a.lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> a.lock.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大小等于容量，表示没多余位置了</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">len</span> == a.<span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="comment">// 没容量，数组要扩容，扩容到两倍</span></span><br><span class="line">newCap := <span class="number">2</span> * a.<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果之前的容量为0，那么新容量为1</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">cap</span> == <span class="number">0</span> &#123;</span><br><span class="line">newCap = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newArray := <span class="built_in">make</span>([]<span class="type">int</span>, newCap, newCap)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把老数组的数据移动到新数组</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a.array &#123;</span><br><span class="line">newArray[k] = v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换数组</span></span><br><span class="line">a.array = newArray</span><br><span class="line">a.<span class="built_in">cap</span> = newCap</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把元素放在数组里</span></span><br><span class="line">a.array[a.<span class="built_in">len</span>] = element</span><br><span class="line"><span class="comment">// 真实长度+1</span></span><br><span class="line">a.<span class="built_in">len</span> = a.<span class="built_in">len</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AppendMany 增加多个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> AppendMany(element ...<span class="type">int</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> element &#123;</span><br><span class="line">a.Append(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get 获取某个下标的元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 越界了</span></span><br><span class="line"><span class="keyword">if</span> a.<span class="built_in">len</span> == <span class="number">0</span> || index &gt;= a.<span class="built_in">len</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;index over len&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.array[index]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len 返回真实长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cap 返回容量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Array)</span></span> Cap() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">cap</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print 辅助打印</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(array *Array)</span></span> (result <span class="type">string</span>) &#123;</span><br><span class="line">result = <span class="string">&quot;[&quot;</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; array.Len(); i++ &#123;</span><br><span class="line"><span class="comment">// 第一个元素</span></span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">result = fmt.Sprintf(<span class="string">&quot;%s%d&quot;</span>, result, array.Get(i))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result = fmt.Sprintf(<span class="string">&quot;%s %d&quot;</span>, result, array.Get(i))</span><br><span class="line">&#125;</span><br><span class="line">result = result + <span class="string">&quot;]&quot;</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 创建一个容量为3的动态数组</span></span><br><span class="line">a := Make(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line">a.Append(<span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line">a.Append(<span class="number">9</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加多个元素</span></span><br><span class="line">a.AppendMany(<span class="number">8</span>, <span class="number">7</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;cap&quot;</span>, a.Cap(), <span class="string">&quot;len&quot;</span>, a.Len(), <span class="string">&quot;array:&quot;</span>, Print(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合结构体</span></span><br><span class="line"><span class="keyword">type</span> Set <span class="keyword">struct</span> &#123;</span><br><span class="line">m            <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125; <span class="comment">// 用字典来实现，因为字段键不能重复</span></span><br><span class="line"><span class="built_in">len</span>          <span class="type">int</span>              <span class="comment">// 集合的大小</span></span><br><span class="line">sync.RWMutex                  <span class="comment">// 锁，实现并发安全</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个空集合</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSet</span><span class="params">(<span class="built_in">cap</span> <span class="type">int64</span>)</span></span> *Set &#123;</span><br><span class="line">temp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;, <span class="built_in">cap</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;Set&#123;</span><br><span class="line">m: temp,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Add(item <span class="type">int</span>) &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line">s.m[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 实际往字典添加这个键</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="built_in">len</span>(s.m)       <span class="comment">// 重新计算元素数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Remove(item <span class="type">int</span>) &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合没元素直接返回</span></span><br><span class="line"><span class="keyword">if</span> s.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(s.m, item) <span class="comment">// 实际从字典删除这个键</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="built_in">len</span>(s.m)  <span class="comment">// 重新计算元素数量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看是否存在元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Has(item <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line">s.RLock()</span><br><span class="line"><span class="keyword">defer</span> s.RUnlock()</span><br><span class="line">_, ok := s.m[item]</span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看集合大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Len() <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">len</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除集合所有元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> Clear() &#123;</span><br><span class="line">s.Lock()</span><br><span class="line"><span class="keyword">defer</span> s.Unlock()</span><br><span class="line">s.m = <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125; <span class="comment">// 字典重新赋值</span></span><br><span class="line">s.<span class="built_in">len</span> = <span class="number">0</span>                <span class="comment">// 大小归零</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合是够为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s.Len() == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将集合转化为列表</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Set)</span></span> List() []<span class="type">int</span> &#123;</span><br><span class="line">s.RLock()</span><br><span class="line"><span class="keyword">defer</span> s.RUnlock()</span><br><span class="line">list := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, s.<span class="built_in">len</span>)</span><br><span class="line"><span class="keyword">for</span> item := <span class="keyword">range</span> s.m &#123;</span><br><span class="line">list = <span class="built_in">append</span>(list, item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么使用空结构体</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">other</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">b := <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> a == b &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;right:%p\n&quot;</span>, &amp;a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(unsafe.Sizeof(a))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//other()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个容量为5的不可重复集合</span></span><br><span class="line">s := NewSet(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">2</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;list of all items&quot;</span>, s.List())</span><br><span class="line"></span><br><span class="line">s.Clear()</span><br><span class="line"><span class="keyword">if</span> s.IsEmpty() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;empty&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Add(<span class="number">1</span>)</span><br><span class="line">s.Add(<span class="number">2</span>)</span><br><span class="line">s.Add(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.Has(<span class="number">2</span>) &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;2 does exist&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s.Remove(<span class="number">2</span>)</span><br><span class="line">s.Remove(<span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;list of all items&quot;</span>, s.List())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加并发锁，实现线程安全，然后往结构体<br>s *Set 里面的内置 map 添加该元素：item，元素作为字典的键，会自动去重。同时，集合大小重新生成。</p><p>s.m[item] &#x3D; struct{}{} 这行代码向 m 这个映射中添加一个 item 作为键，并将其值设置为 struct{}{}。<br>由于 m 是 map[int]struct{} 类型的，它的键是 int 类型，而值是空结构体 struct{} 类型，<br>它们不占用任何空间。<strong>这一步实际上是往字典添加一个键，而不需要关心值。</strong></p><h5 id="最大堆的建立"><a href="#最大堆的建立" class="headerlink" title="最大堆的建立"></a>最大堆的建立</h5><p>堆排序中的（递归）是制造最大堆的关键 其实也可以不用最大堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> length,<span class="type">int</span> i)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">buildheap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">prinarry</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">prinarry</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">temp=*a;</span><br><span class="line">* a = *b;</span><br><span class="line">* b = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重点在这里如何交换使得成为最大堆</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> largest = i;</span><br><span class="line"><span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left&lt;length &amp;&amp; a[left]&gt;a[largest])</span><br><span class="line">&#123;</span><br><span class="line">largest = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (right&lt;length &amp;&amp; a[right]&gt;a[largest])</span><br><span class="line">&#123;</span><br><span class="line">largest = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (largest != i)</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;a[i], &amp;a[largest]);<span class="comment">//必须加&amp;</span></span><br><span class="line">heapsort(a, length, largest);<span class="comment">//这步递归是关键能确保整体保证是堆的性质</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">buildheap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> length)</span><span class="comment">//建立堆</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = (length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(i=(length<span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">heapsort(a, length, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> arry[<span class="number">6</span>] = &#123; <span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="type">int</span> length = <span class="keyword">sizeof</span>(arry) / <span class="keyword">sizeof</span>(arry[<span class="number">0</span>]);</span><br><span class="line">buildheap(arry, length);</span><br><span class="line">prinarry(arry, length);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像不对劲 如果你期望的是排序后的数组（比如 120 100 90 50），你的代码缺少以下步骤：</p><p>交换堆顶和末尾元素：将最大堆的根节点（最大值）移动到数组末尾。<br>重新堆化剩余部分：对剩余的数组部分（即去掉最后一个元素的堆）重新堆化。<br>重复步骤：直到数组完全排序。</p><p>你的代码本身并没有严重的问题，但它仅仅完成了“构建最大堆”的功能，没有实现堆排序，因此输出的数组只是一个堆的结构（满足最大堆性质，但并非有序数组）。<br>如果你预期的结果是排序后的数组，那么确实还需要补充代码来完成堆排序的逻辑。</p><p>啊我靠</p><h5 id="go实现最大堆"><a href="#go实现最大堆" class="headerlink" title="go实现最大堆"></a>go实现最大堆</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个最大堆，一棵完全二叉树</span></span><br><span class="line"><span class="comment">// 最大堆要求节点元素都不小于其左右孩子</span></span><br><span class="line"><span class="keyword">type</span> Heap <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 堆的大小</span></span><br><span class="line">Size <span class="type">int</span></span><br><span class="line"><span class="comment">// 使用内部的数组来模拟树</span></span><br><span class="line"><span class="comment">// 一个节点下标为 i，那么父亲节点的下标为 (i-1)/2</span></span><br><span class="line"><span class="comment">// 一个节点下标为 i，那么左儿子的下标为 2i+1，右儿子下标为 2i+2</span></span><br><span class="line">Array []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个堆</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHeap</span><span class="params">(array []<span class="type">int</span>)</span></span> *Heap &#123;</span><br><span class="line">h := <span class="built_in">new</span>(Heap)</span><br><span class="line">h.Array = array</span><br><span class="line"><span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大堆插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span></span> Push(x <span class="type">int</span>) &#123;</span><br><span class="line"><span class="comment">// 堆没有元素时，使元素成为顶点后退出</span></span><br><span class="line"><span class="keyword">if</span> h.Size == <span class="number">0</span> &#123;</span><br><span class="line">h.Array[<span class="number">0</span>] = x</span><br><span class="line">h.Size++</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i 是要插入节点的下标</span></span><br><span class="line">i := h.Size</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果下标存在</span></span><br><span class="line"><span class="comment">// 将小的值 x 一直上浮</span></span><br><span class="line"><span class="keyword">for</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// parent为该元素父亲节点的下标</span></span><br><span class="line">parent := (i - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果插入的值小于等于父亲节点，那么可以直接退出循环，因为父亲仍然是最大的</span></span><br><span class="line"><span class="keyword">if</span> x &lt;= h.Array[parent] &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 否则将父亲节点与该节点互换，然后向上翻转，将最大的元素一直往上推</span></span><br><span class="line">h.Array[i] = h.Array[parent]</span><br><span class="line">i = parent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将该值 x 放在不会再翻转的位置</span></span><br><span class="line">h.Array[i] = x</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆数量加一</span></span><br><span class="line">h.Size++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大堆移除根节点元素，也就是最大的元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Heap)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line"><span class="comment">// 没有元素，返回-1</span></span><br><span class="line"><span class="keyword">if</span> h.Size == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出根节点</span></span><br><span class="line">ret := h.Array[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为根节点要被删除了，将最后一个节点放到根节点的位置上</span></span><br><span class="line">h.Size--</span><br><span class="line">x := h.Array[h.Size]  <span class="comment">// 将最后一个元素的值先拿出来</span></span><br><span class="line">h.Array[h.Size] = ret <span class="comment">// 将移除的元素放在最后一个元素的位置上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对根节点进行向下翻转，小的值 x 一直下沉，维持最大堆的特征</span></span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// a，b为下标 i 左右两个子节点的下标</span></span><br><span class="line">a := <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line">b := <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 左儿子下标超出了，表示没有左子树，那么右子树也没有，直接返回</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= h.Size &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有右子树，拿到两个子节点中较大节点的下标</span></span><br><span class="line"><span class="keyword">if</span> b &lt; h.Size &amp;&amp; h.Array[b] &gt; h.Array[a] &#123;</span><br><span class="line">a = b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父亲节点的值都大于或等于两个儿子较大的那个，不需要向下继续翻转了，返回</span></span><br><span class="line"><span class="keyword">if</span> x &gt;= h.Array[a] &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将较大的儿子与父亲交换，维持这个最大堆的特征</span></span><br><span class="line">h.Array[i] = h.Array[a]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续往下操作</span></span><br><span class="line">i = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将最后一个元素的值 x 放在不会再翻转的位置</span></span><br><span class="line">h.Array[i] = x</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码太帅了 没有使用递归 用循环 构造了最大堆！ 学习思想</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>git使用总结</title>
      <link href="/archives/git.html"/>
      <url>/archives/git.html</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>1.git clone &#x2F;&#x2F; 到本地<br>2.git checkout -b xxx 切换至新分支xxx<br>（相当于复制了remote的仓库到本地的xxx分支上<br>3.修改或者添加本地代码（部署在硬盘的源文件上）<br>4.git diff 查看自己对代码做出的改变<br>5.git add 上传更新后的代码至暂存区<br>6.git commit 可以将暂存区里更新后的代码更新到本地git<br>7.git push origin xxx 将本地的xxxgit分支上传至github上的git</p><hr><p>（如果在写自己的代码过程中发现远端GitHub上代码出现改变）<br>1.git checkout main 切换回main分支<br>2.git pull origin master(main) 将远端修改过的代码再更新到本地<br>3.git checkout xxx 回到xxx分支<br>4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容<br>（中途可能会出现，rebase conflict —–》手动选择保留哪段代码）<br>5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上<br>（-f —》强行）<br>6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit</p><hr><p>远端完成更新后<br>1.git branch -d xxx 删除本地的git分支<br>2.git pull origin master 再把远端的最新代码拉至本地</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>github参与开源应该做什么</title>
      <link href="/archives/github.html"/>
      <url>/archives/github.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一次参与开源项目应该做些什么"><a href="#第一次参与开源项目应该做些什么" class="headerlink" title="第一次参与开源项目应该做些什么"></a>第一次参与开源项目应该做些什么</h1><p>借鉴Moment老哥文档</p><p><a href="https://juejin.cn/post/7354233858063925267">https://juejin.cn/post/7354233858063925267</a></p><h4 id="第一步fork"><a href="#第一步fork" class="headerlink" title="第一步fork"></a>第一步fork</h4><p>fork到自己的仓库下 且选择fork所有分支 这样就可以有修改项目的权限<br>通过Pull Request方式 commits合到上游项目</p><h4 id="第二步克隆项目"><a href="#第二步克隆项目" class="headerlink" title="第二步克隆项目"></a>第二步克隆项目</h4><p>git clone …</p><h4 id="第三步更新本地分支代码"><a href="#第三步更新本地分支代码" class="headerlink" title="第三步更新本地分支代码"></a>第三步更新本地分支代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;原始仓库的URL&gt;</span><br><span class="line">git fetch upstream</span><br><span class="line">git checkout main</span><br><span class="line">git rebase upstream/main</span><br></pre></td></tr></table></figure><p>等等指令在此省略 详细的等到具体运用中再做增加</p><p>创建新的分支并在新的分支上作出修改 回到fork的仓库中找到pullRequest<br>NewRequest并把自己更改的分支上传到作者的仓库也就完成了一次Request</p><h4 id="写入你想更改的地方"><a href="#写入你想更改的地方" class="headerlink" title="写入你想更改的地方"></a>写入你想更改的地方</h4><p>提交你的更改 </p><h4 id="开一个PR"><a href="#开一个PR" class="headerlink" title="开一个PR"></a>开一个PR</h4><p>在完成 push 操作后，我们打开 GitHub，可以看到一个黄色的提示框，告诉我们可以开一个 Pull Request 了</p><p>参考：</p><p><a href="https://link.juejin.cn/?target=https://github.com/xun082/create-neat/pull/83">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fxun082%2Fcreate-neat%2Fpull%2F83</a><br>一定要参与一次实践，才懂得如何去做。只有错过了，才能保证下一次的完美运行。</p><hr><p>最后希望自己早入加入开源大家庭中，加油！ </p><ul><li><pre><code>                     2024 11.5日</code></pre></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>发布博客出现的问题</title>
      <link href="/archives/github_actions.html"/>
      <url>/archives/github_actions.html</url>
      
        <content type="html"><![CDATA[<p>每一次用push推送到githubpage都会出现构建部署错误 我问了一下ai原因 这才有点明白到底是为什么</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>为什么会有这种差异？<br>GitHub Pages 和 本地环境的差异：</p><p>在本地执行 hexo d 时，你的本地环境会根据 package.json 中的依赖来安装所有的主题和插件，确保所有必要的资源都存在。<br>但是 GitHub Pages 仅仅依赖仓库中已经推送的文件（通常是 public&#x2F; 文件夹和 ._config.yml），它不会自动运行 npm、yarn 或 pnpm 来安装依赖。换句话说，GitHub Pages 并不会在部署过程中安装缺少的主题或插件。<br>依赖没有正确推送：</p><p>你在本地运行 hexo d 时，可能已经正确地安装了 butterfly 主题，并且该主题存在于本地的 _config.yml 中和 node_modules 文件夹中。<br>然而，在推送到 GitHub 上时，你没有将 node_modules 中的 butterfly 主题或相关配置文件推送到 GitHub 仓库。GitHub Pages 需要能够访问这些主题文件，而它不会在部署过程中下载和安装这些依赖。<br>GitHub Pages 配置问题：</p><p>如果你直接使用 GitHub Pages 作为部署平台，GitHub 并不会自动安装你的 Hexo 依赖，因此它不能像本地环境一样找到 butterfly 主题。<br>GitHub Pages 需要使用一个可以通过静态文件夹来部署的版本，而 Hexo 本地运行时通常会将主题内容放在 node_modules 中，这些内容并不会自动推送到 GitHub，除非你特别将它们包含在仓库中。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用github-actions<br>并且在google查找到的方法添加 .nojekyll文件 让github站点不适用jekyll</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Deploy</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main  # 监听主分支的推送</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout repository</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: Setup Node.js</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;16&#x27;</span><br><span class="line"></span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm install</span><br><span class="line"></span><br><span class="line">      - name: Generate and Deploy</span><br><span class="line">        run: |</span><br><span class="line">          hexo generate</span><br><span class="line">          hexo deploy</span><br><span class="line">        env:</span><br><span class="line">          HEXO_DEPLOY_PATH: $&#123;&#123; secrets.HEXO_DEPLOY_PATH &#125;&#125;  # 设置部署路径</span><br></pre></td></tr></table></figure><p>多看源码 基础真的很重要 多看官方文档能解决很多问题</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>北京之旅</title>
      <link href="/archives/hello-world.html"/>
      <url>/archives/hello-world.html</url>
      
        <content type="html"><![CDATA[<h2 id="开源社"><a href="#开源社" class="headerlink" title="开源社"></a>开源社</h2><p>在偶然一次发现中 开源社举办了第九届中国开源年会，我很是激动，心中迅速萌发了去北京参加的冲动并和小伙伴赵冰<br>决定这周五来一次说走就走的旅行~~~</p><h2 id="到达北京"><a href="#到达北京" class="headerlink" title="到达北京"></a>到达北京</h2><p>在周六的早上到达会场 扫了入场的码 领到了活动给的一些礼品 7点多我俩就到达了会场，刚开始觉得平平无奇，后来直到大会开始，陆陆续续的大家都来到了会场，开源社的<br>老哥，老姐们开始了自己的演讲，我发现这真的不是一个普通大会，很多人报着开源的理念 一直维持着开源社，让开源社越来越大<br>虽然是第一次参加，但是我对于这种氛围是非常的喜欢，各位有着自己想法的人都在开源社散发光辉，有为抗癌人士专门发布app的<br>小胰宝等其他的产品，这令我深受触动，把科技真真正正的融合到了生活当中，使人们都能享受科技带来的便捷！大会中的每一个人的演讲都令我感到激动！但是对我印象的最深刻的就是<strong>yihong0618</strong>这个id，伊洪老师的演讲令我眼前一亮心里一跳哈哈哈哈<br>简直太爽啦！！！</p><h2 id="yihong0618"><a href="#yihong0618" class="headerlink" title="yihong0618"></a>yihong0618</h2><p>请大家自己去看伊洪老师的github，你真的能从中学到很多，在火车上我一直再看伊洪老师的github<br>每一件事是写的那么的真诚，有很多我也感同身受，生活的迷茫原来真的不是自己才有，面临各种压力，各种抉择！做好自己。<br>老师的仓库里也有非常多的实用的产品大家可以自己去看！！</p><p>[github] <a href="https://github.com/yihong0618">https://github.com/yihong0618</a></p><p>在伊洪老师的演讲中，令我觉得钦佩的是，每一天的记录自己，我太喜欢这种感觉了，发布到github上，我也便想向这么做<br>在4日赶回来我便从网上学习搭建博客，坚持记录每一天</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次旅程，说走就走，哈哈哈，这才是大学生嘛，遇见了开源社的大家，我希望从今的每一天，慢慢的融入到开源社这个大家庭</p><p>-感谢冰哥陪我这次旅行</p><pre><code>                                                                    2024年11.4日</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>archives</title>
      <link href="/archives/index.html"/>
      <url>/archives/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>一些找工作或实习的渠道</title>
      <link href="/archives/job.html"/>
      <url>/archives/job.html</url>
      
        <content type="html"><![CDATA[<p>Boss直聘</p><p>offershow</p><p>github上查找</p><p>linkedin</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>美化博客</title>
      <link href="/archives/lasting_beauty.html"/>
      <url>/archives/lasting_beauty.html</url>
      
        <content type="html"><![CDATA[<p>使博客看起来更加美观，持续更新中！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>leet-code之旅</title>
      <link href="/archives/leet-code.html"/>
      <url>/archives/leet-code.html</url>
      
        <content type="html"><![CDATA[<h1 id="正式开启刷leet-code"><a href="#正式开启刷leet-code" class="headerlink" title="正式开启刷leet-code"></a>正式开启刷leet-code</h1><h3 id="第225-用两个队列实现栈"><a href="#第225-用两个队列实现栈" class="headerlink" title="第225.用两个队列实现栈"></a>第225.用两个队列实现栈</h3><p>问题：</p><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p><p>实现 MyStack 类：</p><p>void push(int x) 将元素 x 压入栈顶。<br>int pop() 移除并返回栈顶元素。<br>int top() 返回栈顶元素。<br>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</p><h4 id="我的代码："><a href="#我的代码：" class="headerlink" title="我的代码："></a>我的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">type MyStack struct &#123;</span><br><span class="line">    list1 := list.New()</span><br><span class="line">    list2 := list.New()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Push(x)</span><br><span class="line">    MyStack.Pop()</span><br><span class="line">    MyStack.Top()</span><br><span class="line">    MyStack.empty()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">    this.list1.PushBack(x)</span><br><span class="line">    temp := x</span><br><span class="line">    this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">   temp = this.list2.Value</span><br><span class="line">   e = e.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">    temp = this.list2.Value</span><br><span class="line">    return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">    if this.list2.Value == nil</span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Your MyStack object will be instantiated and called as such:</span><br><span class="line"> * obj := Constructor();</span><br><span class="line"> * obj.Push(x);</span><br><span class="line"> * param_2 := obj.Pop();</span><br><span class="line"> * param_3 := obj.Top();</span><br><span class="line"> * param_4 := obj.Empty();</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><h4 id="虚伪的正确的代码："><a href="#虚伪的正确的代码：" class="headerlink" title="虚伪的正确的代码："></a>虚伪的正确的代码：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;container/list&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">list1 *list.List</span><br><span class="line">list2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack &#123;</span><br><span class="line">list1: list.New(),</span><br><span class="line">list2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int)  &#123;</span><br><span class="line">this.list1.PushBack(x)</span><br><span class="line">temp := x</span><br><span class="line">this.list2.PushFront(temp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果stack为空返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front()</span><br><span class="line">this.list2.Remove(temp)</span><br><span class="line">return temp.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.list2.Len() == 0 &#123;</span><br><span class="line">return -1 // 如果栈为空则返回-1或者其他适当的值</span><br><span class="line">&#125;</span><br><span class="line">temp := this.list2.Front().Value(int)</span><br><span class="line">return temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.list2.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Your MyStack object will be instantiated and called as such:</span><br><span class="line">* obj := Constructor();</span><br><span class="line">* obj.Push(x);</span><br><span class="line">* param_2 := obj.Pop();</span><br><span class="line">* param_3 := obj.Top();</span><br><span class="line">* param_4 := obj.Empty();</span><br><span class="line">  */</span><br></pre></td></tr></table></figure><p>使用go语言内置的list包 也就是双向链表的操作<br>运用到了go语言的断言 <code>this.list2.Front().Value.(int)</code></p><p>但是 虽然通过了 但是思路应该是错了哈哈哈哈 ！ 这段代码并没有用到队列的性质而是双链表。。。。并没有遵守题目的规则<br>代码问题：</p><p>而只是使用了两个链表，其中 list2 实际上扮演了“栈”的角色。这样的话，list2 单独一个链表就能实现后进先出，不需要 list1 的辅助。</p><h4 id="真正的正确代码"><a href="#真正的正确代码" class="headerlink" title="真正的正确代码"></a>真正的正确代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;container/list&quot;</span><br><span class="line"></span><br><span class="line">type MyStack struct &#123;</span><br><span class="line">queue1 *list.List</span><br><span class="line">queue2 *list.List</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func Constructor() MyStack &#123;</span><br><span class="line">return MyStack&#123;</span><br><span class="line">queue1: list.New(),</span><br><span class="line">queue2: list.New(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Push(x int) &#123;</span><br><span class="line">this.queue1.PushBack(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Pop() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(top)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Top() int &#123;</span><br><span class="line">if this.queue1.Len() == 0 &#123;</span><br><span class="line">return -1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for this.queue1.Len() &gt; 1 &#123;</span><br><span class="line">front := this.queue1.Front()</span><br><span class="line">this.queue1.Remove(front)</span><br><span class="line">this.queue2.PushBack(front.Value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top := this.queue1.Front()</span><br><span class="line">this.queue2.PushBack(top.Value)</span><br><span class="line"></span><br><span class="line">this.queue1, this.queue2 = this.queue2, this.queue1</span><br><span class="line">return top.Value.(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (this *MyStack) Empty() bool &#123;</span><br><span class="line">return this.queue1.Len() == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="第20题有效括号"><a href="#第20题有效括号" class="headerlink" title="第20题有效括号"></a>第20题有效括号</h3><p>问题：</p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><h4 id="解答过程"><a href="#解答过程" class="headerlink" title="解答过程"></a>解答过程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">    // 创建一个栈来存储左括号</span><br><span class="line">    stack := make([]rune, 0)</span><br><span class="line">    // 括号的对应关系</span><br><span class="line">    pairs := map[rune]rune&#123;</span><br><span class="line">        &#x27;)&#x27;: &#x27;(&#x27;,</span><br><span class="line">        &#x27;&#125;&#x27;: &#x27;&#123;&#x27;,</span><br><span class="line">        &#x27;]&#x27;: &#x27;[&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">    // 遍历字符串s</span><br><span class="line">    for _, char := range s &#123;</span><br><span class="line">        // 如果是右括号</span><br><span class="line">        if _, exists := pairs[char]; exists &#123;</span><br><span class="line">            // 取出栈顶元素，如果栈为空或者不匹配则返回false</span><br><span class="line">            if len(stack) == 0 || stack[len(stack)-1] != pairs[char] &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">            // 否则弹出栈顶元素</span><br><span class="line">            stack = stack[:len(stack)-1]</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 如果是左括号，压入栈中</span><br><span class="line">            stack = append(stack, char)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 如果栈为空，则所有括号正确匹配</span><br><span class="line">    return len(stack) == 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>栈的问题</p><hr><h3 id="字节刷题（队列）相关："><a href="#字节刷题（队列）相关：" class="headerlink" title="字节刷题（队列）相关："></a>字节刷题（队列）相关：</h3><p>问题：</p><p>小R的随机播放顺序<br>问题描述<br>小有一个特殊的随机播放规则。他首先播放歌单中的第一首歌，播放后将其从歌<br>单中移除。如果歌单中还有歌曲，则会将当前第一首歌移到最后一首。这个过程会<br>一直重复，直到歌单中没有任何歌曲。<br>例如，给定歌单[5,3,2,1,4]，真实的播放顺序是[5,2,4,1,3]。<br>保证歌曲中的id两两不同。<br>测试样例<br>样例1：<br>输入：n&#x3D;5,a&#x3D;[5,3,2,1,4]输出：[5,2,4,1,3]<br>样2：<br>输入：n&#x3D;4,a&#x3D;[4,1,3,2]输出：[4,3,1,2]<br>样3：<br>输入：n&#x3D;6,a&#x3D;[1,2,3,4,5,6]输出：[1,3,5,2,6,4]</p><p>看完题之后的思路 ： 就是队列问题 如何操作栈 在文中也就是实现： 先出栈-》再执行出栈入栈-》再出栈 这是目前简单的思路<br>然后搜索Go语言队列的相关操作 用slice实现队列：或者 list实现队列</p><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func solution(n int, a []int) []int &#123;</span><br><span class="line">    result := []int&#123;&#125;  // 用于存储播放顺序</span><br><span class="line"></span><br><span class="line">    for len(a) &gt; 0 &#123;</span><br><span class="line">        // 播放第一首歌并加入到结果中</span><br><span class="line">        result = append(result, a[0])</span><br><span class="line">        // 移除播放的歌曲</span><br><span class="line">        a = a[1:]</span><br><span class="line">        </span><br><span class="line">        // 如果歌单还有剩余，将当前第一首歌移到最后</span><br><span class="line">        if len(a) &gt; 0 &#123;</span><br><span class="line">            a = append(a[1:], a[0])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(5, []int&#123;5, 3, 2, 1, 4&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;5, 2, 4, 1, 3&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(4, []int&#123;4, 1, 3, 2&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;4, 3, 1, 2&#125;))</span><br><span class="line">    fmt.Println(fmt.Sprintf(&quot;%v&quot;, solution(6, []int&#123;1, 2, 3, 4, 5, 6&#125;)) == fmt.Sprintf(&quot;%v&quot;, []int&#123;1, 3, 5, 2, 6, 4&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看到题解我蒙了：我在思考的时候确实想如何实现这个队列并且如何实现添加元素并且删除元素  </p><p>但是 在这道题中，Go 切片的特性其实已经很好地帮你实现了这些操作。切片的 append 和切片操作符 a[1:] 直接完成了队列的“入队”和“出队”需求。只是在简化的问题上，利用 Go 自带的切片操作让解决方案更简洁、易懂。</p><hr><h4 id="12-2-日"><a href="#12-2-日" class="headerlink" title="12.2 日"></a>12.2 日</h4><h5 id="重刷两数之和"><a href="#重刷两数之和" class="headerlink" title="重刷两数之和"></a>重刷两数之和</h5><h6 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    k := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        other := target - v</span><br><span class="line">        <span class="keyword">if</span> _ , ok := <span class="keyword">map</span>[other]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;i, <span class="keyword">map</span>[nums[i]]&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        m[nums[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="更正后："><a href="#更正后：" class="headerlink" title="更正后："></a>更正后：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    k := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        other := target - v</span><br><span class="line">        <span class="keyword">if</span> idx , ok := k[other]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> []<span class="type">int</span>&#123;i, idx&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k[v] = i </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="删除有序数组中的重复项"><a href="#删除有序数组中的重复项" class="headerlink" title="删除有序数组中的重复项"></a>删除有序数组中的重复项</h5><h6 id="错误的代码"><a href="#错误的代码" class="headerlink" title="错误的代码"></a>错误的代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    k := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j:=i; j&lt;<span class="built_in">len</span>(nums); j++&#123;</span><br><span class="line">            <span class="keyword">if</span> nums[i] == nums[j] &#123;</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125; </span><br><span class="line">                k[i] = nums[i]</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目要求：<br>题目需要在原地删除重复项，使用 O(1) 额外空间，返回去重后数组的长度。去重后的元素必须保留在数组的前部，后续位置可以随意。<br>代码中存在的问题：</p><p>额外空间不符合要求：你使用了 k 数组存储去重后的结果，违背了 O(1) 额外空间的限制。<br>逻辑问题：双重循环实际上是在尝试复制和比较元素，但逻辑上没有保证正确的去重。<br>continue 和 break 的混乱：循环控制没有明确目的，导致部分逻辑跳过了关键步骤。<br>返回值错误：你返回的是辅助数组 k 的长度，而不是修改后数组 nums 的有效长度。</p><h6 id="正确解法："><a href="#正确解法：" class="headerlink" title="正确解法："></a>正确解法：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">1</span>; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[k] != nums [i] &#123;</span><br><span class="line">            k++</span><br><span class="line">            nums[k] = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27 移除元素"></a>27 移除元素</h5><h6 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := length; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> val == nums[length] &#123;</span><br><span class="line">            <span class="keyword">var</span> k = <span class="number">0</span></span><br><span class="line">        k = nums[length]</span><br><span class="line">        length ++</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不出意外又是错误的代码<br>k 被赋值：<br>k &#x3D; nums[length]<br>然而，k 在后续的代码中并没有被用于任何地方，它没有被打印、返回、存储或进一步处理。只是简单地在 if 语句内被赋值。</p><p>k 的作用无效： k 是在 if 语句中声明并赋值的，但它没有发挥任何作用。Go 编译器会在编译时检查到这一点，并给出警告，因为声明了一个变量却没有用到。</p><h6 id="正确代码："><a href="#正确代码：" class="headerlink" title="正确代码："></a>正确代码：</h6><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="type">int</span>, val <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums[i] != val &#123;</span><br><span class="line">            nums[length] = nums[i]</span><br><span class="line">            length++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>思路是 把不相等的元素按照顺序放到开头 而我是想覆盖相同的元素 处理不了这个撮箕</p><p>28 找出字符串中的第一个匹配项下标</p><p>题目： </p><p>输入：haystack &#x3D; “sadbutsad”, needle &#x3D; “sad”<br>输出：0<br>解释：”sad” 在下标 0 和 6 处匹配。<br>第一个匹配项的下标是 0 ，所以返回 0 。<br>示例 2：</p><p>输入：haystack &#x3D; “leetcode”, needle &#x3D; “leeto”<br>输出：-1<br>解释：”leeto” 没有在 “leetcode” 中出现，所以返回 -1 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;   </span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(haystack); i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j&lt;<span class="built_in">len</span>(needle); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> needle[j] == haystack[i]&#123;</span><br><span class="line">                num++</span><br><span class="line">                i++</span><br><span class="line">                 <span class="keyword">if</span> num == <span class="built_in">len</span>(needle)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-<span class="built_in">len</span>(needle)</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">       &#125;   </span><br><span class="line"> &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只通过了一个用例， 你要反思了 只通过一个用例，说明了你的想法是错的</p><p>暴力解法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack <span class="type">string</span>, needle <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(needle) == <span class="number">0</span> &#123; <span class="comment">// 空字符串直接返回 0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="built_in">len</span>(haystack)-<span class="built_in">len</span>(needle); i++ &#123;</span><br><span class="line">        j := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j &lt; <span class="built_in">len</span>(needle) &amp;&amp; haystack[i+j] == needle[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == <span class="built_in">len</span>(needle) &#123;</span><br><span class="line">            <span class="keyword">return</span> i <span class="comment">// 完全匹配，返回起始索引</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span> <span class="comment">// 未找到匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多多练习， haystack[i+j] &#x3D;&#x3D; needle[j] 这里是很巧妙的地方，同时比对了两个字符串， i的位置就是起始位置， 如果整个字符串都在内部匹配完成了，说明i就是起始位置<br>记录需要对比的字符串长度</p><hr><h5 id="58题：-最后一个单词的长度"><a href="#58题：-最后一个单词的长度" class="headerlink" title="58题： 最后一个单词的长度"></a>58题： 最后一个单词的长度</h5><p>示例 1：</p><p>输入：s &#x3D; “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为 5。<br>示例 2：</p><p>输入：s &#x3D; “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为 4。<br>示例 3：</p><p>输入：s &#x3D; “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为 6 的“joyboy”。</p><p>我的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length <span class="type">int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s)<span class="number">-1</span>; i&gt;<span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> s[i] != <span class="string">&#x27; &#x27;</span>&#123;</span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是错了 但是错的不太离谱，简单的呗GPT加了一点就过了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123; <span class="comment">// 修正条件为 i &gt;= 0</span></span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i &gt;= <span class="number">0</span> &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> &#123; <span class="comment">// 避免索引越界</span></span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="comment">// 如果没有找到任何单词，返回 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>但是在其中话是有一个有意思的事情</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    length := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(s)<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">        <span class="keyword">if</span> s[i] != <span class="string">&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> s[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp;  i &gt;= <span class="number">0</span>&#123;</span><br><span class="line">                length++</span><br><span class="line">                i--</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> length</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码我是这么写的 跟上面的没什么区别，但是没有通过 我又询问到底是为什么</p><p>关键在于顺序 以防止越界  for s[i] !&#x3D; ‘ ‘ &amp;&amp;  i &gt;&#x3D; 0</p><p>内层循环条件：</p><p>for s[i] !&#x3D; ‘ ‘ &amp;&amp; i &gt;&#x3D; 0 {<br>当 i 等于 0 时，s[i] 可能会访问索引 0 的内容，然后才进行 i &gt;&#x3D; 0 的检查。由于条件的顺序，s[i] 的访问可能在 i &lt; 0 时执行，导致索引越界。也就是说：</p><p>问题在于：</p><p>在执行 s[i] !&#x3D; ‘ ‘ 这个条件时，i 可能会变成负数（比如 i &#x3D;&#x3D; 0 时，接下来你做 i–，i 会变成 -1）。<br>但是，i &gt;&#x3D; 0 的条件是后面的检查，也就是说，在 i– 之后，s[i] !&#x3D; ‘ ‘ 已经执行了，导致 i &#x3D;&#x3D; -1 时，程序尝试访问 s[-1]，而 Go 语言数组下标不能为负数，这样会导致 索引越界 错误。</p><hr><hr><h4 id="21-合并两个有序链表："><a href="#21-合并两个有序链表：" class="headerlink" title="21 合并两个有序链表："></a>21 合并两个有序链表：</h4><p>l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]<br>输出：[1,1,2,3,4,4]<br>示例 2：</p><p>输入：l1 &#x3D; [], l2 &#x3D; []<br>输出：[]<br>示例 3：</p><p>输入：l1 &#x3D; [], l2 &#x3D; [0]<br>输出：[0]</p><p>我写的又臭又长的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1 *ListNode, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    list3 := &amp;ListNode&#123;</span><br><span class="line">    Val: <span class="number">0</span>,</span><br><span class="line">    Next: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">if</span> list1 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> list2 == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> list1.Val &lt;= list2.Val &#123;</span><br><span class="line">        <span class="keyword">if</span> list1.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> list2.Next != <span class="literal">nil</span>&#123;</span><br><span class="line">                   list3.Val = list2.Val </span><br><span class="line">                   list2 = list2.Next </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        list3.Val = list1.Val</span><br><span class="line">        list3 = list3.Next</span><br><span class="line">        list1 = list1.Next</span><br><span class="line">        &#125;  <span class="keyword">if</span> list1.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> list1.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">                list3.Val = list1.Val</span><br><span class="line">                list1 = list1.Next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        list3.Val = list2.Val</span><br><span class="line">        list3 = list3.Next</span><br><span class="line">        list2 = list2.Next</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> list1.Val &gt;= list2.Val &#123;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> list3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>疑惑： </p><p>你说得对，list3 :&#x3D; &amp;ListNode{} 确实只初始化了一个节点，但这个节点的作用是 哨兵节点 (dummy node)，用来简化链表操作和边界条件处理。</p><p>哨兵节点的主要特点是：</p><p>它本身并不存储有效数据（值通常是默认值，比如 0）。<br>它的作用是作为链表的起点，使链表构造和返回操作更加简单和一致。<br>以下是对你的疑问的详细解释：</p><ol><li>为什么哨兵节点只初始化一个节点却能构造完整链表？<br>哨兵节点的作用只是提供链表的起点，后续节点是通过动态创建并连接到它的 Next 指针上构造的。例如：</li></ol><p>list3 :&#x3D; &amp;ListNode{}  &#x2F;&#x2F; 初始化哨兵节点<br>current :&#x3D; list3      &#x2F;&#x2F; current 指向哨兵节点</p><p>current.Next &#x3D; &amp;ListNode{Val: 1} &#x2F;&#x2F; 创建第一个有效节点<br>current &#x3D; current.Next           &#x2F;&#x2F; 移动指针到新节点</p><p>current.Next &#x3D; &amp;ListNode{Val: 2} &#x2F;&#x2F; 创建第二个有效节点<br>current &#x3D; current.Next           &#x2F;&#x2F; 移动指针到新节点<br>这段代码最终形成的链表结构是：</p><p>scss<br>复制代码<br>哨兵节点 (值: 0) -&gt; 节点1 (值: 1) -&gt; 节点2 (值: 2)<br>返回值时，通过 list3.Next 跳过哨兵节点，直接指向第一个有效节点。</p><p>正确思维：</p><p>期望行为：应该创建一个新节点并将其连接到 current.Next。  我没有理解怎么初始化一个链表，并为后续创建新的结点添加值</p><p>emm 正解</p><h4 id="正确代码：-1"><a href="#正确代码：-1" class="headerlink" title="正确代码："></a>正确代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(list1, list2 *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    dummy := ListNode&#123;&#125; <span class="comment">// 用哨兵节点简化代码逻辑</span></span><br><span class="line">    cur := &amp;dummy <span class="comment">// cur 指向新链表的末尾</span></span><br><span class="line">    <span class="keyword">for</span> list1 != <span class="literal">nil</span> &amp;&amp; list2 != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> list1.Val &lt; list2.Val &#123;</span><br><span class="line">            cur.Next = list1 <span class="comment">// 把 list1 加到新链表中</span></span><br><span class="line">            list1 = list1.Next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 注：相等的情况加哪个节点都是可以的</span></span><br><span class="line">            cur.Next = list2 <span class="comment">// 把 list2 加到新链表中</span></span><br><span class="line">            list2 = list2.Next</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拼接剩余链表</span></span><br><span class="line">    <span class="keyword">if</span> list1 != <span class="literal">nil</span> &#123;</span><br><span class="line">        cur.Next = list1</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cur.Next = list2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中直接使用 list1 或 list2 而不是 list1.Val 是因为它要把整个节点连接到新链表中，而不仅仅是节点的值。</p><p>区别<br>list1.Val 仅获取当前节点的值。</p><p>如果只使用 Val，你只能获得一个值，无法直接将这个值插入链表中，还需要手动创建一个新节点。<br>list1 是指针，代表当前节点。</p><p>直接使用 list1 表示把当前节点（包括其 Val 和 Next 指针）插入到新链表中，效率更高且代码更简单。</p><hr><hr><p>今天又重新做了一下20题 有效括号</p><p>刚开始我在想，电脑应该怎么区分左括号和右括号这两个是怎么合并的？ 绞尽脑汁。 最终思想就是遍历字符串， 将左括号放入栈中 将栈顶元素和当前元素作比较 如果相同弹出括号，成功的标志是栈中元素为空</p><hr><p>232 用两个栈实现队列</p><p>[“MyQueue”, “push”, “push”, “peek”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br>输出：<br>[null, null, null, 1, 1, false]</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    Rear *MyQueue</span><br><span class="line">    Head *MyQueue</span><br><span class="line">    size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyQueue &#123;</span><br><span class="line">    Stack1 := []<span class="type">int</span></span><br><span class="line">    Stack2 := []<span class="type">int</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Push(x <span class="type">int</span>)  &#123;</span><br><span class="line">    Stack1 := []<span class="type">int</span></span><br><span class="line">    Stack2 := []<span class="type">int</span></span><br><span class="line">    Stack1 = <span class="built_in">append</span>(Stack1,x)</span><br><span class="line">    legth := <span class="built_in">len</span>(Stack1)</span><br><span class="line">    v := Stack1[l<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    Stack1 = Stack1(:<span class="built_in">len</span>(Stack1)<span class="number">-1</span>)</span><br><span class="line">    Stack2 = <span class="built_in">append</span>(Stack2,)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Peek();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>看到代码有点不知所措了，在每个地方应该放入什么 两个栈实现队列：思路我是有的 把数字放入其中一个栈中，然后在弹出来，放入第二个栈中，然后在第二个栈中弹出来就是队列</p><p>思路是对的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyQueue <span class="keyword">struct</span> &#123;</span><br><span class="line">    Stack1 []<span class="type">int</span></span><br><span class="line">    Stack2 []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyQueue &#123;</span><br><span class="line">    <span class="keyword">return</span> MyQueue&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Push(x <span class="type">int</span>)  &#123;</span><br><span class="line">    this.Stack1 = <span class="built_in">append</span> (this.Stack1,x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Pop() <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) != <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(this.Stack1) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    length1 := <span class="built_in">len</span>(this.Stack1)<span class="number">-1</span></span><br><span class="line">    val := this.Stack1[length1]</span><br><span class="line">    this.Stack1 = this.Stack1[:length1]</span><br><span class="line">    this.Stack2 = <span class="built_in">append</span>(this.Stack2,val)</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">    length2 := <span class="built_in">len</span>(this.Stack2)<span class="number">-1</span></span><br><span class="line">    result := this.Stack2[length2]</span><br><span class="line">    this.Stack2 = this.Stack2[:length2]</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Peek() <span class="type">int</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(this.Stack1) != <span class="number">0</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">len</span>(this.Stack1) &gt;<span class="number">0</span> &#123;</span><br><span class="line">            </span><br><span class="line">    length1 := <span class="built_in">len</span>(this.Stack1)<span class="number">-1</span></span><br><span class="line">    val := this.Stack1[length1]</span><br><span class="line">    this.Stack1 = this.Stack1[:length1]</span><br><span class="line">    this.Stack2 = <span class="built_in">append</span>(this.Stack2,val)</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    length2 := <span class="built_in">len</span>(this.Stack2) <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> this.Stack2[length2]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MyQueue)</span></span> Empty() <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.Stack1) == <span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(this.Stack2) == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * obj.Push(x);</span></span><br><span class="line"><span class="comment"> * param_2 := obj.Pop();</span></span><br><span class="line"><span class="comment"> * param_3 := obj.Peek();</span></span><br><span class="line"><span class="comment"> * param_4 := obj.Empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重新写了一遍 用例没有完全通过 </p><p>[null,null,null,null,null,1,null,5,2,3,4]</p><p>预期结果<br>[null,null,null,null,null,1,null,2,3,4,5]</p><p>有两个地方出错导致没有通过  if len(this.Stack1) !&#x3D; 0  条件判断句 改成 &#x3D;&#x3D;0 就通过了 思考为什么</p><hr><p>383.赎金信<br>参考两数之和的哈希表用法</p><p>我写出了以下代码 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span> ; i&lt;<span class="built_in">len</span>(ransomNote); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[ransomNote[i]]; ok&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        m[ransomNote[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k:=<span class="number">1</span>; k&lt;<span class="built_in">len</span>(magazine); k++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[magazine[k]]; ok &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> k == <span class="built_in">len</span>(magazine) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是没有通过，应该是情况考虑错了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(magazine); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[magazine[i]]; ok&#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        m[magazine[i]] = i </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k:=<span class="number">0</span>; k&lt;<span class="built_in">len</span>(ransomNote); k++ &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := m[ransomNote[k]]; ok &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终修改成这样 题目中话有一个条件 字母无法重复使用！！！这点给忘记给忘记了<br>问了这一点！ 关键就是对于字符的统计！</p><p>正确代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 用一个 map 记录 magazine 中每个字符出现的次数</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">byte</span>]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(magazine); i++ &#123;</span><br><span class="line">        m[magazine[i]]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查 ransomNote 中的每个字符是否在 magazine 中有足够的次数</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(ransomNote); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> m[ransomNote[i]] &gt; <span class="number">0</span> &#123;</span><br><span class="line">            m[ransomNote[i]]-- <span class="comment">// 使用一个字符</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// 如果次数不足，无法构造</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> <span class="comment">// 所有字符都能满足</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的疑惑：我理解前两个a会增到2 但是第三个字符是b的时候为什么会从0开始计算起而不是2</p><p>这是因为在 Go 的 map 中，每个键（key）是独立的，互相之间没有关联。</p><p>在你的例子中，当处理第三个字符 b 时：</p><p>之前已经对 a 进行了计数，所以 m[‘a’] &#x3D; 2。<br>但是 b 是一个新的键，之前并没有在 map 中出现过。<br>当访问 m[‘b’] 时，由于 map 默认返回未初始化键的值为类型的 零值（对于 int 类型来说，零值是 0），所以 m[‘b’] &#x3D; 0。<br>然后执行 m[‘b’]++，将其从 0 增加到 1。</p><hr><p>141.环形链表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[*ListNode]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        m[head]++</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[head]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又没有一次性通过 条件感太差了！</p><p>啊居然自己改对了！！！</p><p>调整了一下顺序，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * type ListNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Next *ListNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[*ListNode]<span class="type">int</span>)</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span> &#123;</span><br><span class="line">        m[head]++</span><br><span class="line">        head = head.Next</span><br><span class="line">        <span class="keyword">if</span> _,ok := m[head]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在其中出现的错误： map中的地址应该是结构体指针 而不是 *int </p><hr><p>如何在go中使用中序遍历</p><p>94题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    result := []<span class="type">int</span>&#123;&#125; <span class="comment">// 用于存储中序遍历的结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义递归函数</span></span><br><span class="line">    <span class="keyword">var</span> inorder <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span></span><br><span class="line">    inorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123; <span class="comment">// 递归终止条件：当前节点为空</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.Left)           <span class="comment">// 遍历左子树</span></span><br><span class="line">        result = <span class="built_in">append</span>(result, node.Val) <span class="comment">// 访问当前节点</span></span><br><span class="line">        inorder(node.Right)          <span class="comment">// 遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inorder(root) <span class="comment">// 从根节点开始中序遍历</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="comment">// 返回结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>inorder &#x3D; func(node *TreeNode) {<br>if node &#x3D;&#x3D; nil { &#x2F;&#x2F; 递归终止条件：当前节点为空<br>return<br>} 这块使用我不太清楚 我还以为是对原函数递归</p><hr><p>933.最近的请求次数</p><p>写一个 RecentCounter 类来计算特定时间范围内最近的请求。</p><p>请你实现 RecentCounter 类：</p><p>RecentCounter() 初始化计数器，请求数为 0 。<br>int ping(int t) 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t] 内发生的请求数。<br>保证 每次对 ping 的调用都使用比之前更大的 t 值。</p><p>输入：<br>[“RecentCounter”, “ping”, “ping”, “ping”, “ping”]<br>[[], [1], [100], [3001], [3002]]<br>输出：<br>[null, 1, 2, 3, 3]</p><p>解释：<br>RecentCounter recentCounter &#x3D; new RecentCounter();<br>recentCounter.ping(1);     &#x2F;&#x2F; requests &#x3D; [1]，范围是 [-2999,1]，返回 1<br>recentCounter.ping(100);   &#x2F;&#x2F; requests &#x3D; [1, 100]，范围是 [-2900,100]，返回 2<br>recentCounter.ping(3001);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001]，范围是 [1,3001]，返回 3<br>recentCounter.ping(3002);  &#x2F;&#x2F; requests &#x3D; [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3</p><p>读题读了一会才读懂，最后反应过来应该就是返回 在范围内的ping次数 需要用一个切片（其实应该是队列思想 入队 出队不符合条件的 返回符合条件的数量）<br>（这在go语言中就可以用切片来简化操作 返回 符合条件的ping次数 也就是 队列中剩下的长度 len（））</p><p>正确解答</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RecentCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">    count []<span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> RecentCounter &#123;</span><br><span class="line">    <span class="keyword">return</span> RecentCounter &#123;</span><br><span class="line">        count: []<span class="type">int</span>&#123;&#125;, </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *RecentCounter)</span></span> Ping(t <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    this.count = <span class="built_in">append</span>(this.count,t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点怎么移除不符合条件的 一个个对比</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(this.count)&gt;<span class="number">0</span> &amp;&amp; this.count[<span class="number">0</span>]&lt;t<span class="number">-3000</span> &#123;</span><br><span class="line">        this.count = this.count[<span class="number">1</span>:]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(this.count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RecentCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * obj := Constructor();</span></span><br><span class="line"><span class="comment"> * param_1 := obj.Ping(t);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>1.学会初始化结构体<br>2.学会使用切片思想实现 队列 栈等 加强对切片的操作</p><hr><p>12.17日 开始执行树和递归</p><p>104 二叉树的最大深度<br>110 平衡二叉树</p><p>104代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> l, r = maxDepth(root.Left), maxDepth(root.Right)</span><br><span class="line"><span class="keyword">if</span> l &gt; r &#123;</span><br><span class="line"><span class="keyword">return</span> l + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码我是抄的 我对递归的思想还是不太理解</p><p>递归的 隐式深度记录 是通过调用栈实现的：</p><p>每次递归调用时，程序会进入一个新的函数调用，并等待其返回值。<br>当递归调用到底（即遇到叶子节点或 nil 节点）时，递归开始返回。<br>每一层递归通过返回值，将子树的深度信息逐层传递回上一层。<br>可以理解为：</p><p>每个函数调用相当于“记住”当前节点的状态，等待左右子树的深度计算完成后，才计算当前节点的深度并返回。</p><p>递归的返回值 自然累加 深度的方式，不需要额外的变量来显式记录深度。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>20岁生日</title>
      <link href="/archives/live.html"/>
      <url>/archives/live.html</url>
      
        <content type="html"><![CDATA[<h2 id="生活的意义就是在于享受每一天，有开心，有难过，有惊喜！-享受它，生活就是这样！"><a href="#生活的意义就是在于享受每一天，有开心，有难过，有惊喜！-享受它，生活就是这样！" class="headerlink" title="生活的意义就是在于享受每一天，有开心，有难过，有惊喜！ 享受它，生活就是这样！"></a>生活的意义就是在于享受每一天，有开心，有难过，有惊喜！ 享受它，生活就是这样！</h2><p>有了博客可以让时间更具象化，留住每一刻，想看的时候翻一翻 感受真的不一样！</p><p>本来不想过生日的，但还是被寝室的兄弟们发现了哈哈哈哈好开心呢上大学的两年都收到了寝室5个兄弟给我送的蛋糕<br>感谢你们啦，尽管离开了家还是有人陪你过生日，非常开心，还是你们陪我走完大学四年<br>上高中的时候也没怎么正经过过生日，到了大学是你们让我的今天变得过呢更有意义，尽管在生活中有磕碰，但那是难以避免的！希望你们每个人以后路越来越好</p><p>也是收到家里人的好多红包啊哈哈啊哈好开心！ 感谢家人时刻牵挂着我！</p><h3 id="2023年的今天"><a href="#2023年的今天" class="headerlink" title="2023年的今天"></a>2023年的今天</h3><p><img src="/live/birsday.jpg" alt="生日"></p><h3 id="2024年的今天"><a href="#2024年的今天" class="headerlink" title="2024年的今天"></a>2024年的今天</h3><p><img src="/live/cake.jpg" alt="蛋糕"></p><hr><p>每年的生日许愿都是很广泛的 我姐说那是没有意义的哈哈哈一定要为自己许个愿望在新的一年实现它！</p><h3 id="小彩蛋"><a href="#小彩蛋" class="headerlink" title="小彩蛋"></a>小彩蛋</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="/live/birsday.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div><pre><code>11.16日</code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>一位老哥的分享给了我一些启发</title>
      <link href="/archives/live3.html"/>
      <url>/archives/live3.html</url>
      
        <content type="html"><![CDATA[<p>学习方法：老哥的思维方式也给了我一些启发</p><p>以下是老哥的分享：</p><p>当知识点量大起来时, 我觉得”写作”的意义应该在于辅助思考</p><p>因为短时间内可能我们能记得很好, 但是对于长时间的庞大知识体系的学习, 就容易忘记一些分支内容 </p><p>所以第一步我做的是把长长的博客尽量拆解为小的讨论主题</p><p>作为”词条”存在</p><p>比如我写了个k8s主题的词条 写道”容器”这个词会自动链接到我之前写过的容器相关的内容  里面的内容是否符合当下我需要的定义  如果是, 那么可以知识复用  如果不是, 那么我需不需要创建新的词条来讨论这个主题<br>然后关联知识形成网络</p><p>比如一个使用mysql + reids搭建的系统, 即用到了mysql, 又用到了redis, 同时它本身还是个系统设计就会难以归类 </p><p>但是 一个文章可以同时带有mysql, redis, 系统设计三种tag  让知识形成网络！</p><p>先把书的标题提取出来 建立一个词条  然后去网上查, 这个东西包含哪些东西 然后去网上查, 这个东西包含哪些东西 等熟悉了基于零散信息的网络后  再去快速浏览权威书籍 迭代网络  </p><hr><p>听了老哥的分享！ 我觉得自己再生活中真的缺乏太多的思考了！什么事知道他困难，不想办法，应该去思考一些东西才能让东西变得更活！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习</title>
      <link href="/archives/postgres.html"/>
      <url>/archives/postgres.html</url>
      
        <content type="html"><![CDATA[<p>学习文档：</p><p><a href="https://www.rockdata.net/zh-cn/tutorial/toc/">https://www.rockdata.net/zh-cn/tutorial/toc/</a></p><p>WHERE 语句如何使用</p><p><a href="https://www.rockdata.net/zh-cn/tutorial/dml-where/%E3%80%81">https://www.rockdata.net/zh-cn/tutorial/dml-where/、</a></p><p>总结来说： 放入condition，返回结果只会返回符合condition条件的， 搭配 AND OR IN LIKE等使用</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我学习的一些资源和方法</title>
      <link href="/archives/resource.html"/>
      <url>/archives/resource.html</url>
      
        <content type="html"><![CDATA[<p>兄弟，我理解你的心态，觉得实践的收获更直观，看书反而有点慢。但实际上，看书和实践结合，效果会倍增。下面我不仅推荐优质资源，还会分享高效阅读的方法，帮你更好地平衡学习时间。</p><hr><h3 id="学习资料推荐"><a href="#学习资料推荐" class="headerlink" title="学习资料推荐"></a><strong>学习资料推荐</strong></h3><h4 id="1-数据库相关"><a href="#1-数据库相关" class="headerlink" title="1. 数据库相关"></a><strong>1. 数据库相关</strong></h4><ul><li><strong>书籍</strong>：《高性能 MySQL》<ul><li>重点阅读：索引优化、事务机制、查询优化。</li><li><strong>免费在线教程</strong>：<ul><li><a href="https://www.w3schools.com/sql/">SQL 教程（w3schools）</a></li><li><a href="https://dev.mysql.com/doc/">MySQL 官方文档</a></li></ul></li></ul></li></ul><h4 id="2-计算机网络"><a href="#2-计算机网络" class="headerlink" title="2. 计算机网络"></a><strong>2. 计算机网络</strong></h4><ul><li><strong>书籍</strong>：《计算机网络：自顶向下方法》或《图解HTTP》<ul><li>重点章节：HTTP、TCP&#x2F;IP、DNS、HTTPS。</li><li><strong>免费资源</strong>：<ul><li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1030595307488672">HTTP 协议详解</a></li><li><a href="https://www.wireshark.org/">Wireshark 网络分析教程</a></li></ul></li></ul></li></ul><h4 id="3-操作系统"><a href="#3-操作系统" class="headerlink" title="3. 操作系统"></a><strong>3. 操作系统</strong></h4><ul><li><strong>书籍</strong>：《现代操作系统》<ul><li>重点章节：进程、线程、同步、内存管理。</li><li><strong>免费资源</strong>：<ul><li><a href="https://pages.cs.wisc.edu/~remzi/OSTEP/">Operating Systems: Three Easy Pieces</a></li><li><a href="https://www.linuxfoundation.org/">Linux 操作系统入门</a></li></ul></li></ul></li></ul><h4 id="4-系统设计"><a href="#4-系统设计" class="headerlink" title="4. 系统设计"></a><strong>4. 系统设计</strong></h4><ul><li><strong>书籍</strong>：《系统设计入门》（Grokking the System Design Interview）<ul><li>重点学习：缓存、负载均衡、限流。</li><li><strong>博客</strong>：<ul><li><a href="https://www.educative.io/courses/grokking-the-system-design-interview">系统设计基础</a></li></ul></li></ul></li></ul><h4 id="5-Redis"><a href="#5-Redis" class="headerlink" title="5. Redis"></a><strong>5. Redis</strong></h4><ul><li><strong>书籍</strong>：《Redis 实战》<ul><li>重点章节：缓存机制、分布式锁。</li><li><strong>免费资源</strong>：<ul><li><a href="https://redis.io/docs/">Redis 官方文档</a></li></ul></li></ul></li></ul><h4 id="6-算法与数据结构"><a href="#6-算法与数据结构" class="headerlink" title="6. 算法与数据结构"></a><strong>6. 算法与数据结构</strong></h4><ul><li><strong>书籍</strong>：《算法（第4版）》或《编程珠玑》<ul><li>重点章节：常用数据结构（栈、队列、二叉树）、动态规划。</li><li><strong>网站</strong>：<ul><li><a href="https://leetcode.com/">LeetCode 官方</a></li><li><a href="https://visualgo.net/">VisuAlgo（算法可视化）</a></li></ul></li></ul></li></ul><hr><h3 id="高效看书方法"><a href="#高效看书方法" class="headerlink" title="高效看书方法"></a><strong>高效看书方法</strong></h3><h4 id="1-目的导向阅读"><a href="#1-目的导向阅读" class="headerlink" title="1. 目的导向阅读"></a><strong>1. 目的导向阅读</strong></h4><ul><li><strong>明确目标</strong>：每次看书前，明确你要解决的问题。比如：<ul><li>“我需要理解事务是怎么实现的” → 阅读事务相关章节，跳过其他部分。</li><li>“我需要掌握 TCP 的连接过程” → 只看 TCP 的工作原理。</li></ul></li></ul><h4 id="2-略读和精读结合"><a href="#2-略读和精读结合" class="headerlink" title="2. 略读和精读结合"></a><strong>2. 略读和精读结合</strong></h4><ul><li><strong>略读</strong>：先快速翻阅目录和每章的开头，总结书的主要内容。</li><li><strong>精读</strong>：挑选与项目或刷题直接相关的部分深入看，配合做笔记和练习。</li></ul><h4 id="3-配合实践"><a href="#3-配合实践" class="headerlink" title="3. 配合实践"></a><strong>3. 配合实践</strong></h4><ul><li><strong>边学边做</strong>：看完书中某个知识点，立即在项目或代码中实现。<ul><li>例子：学完 Redis 的分布式锁，马上在银行项目中添加。</li></ul></li><li><strong>用书作为工具</strong>：书可以成为你的“随手参考”，遇到不懂的概念再翻阅相关章节，而不必一次性啃完。</li></ul><h4 id="4-输出内容"><a href="#4-输出内容" class="headerlink" title="4. 输出内容"></a><strong>4. 输出内容</strong></h4><ul><li><strong>写笔记</strong>：总结书中学到的知识，用自己的语言重新描述。</li><li><strong>录制分享</strong>：试着用 3 分钟向别人讲解你刚学的内容，加深记忆。</li></ul><h4 id="5-番茄工作法"><a href="#5-番茄工作法" class="headerlink" title="5. 番茄工作法"></a><strong>5. 番茄工作法</strong></h4><ul><li>每次阅读 25 分钟后，花 5 分钟总结这段时间的收获，然后休息片刻。效率会提升很多。</li></ul><hr><h3 id="实践与看书的时间分配"><a href="#实践与看书的时间分配" class="headerlink" title="实践与看书的时间分配"></a><strong>实践与看书的时间分配</strong></h3><ol><li><strong>每天早上&#x2F;晚上固定 1 小时阅读</strong>。<ul><li>比如：早上看《高性能 MySQL》，晚上看《计算机网络》。</li></ul></li><li><strong>实践时遇到问题，马上查书解决</strong>。<ul><li>例子：如果 Redis 配置缓存遇到问题，就查《Redis 实战》。</li></ul></li><li><strong>每周末专门安排 2 小时总结书中知识点，结合项目整理成笔记</strong>。</li></ol><hr><p>这样安排既能保持实践的节奏，又能让你从书中挖掘深层的原理。如果还有具体内容不理解，可以随时问我，我也可以帮你分解章节内容！</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>小计划</title>
      <link href="/archives/study_plan.html"/>
      <url>/archives/study_plan.html</url>
      
        <content type="html"><![CDATA[<p>兄弟，你的想法很清晰，我非常理解你想深入学习、夯实基础，而不是走捷径的决心。我们可以针对你的目标和现状制定一个更加实践导向的计划，同时保持学习过程有趣且充实。以下是我的建议和方案：</p><hr><h3 id="总体目标"><a href="#总体目标" class="headerlink" title="总体目标"></a><strong>总体目标</strong></h3><ol><li><strong>短期（2025年3月前）</strong>：增强银行项目的实用性和技术深度，掌握后端开发的核心技能，为实习做好准备。</li><li><strong>中长期（未来两年）</strong>：夯实计算机基础，深入理解系统设计、分布式系统及核心算法，逐步具备独立设计和开发复杂项目的能力。</li></ol><hr><h3 id="学习模块规划"><a href="#学习模块规划" class="headerlink" title="学习模块规划"></a><strong>学习模块规划</strong></h3><h4 id="1-项目深度增强（每周一个主题，贯穿整个学习计划）"><a href="#1-项目深度增强（每周一个主题，贯穿整个学习计划）" class="headerlink" title="1. 项目深度增强（每周一个主题，贯穿整个学习计划）"></a><strong>1. 项目深度增强（每周一个主题，贯穿整个学习计划）</strong></h4><p>目标：将现有银行项目提升到更贴近实际业务需求的水平，增加亮点功能。</p><ul><li><p><strong>Week 1: 数据一致性与事务</strong></p><ul><li>学习事务隔离级别（ACID），在项目中实现更加复杂的转账操作（如跨账户冻结和解冻）。</li><li>使用 SQLC 或 GORM，优化数据库操作。</li></ul></li><li><p><strong>Week 2: 引入 Redis</strong></p><ul><li>学习 Redis 基础知识，理解其在缓存和分布式锁中的应用。</li><li>在项目中实现：<ul><li>用户信息缓存，优化频繁查询。</li><li>基于 Redis 的幂等性控制（防止转账操作重复）。</li></ul></li></ul></li><li><p><strong>Week 3: RESTful API 和 JWT 身份验证</strong></p><ul><li>深化对 RESTful API 的理解，优化项目 API 设计。</li><li>引入 JWT 实现用户登录认证和权限管理。</li></ul></li><li><p><strong>Week 4: 日志和监控</strong></p><ul><li>集成日志框架（如 Logrus&#x2F;Zap），记录系统操作。</li><li>学习 Prometheus 基础知识，为项目添加简单监控。</li></ul></li><li><p><strong>Week 5: Docker 和部署优化</strong></p><ul><li>使用 Docker Compose 部署完整项目，模拟生产环境。</li><li>学习 Nginx 基础知识，优化项目访问流程。</li></ul></li><li><p><strong>Week 6: 微服务化</strong></p><ul><li>学习 Go 微服务框架（如 Gin、gRPC）。</li><li>将项目拆分成两个服务（如用户服务和交易服务），理解微服务架构基础。</li></ul></li></ul><hr><h4 id="2-算法与数据结构（每天一题，逐渐深入）"><a href="#2-算法与数据结构（每天一题，逐渐深入）" class="headerlink" title="2. 算法与数据结构（每天一题，逐渐深入）"></a><strong>2. 算法与数据结构（每天一题，逐渐深入）</strong></h4><p>目标：构建扎实的算法基础，为今后面试和实际开发做准备。</p><ul><li><strong>题目选择顺序</strong>：简单 -&gt; 中等 -&gt; 困难，优先 BFS&#x2F;DFS、二分查找、动态规划等重要领域。</li><li><strong>周主题</strong>：<ul><li>Week 1-2: 栈、队列、链表</li><li>Week 3-4: 二叉树与递归</li><li>Week 5-6: 动态规划与分治算法</li><li>Week 7+: 高频面试题复盘（重点记录和总结常见套路）。</li></ul></li></ul><hr><h4 id="3-计算机基础与原理（每周一本书-主题）"><a href="#3-计算机基础与原理（每周一本书-主题）" class="headerlink" title="3. 计算机基础与原理（每周一本书&#x2F;主题）"></a><strong>3. 计算机基础与原理（每周一本书&#x2F;主题）</strong></h4><p>目标：夯实后端开发的计算机科学基础。</p><ul><li><p><strong>Week 1: 计算机网络</strong></p><ul><li>阅读《计算机网络：自顶向下方法》或《图解HTTP》。</li><li>重点学习 HTTP、HTTPS、TCP&#x2F;IP 的工作原理，并理解抓包工具（如 Wireshark）的使用。</li></ul></li><li><p><strong>Week 2: 操作系统</strong></p><ul><li>阅读《现代操作系统》。</li><li>理解线程、进程、同步机制，以及如何在 Go 中实现简单的并发处理。</li></ul></li><li><p><strong>Week 3-4: 数据库系统</strong></p><ul><li>阅读《数据库系统概念》。</li><li>理解索引、事务原理、查询优化等内容。</li></ul></li><li><p><strong>Week 5: 系统设计</strong></p><ul><li>阅读《系统设计入门》或相关博客。</li><li>学习常见系统设计模式（如限流、负载均衡）和架构决策。</li></ul></li></ul><hr><h3 id="具体每日安排（样例）"><a href="#具体每日安排（样例）" class="headerlink" title="具体每日安排（样例）"></a><strong>具体每日安排（样例）</strong></h3><ul><li><p><strong>上午</strong>：</p><ul><li>刷一道 LeetCode 算法题，阅读相关解析，整理题解。</li><li>学习书籍相关章节，完成1-2页的读书笔记。</li></ul></li><li><p><strong>下午</strong>：</p><ul><li>按周主题在银行项目中完成对应功能开发。</li><li>查看官方文档、博客或视频教程，记录学习中的关键点。</li></ul></li><li><p><strong>晚上</strong>：</p><ul><li>复习当天内容，整理代码和笔记。</li><li>自测项目功能，尝试优化代码。</li></ul></li></ul><hr><h3 id="可实践性建议"><a href="#可实践性建议" class="headerlink" title="可实践性建议"></a><strong>可实践性建议</strong></h3><ol><li><strong>建立个人技术博客</strong>：把每天的学习记录写成博客或日志，比如讲解项目中 Redis 的用法或总结某道算法题的思路。</li><li><strong>参与开源项目</strong>：找一个简单的 Go 开源项目，阅读代码，尝试修复 bug 或贡献文档。</li><li><strong>模拟面试</strong>：每两周自测一次，将银行项目作为核心，讲解架构设计和亮点功能。</li></ol><hr><h3 id="最终成果展示"><a href="#最终成果展示" class="headerlink" title="最终成果展示"></a><strong>最终成果展示</strong></h3><ul><li>一个高度完善的银行项目：<ul><li>支持分布式事务、JWT 身份验证、Redis 缓存与微服务架构。</li><li>提供完善的 Docker 部署文档。</li></ul></li><li>一个 LeetCode 高质量题解库（至少 50 道题）。</li><li>一份扎实的基础知识笔记，涵盖网络、操作系统和数据库。</li></ul><p>引入项目技术栈（2周）：在新项目中加入 SQLC 工具、中间件，理解每个技术的接入过程。</p><p>实现进阶功能（3周）：根据银行项目的转账逻辑，尝试自己独立实现一次。</p><p>重点学习 HTTP 和 RESTful API。 深入理解数据库  深入理解数据库 熟悉中间件的实现逻辑</p><p>Web开发</p><ol><li>Go by example</li><li>三本书</li><li>两个项目 Memos Apache Answer</li><li>算法</li><li>gin-gonic.com</li></ol><p>微服务进阶</p><p>  gRPC</p><hr>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>json的序列化与反序列化</title>
      <link href="/archives/serialize.html"/>
      <url>/archives/serialize.html</url>
      
        <content type="html"><![CDATA[<p>序列化：将 Go 中的结构体、切片、map 等数据结构转换为 JSON 格式的字符串。</p><p>作用：方便数据在网络传输、文件保存等情境中使用。</p><p>反序列化：将 JSON 格式的字符串转换为 Go 的数据结构。</p><p>作用：方便从 JSON 中提取数据并在程序中使用。</p><p>JSON<br>{<br>“”： “”，<br>“”： “”，<br>“”： “”<br>}</p><p>Go中 使用 Marshal Unmarshal 进行序列化和反序列化</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p := Person&#123;Name: <span class="string">&quot;Alice&quot;</span>, Age: <span class="number">25</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化为 JSON</span></span><br><span class="line">    jsonData, err := json.Marshal(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(jsonData)) <span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jsonData := <span class="string">`&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25&#125;`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p Person</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化为结构体</span></span><br><span class="line">    err := json.Unmarshal([]<span class="type">byte</span>(jsonData), &amp;p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(p.Name, p.Age) <span class="comment">// 输出: Alice 25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类比一下进程间管道通信：<br>在父子进程使用管道进行通信时，数据通常以字节流的形式传输。<br>要传递复杂数据结构，需要将数据转换为字节流（序列化），并在另一端解析回来（反序列化）。</p><p>GO中实现 字符进程通信</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    Content <span class="type">string</span> <span class="string">`json:&quot;content&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r, w, err := os.Pipe() <span class="comment">// 创建管道</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Error creating pipe:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.Getenv(<span class="string">&quot;IS_CHILD&quot;</span>) == <span class="string">&quot;1&quot;</span> &#123;</span><br><span class="line">        <span class="comment">// 子进程逻辑</span></span><br><span class="line">        r.Close() <span class="comment">// 关闭写端</span></span><br><span class="line">        <span class="keyword">var</span> msg Message</span><br><span class="line">        decoder := json.NewDecoder(r)</span><br><span class="line">        <span class="keyword">if</span> err := decoder.Decode(&amp;msg); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;Error decoding:&quot;</span>, err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;Child received:&quot;</span>, msg.Content)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 父进程逻辑</span></span><br><span class="line">        w.Close() <span class="comment">// 关闭读端</span></span><br><span class="line">        cmd := os.Exec(os.Args[<span class="number">0</span>], os.Args, os.Environ())</span><br><span class="line">        cmd.Env = <span class="built_in">append</span>(os.Environ(), <span class="string">&quot;IS_CHILD=1&quot;</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            encoder := json.NewEncoder(w)</span><br><span class="line">            encoder.Encode(Message&#123;Content: <span class="string">&quot;Hello, Child!&quot;</span>&#125;)</span><br><span class="line">        &#125;()</span><br><span class="line">        cmd.Wait()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情鏈接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>beijing_photo</title>
      <link href="/picture/beijing-photo/index.html"/>
      <url>/picture/beijing-photo/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-container" data-type="data" data-button="true">      <div class="gallery-items">[{"url":"/beijing_photo/beijing4.jpg","alt":""},{"url":"/beijing_photo/beijing5.jpg","alt":""},{"url":"/beijing_photo/beijing6.jpg","alt":""},{"url":"/beijing_photo/beijing7.jpg","alt":""},{"url":"/beijing_photo/beijing8.jpg","alt":""},{"url":"/beijing_photo/beijing9.jpg","alt":""},{"url":"/beijing_photo/beijing11.jpg","alt":""},{"url":"/beijing_photo/beijing12.jpg","alt":""},{"url":"/beijing_photo/beijing13.jpg","alt":""},{"url":"/beijing_photo/beijing14.jpg","alt":""},{"url":"/beijing_photo/beijing15.jpg","alt":""},{"url":"/beijing_photo/beijing16.jpg","alt":""},{"url":"/beijing_photo/beijing17.jpg","alt":""},{"url":"/beijing_photo/beijing18.jpg","alt":""}]</div>    </div>]]></content>
      
    </entry>
    
    
  
</search>
